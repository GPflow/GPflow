version: 2.1

executors:
  default:
    docker:
      - image: cimg/python:3.6
    working_directory: /tmp/workspace

commands:
  run-tests:
    parameters:
      pytest_filter:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Run tests
          command: |
            source .venv/bin/activate
            pytest -v -W ignore::UserWarning --durations=10 -m "<<parameters.pytest_filter>>" --cov=./gpflow ./tests
      - run:
          name: Upload coverage report
          command: |
            source .venv/bin/activate
            bash <(curl -s https://codecov.io/bash) -t "${CODECOV_TOKEN}"

jobs:
  setup-venv:
    executor: default
    steps:
      - checkout
      - run:
          name: Setup virtual environment
          command: |
            # Run in a fresh virtual environment, to avoid conflicts with preinstalled packages.
            virtualenv -p python3.6 .venv
            source .venv/bin/activate
            pip install --progress-bar=off -U pip
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - "*"

  install-gpflow:
    executor: default
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install GPflow
          command: |
            source .venv/bin/activate
            # Ensure consistency between tensorflow and tensorflow-probability
            pip install --progress-bar=off tensorflow==2.6.* tensorflow-probability==0.14.*
            pip install --progress-bar=off -e .
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - .venv

  install-gpflow-tests:
    executor: default
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install GPflow tests
          command: |
            source .venv/bin/activate
            pip install --progress-bar=off -r tests_requirements.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - .venv

  verify-install:
    executor: default
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Check installed dependencies are compatible
          command: |
            source .venv/bin/activate
            pip check -vvv
            python -c "import gpflow"

  type-check:
    executor: default
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install type checker
          command: |
            source .venv/bin/activate
            pip install --progress-bar=off mypy types-pkg_resources
      - run:
          name: Run type checker
          command: |
            source .venv/bin/activate
            mypy gpflow tests

  unit-test:
    executor: default
    steps:
      - run-tests:
          pytest_filter: not notebooks

  notebook-test:
    executor: default
    steps:
      - run-tests:
          pytest_filter: notebooks

  format-checker:
    executor: default
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install black and isort
          command: |
            source .venv/bin/activate
            pip install --progress-bar=off black==20.8b1 isort
      - run:
          name: Run format check
          command: |
            source .venv/bin/activate
            make format-check

  trigger-docs-generation:
    docker:
      - image: cimg/python:3.6
        environment:
            ORGANIZATION: GPflow
            PROJECT: docs
            BRANCH: << pipeline.git.branch >>

    steps:
      - run:
          name: Trigger the Build Job in Docs repo
          # Compiled documentation for readthedocs are built and stored in the https://github.com/GPflow/docs/ repository
          # For configuration of the doc build, see https://github.com/GPflow/docs/blob/develop/.circleci/config.yml
          command: |
            BUILD_INFO=$(curl -X POST -H -d \
                "{}" \
                "https://circleci.com/api/v1/project/$ORGANIZATION/$PROJECT/tree/$BRANCH?circle-token=$DOCS_TOKEN")

  deploy:
    executor: default
    steps:
      - checkout
      - run:
          name: Verify git tag vs. VERSION
          command: |
            VERSION="v$(cat VERSION | tr -d '\t\r\n ')"
            if [ "$VERSION" != "$CIRCLE_TAG" ]; then
              echo "The package version ($VERSION) and the latest tag version ($CIRCLE_TAG) are different"
              exit 1
            fi
      - run:
          name: Install twine
          command: |
            # Run in a fresh virtual environment, to avoid conflicts with preinstalled packages.
            virtualenv -p python3.6 .venv
            source .venv/bin/activate
            pip install --progress-bar=off -U pip
            pip install --progress-bar=off twine
      - run:
          name: Init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = artemav" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: Create pip package
          command: |
            source .venv/bin/activate
            python setup.py bdist_wheel sdist
      - run:
          name: Upload to PyPI
          command: |
            source .venv/bin/activate
            twine upload dist/*


workflows:
  version: 2.1
  build_test_and_deploy:
    jobs:
      - setup-venv:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-rc[0-9]+)?/
      - install-gpflow:
          requires:
            - setup-venv
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-rc[0-9]+)?/
      - install-gpflow-tests:
          requires:
            - install-gpflow
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-rc[0-9]+)?/
      - verify-install:
          requires:
            - install-gpflow
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-rc[0-9]+)?/
      - type-check:
          requires:
            - setup-venv
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-rc[0-9]+)?/
      - format-checker:
          requires:
            - setup-venv
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-rc[0-9]+)?/
      - unit-test:
          requires:
            - install-gpflow-tests
            - format-checker
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-rc[0-9]+)?/
      - notebook-test:
          requires:
            - install-gpflow-tests
            - format-checker
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-rc[0-9]+)?/
      - trigger-docs-generation:
          requires:
            - unit-test
            - notebook-test
          filters:
            branches:
              only:
                - master
                - develop
      - deploy:
          requires:
            - unit-test
            - notebook-test
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-rc[0-9]+)?/
            branches:
              ignore: /.*/
