# -*- coding: utf-8 -*-

import tensorflow as tf
from .. import gpr
from .coregionalized_model import Coregionalized_GPModel
from ..mean_functions import Zero
from . import coregionalized_likelihoods
from ..likelihoods import Gaussian
from .labeled_data import LabeledData

class GPR(Coregionalized_GPModel, gpr.GPR):
    """
    Coregionalized GPR.
    
    This method inheritates from Coregionalized_GPModel and gpr.GPR.
    
    Coregionalized_GPModel provides some methods relating to the AutoFlow
    wrappint.
    Coregionalized_GPModel class does not have instances (except for those 
    generated by AutoFlow)

    """
    def __init__(self, X, Y, label, kern, mean_function=Zero(), num_labels=None):
        """
        X is a data matrix, size N x D
        Y is a data matrix, size N x R
        label is a label for the data, size N
        kern should be one of coregionalized_kernels.
        """
        X = LabeledData(X, label, on_shape_change='pass', num_labels=num_labels)
        Y = LabeledData(Y, label, on_shape_change='pass', num_labels=num_labels)
        
        # Gaussian likelihoods for every labels
        likelihood = coregionalized_likelihoods.Likelihood(\
                            [Gaussian() for i in range(len(X.num_labels))])
        
        Coregionalized_GPModel.__init__(self, X, Y, kern, likelihood, mean_function)
        self.num_latent = Y.data.shape[1]
        

    def get_variance(self):
        """
        Overload get_variance method so that the variance-vector from multiple
        likelihoods is appropriately gathered.
        """
        var = []
        for y, lik in zip(self.Y.split(self.Y.data), self.likelihood):
            var.append(tf.ones(tf.shape(y))*lik.variation)
        return tf.diag(self.Y.restore(var))
        