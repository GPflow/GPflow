gpflow.covariances
==================

.. THIS IS AN AUTOGENERATED RST FILE

.. automodule:: gpflow.covariances

Functions
---------

gpflow.covariances.Kuf
~~~~~~~~~~~~~~~~~~~~~~

This function uses multiple dispatch, which will depend on the type of argument passed in:

.. code-block:: python

    gpflow.covariances.Kuf( InducingPoints, Kernel, object )
    # dispatch to -> gpflow.covariances.kufs.Kuf_kernel_inducingpoints(...)

.. autofunction:: gpflow.covariances.kufs.Kuf_kernel_inducingpoints

.. code-block:: python

    gpflow.covariances.Kuf( Multiscale, SquaredExponential, object )
    # dispatch to -> gpflow.covariances.kufs.Kuf_sqexp_multiscale(...)

.. autofunction:: gpflow.covariances.kufs.Kuf_sqexp_multiscale

.. code-block:: python

    gpflow.covariances.Kuf( InducingPatches, Convolutional, object )
    # dispatch to -> gpflow.covariances.kufs.Kuf_conv_patch(...)

.. autofunction:: gpflow.covariances.kufs.Kuf_conv_patch

.. code-block:: python

    gpflow.covariances.Kuf( InducingPoints, MultioutputKernel, object )
    # dispatch to -> gpflow.covariances.multioutput.kufs.Kuf_generic(...)

.. autofunction:: gpflow.covariances.multioutput.kufs.Kuf_generic

.. code-block:: python

    gpflow.covariances.Kuf( SharedIndependentInducingVariables, SharedIndependent, object )
    # dispatch to -> gpflow.covariances.multioutput.kufs.Kuf_shared_shared(...)

.. autofunction:: gpflow.covariances.multioutput.kufs.Kuf_shared_shared

.. code-block:: python

    gpflow.covariances.Kuf( SeparateIndependentInducingVariables, SharedIndependent, object )
    # dispatch to -> gpflow.covariances.multioutput.kufs.Kuf_separate_shared(...)

.. autofunction:: gpflow.covariances.multioutput.kufs.Kuf_separate_shared

.. code-block:: python

    gpflow.covariances.Kuf( SharedIndependentInducingVariables, SeparateIndependent, object )
    # dispatch to -> gpflow.covariances.multioutput.kufs.Kuf_shared_separate(...)

.. autofunction:: gpflow.covariances.multioutput.kufs.Kuf_shared_separate

.. code-block:: python

    gpflow.covariances.Kuf( SeparateIndependentInducingVariables, SeparateIndependent, object )
    # dispatch to -> gpflow.covariances.multioutput.kufs.Kuf_separate_separate(...)

.. autofunction:: gpflow.covariances.multioutput.kufs.Kuf_separate_separate

.. code-block:: python

    gpflow.covariances.Kuf( FallbackSeparateIndependentInducingVariables, LinearCoregionalization, object )
    # dispatch to -> gpflow.covariances.multioutput.kufs.Kuf_fallback_separate_linear_coregionalization(...)

.. autofunction:: gpflow.covariances.multioutput.kufs.Kuf_fallback_separate_linear_coregionalization

.. code-block:: python

    gpflow.covariances.Kuf( FallbackSharedIndependentInducingVariables, LinearCoregionalization, object )
    # dispatch to -> gpflow.covariances.multioutput.kufs.Kuf_fallback_shared_linear_coregionalization(...)

.. autofunction:: gpflow.covariances.multioutput.kufs.Kuf_fallback_shared_linear_coregionalization

.. code-block:: python

    gpflow.covariances.Kuf( SharedIndependentInducingVariables, LinearCoregionalization, object )
    # dispatch to -> gpflow.covariances.multioutput.kufs.Kuf_shared_linear_coregionalization(...)

.. autofunction:: gpflow.covariances.multioutput.kufs.Kuf_shared_linear_coregionalization

.. code-block:: python

    gpflow.covariances.Kuf( SeparateIndependentInducingVariables, LinearCoregionalization, object )
    # dispatch to -> gpflow.covariances.multioutput.kufs.Kuf_separate_linear_coregionalization(...)

.. autofunction:: gpflow.covariances.multioutput.kufs.Kuf_separate_linear_coregionalization

gpflow.covariances.Kuu
~~~~~~~~~~~~~~~~~~~~~~

This function uses multiple dispatch, which will depend on the type of argument passed in:

.. code-block:: python

    gpflow.covariances.Kuu( InducingPoints, Kernel )
    # dispatch to -> gpflow.covariances.kuus.Kuu_kernel_inducingpoints(...)

.. autofunction:: gpflow.covariances.kuus.Kuu_kernel_inducingpoints

.. code-block:: python

    gpflow.covariances.Kuu( Multiscale, SquaredExponential )
    # dispatch to -> gpflow.covariances.kuus.Kuu_sqexp_multiscale(...)

.. autofunction:: gpflow.covariances.kuus.Kuu_sqexp_multiscale

.. code-block:: python

    gpflow.covariances.Kuu( InducingPatches, Convolutional )
    # dispatch to -> gpflow.covariances.kuus.Kuu_conv_patch(...)

.. autofunction:: gpflow.covariances.kuus.Kuu_conv_patch

.. code-block:: python

    gpflow.covariances.Kuu( InducingPoints, MultioutputKernel )
    # dispatch to -> gpflow.covariances.multioutput.kuus.Kuu_generic(...)

.. autofunction:: gpflow.covariances.multioutput.kuus.Kuu_generic

.. code-block:: python

    gpflow.covariances.Kuu( FallbackSharedIndependentInducingVariables, SharedIndependent )
    # dispatch to -> gpflow.covariances.multioutput.kuus.Kuu_shared_shared(...)

.. autofunction:: gpflow.covariances.multioutput.kuus.Kuu_shared_shared

.. code-block:: python

    gpflow.covariances.Kuu( FallbackSharedIndependentInducingVariables, SeparateIndependent )
    gpflow.covariances.Kuu( FallbackSharedIndependentInducingVariables, IndependentLatent )
    # dispatch to -> gpflow.covariances.multioutput.kuus.Kuu_fallback_shared(...)

.. autofunction:: gpflow.covariances.multioutput.kuus.Kuu_fallback_shared

.. code-block:: python

    gpflow.covariances.Kuu( FallbackSeparateIndependentInducingVariables, SharedIndependent )
    # dispatch to -> gpflow.covariances.multioutput.kuus.Kuu_fallback_separate_shared(...)

.. autofunction:: gpflow.covariances.multioutput.kuus.Kuu_fallback_separate_shared

.. code-block:: python

    gpflow.covariances.Kuu( FallbackSeparateIndependentInducingVariables, SeparateIndependent )
    gpflow.covariances.Kuu( FallbackSeparateIndependentInducingVariables, LinearCoregionalization )
    # dispatch to -> gpflow.covariances.multioutput.kuus.Kuu_fallbace_separate(...)

.. autofunction:: gpflow.covariances.multioutput.kuus.Kuu_fallbace_separate
