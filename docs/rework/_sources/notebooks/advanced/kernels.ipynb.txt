{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a3d2cf64",
   "metadata": {},
   "source": [
    "# Manipulating kernels\n",
    "\n",
    "\n",
    "GPflow comes with a range of kernels. In this notebook, we examine some of them, show how you can combine them to make new kernels, and discuss the `active_dims` feature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "48646459",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-07T14:35:01.487892Z",
     "iopub.status.busy": "2022-09-07T14:35:01.487081Z",
     "iopub.status.idle": "2022-09-07T14:35:04.267075Z",
     "shell.execute_reply": "2022-09-07T14:35:04.266518Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/jesper/src/GPflow/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.decorator.check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "/home/jesper/src/GPflow/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.inheritance.inherit_check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "import gpflow\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.style.use(\"ggplot\")\n",
    "import tensorflow as tf\n",
    "\n",
    "from gpflow.ci_utils import reduce_in_tests\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "321fa3e0",
   "metadata": {},
   "source": [
    "## Standard kernels in GPflow\n",
    "\n",
    "GPflow comes with lots of standard kernels. Some very simple kernels produce constant functions, linear functions, and white noise functions:\n",
    "\n",
    " * `gpflow.kernels.Constant`\n",
    "\n",
    " * `gpflow.kernels.Linear`\n",
    "\n",
    " * `gpflow.kernels.White`\n",
    "\n",
    "Some stationary functions produce samples with varying degrees of smoothness:\n",
    "\n",
    " * `gpflow.kernels.Exponential`\n",
    "\n",
    " * `gpflow.kernels.Matern12`\n",
    "\n",
    " * `gpflow.kernels.Matern32`\n",
    "\n",
    " * `gpflow.kernels.Matern52`\n",
    "\n",
    " * `gpflow.kernels.SquaredExponential` (also known as `gpflow.kernels.RBF`)\n",
    "\n",
    " * `gpflow.kernels.RationalQuadratic`\n",
    "\n",
    "Two kernels produce periodic samples:\n",
    "\n",
    " * `gpflow.kernels.Cosine`\n",
    "\n",
    " * `gpflow.kernels.Periodic`\n",
    "\n",
    "Other kernels that are implemented in core GPflow include:\n",
    "\n",
    " * `gpflow.kernels.Polynomial`\n",
    "\n",
    " * `gpflow.kernels.ArcCosine` (\"neural network kernel\")\n",
    "\n",
    " * `gpflow.kernels.Coregion`\n",
    "\n",
    "Let's define some plotting utils functions and have a look at samples from the prior for some of them:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "259c8cab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-07T14:35:04.269433Z",
     "iopub.status.busy": "2022-09-07T14:35:04.269173Z",
     "iopub.status.idle": "2022-09-07T14:35:04.749619Z",
     "shell.execute_reply": "2022-09-07T14:35:04.749147Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/jesper/src/GPflow/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.checker.ShapeChecker.__init__ which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "2022-09-07 15:35:04.364880: E tensorflow/stream_executor/cuda/cuda_driver.cc:271] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected\n",
      "2022-09-07 15:35:04.364935: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:169] retrieving CUDA diagnostic information for host: jesper-desktop\n",
      "2022-09-07 15:35:04.364949: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:176] hostname: jesper-desktop\n",
      "2022-09-07 15:35:04.365052: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:200] libcuda reported version is: 495.29.5\n",
      "2022-09-07 15:35:04.365091: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:204] kernel reported version is: 495.29.5\n",
      "2022-09-07 15:35:04.365102: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:310] kernel version seems to match DSO: 495.29.5\n",
      "2022-09-07 15:35:04.365828: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 8 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plotkernelsample(k, ax, xmin=-3, xmax=3):\n",
    "    n_grid = reduce_in_tests(100)\n",
    "    xx = np.linspace(xmin, xmax, n_grid)[:, None]\n",
    "    K = k(xx)\n",
    "    ax.plot(xx, np.random.multivariate_normal(np.zeros(n_grid), K, 3).T)\n",
    "    ax.set_title(k.__class__.__name__)\n",
    "\n",
    "\n",
    "np.random.seed(27)\n",
    "f, axes = plt.subplots(2, 4, figsize=(12, 6), sharex=True, sharey=True)\n",
    "plotkernelsample(gpflow.kernels.Matern12(), axes[0, 0])\n",
    "plotkernelsample(gpflow.kernels.Matern32(), axes[0, 1])\n",
    "plotkernelsample(gpflow.kernels.Matern52(), axes[0, 2])\n",
    "plotkernelsample(gpflow.kernels.RBF(), axes[0, 3])\n",
    "plotkernelsample(gpflow.kernels.Constant(), axes[1, 0])\n",
    "plotkernelsample(gpflow.kernels.Linear(), axes[1, 1])\n",
    "plotkernelsample(gpflow.kernels.Cosine(), axes[1, 2])\n",
    "plotkernelsample(gpflow.kernels.Periodic(gpflow.kernels.SquaredExponential()), axes[1, 3])\n",
    "axes[0, 0].set_ylim(-3, 3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9282c82a",
   "metadata": {},
   "source": [
    "## First example: create a Matern 3/2 covariance kernel\n",
    "\n",
    "Many kernels have hyperparameters, for example `variance` and `lengthscales`. You can change the value of these parameters from their default value of `1.0`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9edad640",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-07T14:35:04.751606Z",
     "iopub.status.busy": "2022-09-07T14:35:04.751450Z",
     "iopub.status.idle": "2022-09-07T14:35:04.758529Z",
     "shell.execute_reply": "2022-09-07T14:35:04.758148Z"
    }
   },
   "outputs": [],
   "source": [
    "k = gpflow.kernels.Matern32(variance=10.0, lengthscales=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3fbaf5e",
   "metadata": {},
   "source": [
    "**NOTE:** The values specified for the `variance` and `lengthscales` parameters are **floats**.\n",
    "\n",
    "To get information about the kernel, use `print_summary(k)` (plain text) or, in a notebook, pass the option `fmt=\"notebook\"` to obtain a nicer rendering:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "16172015",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-07T14:35:04.760407Z",
     "iopub.status.busy": "2022-09-07T14:35:04.760253Z",
     "iopub.status.idle": "2022-09-07T14:35:04.770590Z",
     "shell.execute_reply": "2022-09-07T14:35:04.770102Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\n",
      "\u2502 name                  \u2502 class     \u2502 transform   \u2502 prior   \u2502 trainable   \u2502 shape   \u2502 dtype   \u2502   value \u2502\n",
      "\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n",
      "\u2502 Matern32.variance     \u2502 Parameter \u2502 Softplus    \u2502         \u2502 True        \u2502 ()      \u2502 float64 \u2502      10 \u2502\n",
      "\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n",
      "\u2502 Matern32.lengthscales \u2502 Parameter \u2502 Softplus    \u2502         \u2502 True        \u2502 ()      \u2502 float64 \u2502       2 \u2502\n",
      "\u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                 </th><th>class    </th><th>transform  </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>Matern32.variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">     10</td></tr>\n",
       "<tr><td>Matern32.lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      2</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                 </th><th>class    </th><th>transform  </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>Matern32.variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">     10</td></tr>\n",
       "<tr><td>Matern32.lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      2</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from gpflow.utilities import print_summary\n",
    "\n",
    "print_summary(k)\n",
    "print_summary(k, fmt=\"notebook\")\n",
    "# You can change the default format as follows:\n",
    "gpflow.config.set_default_summary_fmt(\"notebook\")\n",
    "print_summary(k)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2372ed4",
   "metadata": {},
   "source": [
    "You can access the parameter values and assign new values with the same syntax as for models:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "73add12b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-07T14:35:04.772490Z",
     "iopub.status.busy": "2022-09-07T14:35:04.772336Z",
     "iopub.status.idle": "2022-09-07T14:35:04.777610Z",
     "shell.execute_reply": "2022-09-07T14:35:04.777163Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=2.0>\n",
      "<Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=0.5>\n"
     ]
    }
   ],
   "source": [
    "print(k.lengthscales)\n",
    "k.lengthscales.assign(0.5)\n",
    "print(k.lengthscales)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59b5cd51",
   "metadata": {},
   "source": [
    "Finally, you can *call* the kernel object to compute covariance matrices:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4cd302f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-07T14:35:04.779470Z",
     "iopub.status.busy": "2022-09-07T14:35:04.779319Z",
     "iopub.status.idle": "2022-09-07T14:35:04.859518Z",
     "shell.execute_reply": "2022-09-07T14:35:04.858777Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X1 = np.array([[0.0]])\n",
    "X2 = np.linspace(-2, 2, 101).reshape(-1, 1)\n",
    "\n",
    "K21 = k(X2, X1)  # cov(f(X2), f(X1)): matrix with shape [101, 1]\n",
    "K22 = k(X2)  # equivalent to k(X2, X2) (but more efficient): matrix with shape [101, 101]\n",
    "\n",
    "# plotting\n",
    "plt.figure()\n",
    "plt.plot(X2, K21)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f716b43",
   "metadata": {},
   "source": [
    "## Combine kernels\n",
    "Sums and products of kernels are also valid kernels.\n",
    "You can add or multiply instances of kernels to create a new composite kernel with the parameters of the old ones:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6f38dedf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-07T14:35:04.861982Z",
     "iopub.status.busy": "2022-09-07T14:35:04.861686Z",
     "iopub.status.idle": "2022-09-07T14:35:05.236178Z",
     "shell.execute_reply": "2022-09-07T14:35:05.235692Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                       </th><th>class    </th><th>transform  </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>Sum.kernels[0].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "<tr><td>Sum.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "<tr><td>Sum.kernels[1].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                           </th><th>class    </th><th>transform  </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>Product.kernels[0].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "<tr><td>Product.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "<tr><td>Product.kernels[1].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "k1 = gpflow.kernels.Matern12()\n",
    "k2 = gpflow.kernels.Linear()\n",
    "\n",
    "k3 = k1 + k2\n",
    "k4 = k1 * k2\n",
    "\n",
    "print_summary(k3)\n",
    "print_summary(k4)\n",
    "\n",
    "\n",
    "def plotkernelfunction(k, ax, xmin=-3, xmax=3, other=0):\n",
    "    n_grid = reduce_in_tests(200)\n",
    "    xx = np.linspace(xmin, xmax, n_grid)[:, None]\n",
    "    ax.plot(xx, k(xx, np.zeros((1, 1)) + other))\n",
    "    ax.set_title(k.__class__.__name__ + \" k(x, %f)\" % other)\n",
    "\n",
    "\n",
    "f, axes = plt.subplots(2, 2, figsize=(12, 6), sharex=True)\n",
    "plotkernelfunction(k3, axes[0, 0], other=1.0)\n",
    "plotkernelfunction(k4, axes[0, 1], other=1.0)\n",
    "plotkernelsample(k3, axes[1, 0])\n",
    "plotkernelsample(k4, axes[1, 1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c8eedd2",
   "metadata": {},
   "source": [
    "## Kernels for higher-dimensional input spaces\n",
    "\n",
    "Kernels generalize to multiple dimensions straightforwardly. Stationary kernels support \"Automatic Relevance Determination\" (ARD), that is, having a different lengthscale parameter for each input dimension. Simply pass in an array of the same length as the number of input dimensions. **NOTE:** This means that the kernel object is then able to process only inputs of that dimension!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c49c4ea",
   "metadata": {},
   "source": [
    "You can also initialize the lengthscales when the object is created:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ccb19455",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-07T14:35:05.250547Z",
     "iopub.status.busy": "2022-09-07T14:35:05.250368Z",
     "iopub.status.idle": "2022-09-07T14:35:05.260779Z",
     "shell.execute_reply": "2022-09-07T14:35:05.260280Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                 </th><th>class    </th><th>transform  </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th>value        </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>Matern52.variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0          </td></tr>\n",
       "<tr><td>Matern52.lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>(3,)   </td><td>float64</td><td>[0.1 0.2 5. ]</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "k = gpflow.kernels.Matern52(lengthscales=[0.1, 0.2, 5.0])\n",
    "print_summary(k)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f0a1106",
   "metadata": {},
   "source": [
    "## Specify active dimensions\n",
    "\n",
    "When combining kernels, it's often helpful to have bits of the kernel working on different dimensions. For example, to model a function that is linear in the first dimension and smooth in the second, we could use a combination of Linear and Matern52 kernels, one for each dimension.\n",
    "\n",
    "To tell GPflow which dimension a kernel applies to, specify a list of integers as the value of the `active_dims` parameter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ff6dbacd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-07T14:35:05.262720Z",
     "iopub.status.busy": "2022-09-07T14:35:05.262557Z",
     "iopub.status.idle": "2022-09-07T14:35:05.272478Z",
     "shell.execute_reply": "2022-09-07T14:35:05.271987Z"
    }
   },
   "outputs": [],
   "source": [
    "k1 = gpflow.kernels.Linear(active_dims=[0])\n",
    "k2 = gpflow.kernels.Matern52(active_dims=[1])\n",
    "k = k1 + k2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c56afc3b",
   "metadata": {},
   "source": [
    "`active_dims` makes it easy to create additive models. Here we build an additive Matern 5/2 kernel:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9992ee2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-07T14:35:05.274458Z",
     "iopub.status.busy": "2022-09-07T14:35:05.274290Z",
     "iopub.status.idle": "2022-09-07T14:35:05.285340Z",
     "shell.execute_reply": "2022-09-07T14:35:05.284850Z"
    }
   },
   "outputs": [],
   "source": [
    "k = gpflow.kernels.Matern52(active_dims=[0], lengthscales=2) + gpflow.kernels.Matern52(\n",
    "    active_dims=[1], lengthscales=2\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c928826",
   "metadata": {},
   "source": [
    "Let's plot this kernel and sample from it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "689a97bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-07T14:35:05.287519Z",
     "iopub.status.busy": "2022-09-07T14:35:05.287223Z",
     "iopub.status.idle": "2022-09-07T14:35:05.607479Z",
     "shell.execute_reply": "2022-09-07T14:35:05.606979Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_grid = reduce_in_tests(30)\n",
    "x = np.linspace(-10, 10, n_grid)\n",
    "X, Y = np.meshgrid(x, x)\n",
    "X = np.vstack((X.flatten(), Y.flatten())).T\n",
    "\n",
    "x0 = np.array([[2.0, 2.0]])\n",
    "# plot the kernel\n",
    "KxX = k(X, x0).numpy().reshape(n_grid, n_grid)\n",
    "\n",
    "fig, axes = plt.subplots(1, 3, figsize=(15, 5))\n",
    "axes[0].imshow(KxX, extent=[-10, 10, -10, 10])\n",
    "axes[0].set_title(f\"$k((7, 5), (x1, x2))$\")\n",
    "\n",
    "# plot a GP sample\n",
    "K = k(X).numpy()\n",
    "Z = np.random.multivariate_normal(np.zeros(n_grid ** 2), K, 2)\n",
    "axes[1].imshow(Z[0, :].reshape(n_grid, n_grid), extent=[-10, 10, -10, 10])\n",
    "axes[1].set_title(\"GP sample 1\")\n",
    "axes[2].imshow(Z[1, :].reshape(n_grid, n_grid), extent=[-10, 10, -10, 10])\n",
    "axes[2].set_title(\"GP sample 2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a3d6650",
   "metadata": {},
   "source": [
    "## Define new covariance functions\n",
    "\n",
    "GPflow makes it easy to define new covariance functions. See [Kernel design](../tailor/kernel_design.ipynb) for more information."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}