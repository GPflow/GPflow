{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ae178655",
   "metadata": {},
   "source": [
    "# Monitoring\n",
    "\n",
    "GPflow comes with a small framework for monitoring the training of your models. We will introduce this framework in this chapter.\n",
    "\n",
    "Before we dive into monitoring however, let us have the usual imports, and let us create a small helper functions that creates a model we can monitor:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "98d31869",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-12T10:20:27.650007Z",
     "iopub.status.busy": "2022-10-12T10:20:27.649815Z",
     "iopub.status.idle": "2022-10-12T10:20:30.273532Z",
     "shell.execute_reply": "2022-10-12T10:20:30.272969Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "\n",
    "import gpflow\n",
    "\n",
    "\n",
    "X = np.array(\n",
    "    [\n",
    "        [0.865], [0.666], [0.804], [0.771], [0.147], [0.866], [0.007], [0.026],\n",
    "        [0.171], [0.889], [0.243], [0.028],\n",
    "    ]\n",
    ")\n",
    "Y = np.array(\n",
    "    [\n",
    "        [1.57], [3.48], [3.12], [3.91], [3.07], [1.35], [3.80], [3.82], [3.49],\n",
    "        [1.30], [4.00], [3.82],\n",
    "    ]\n",
    ")\n",
    "\n",
    "\n",
    "def get_model() -> gpflow.models.GPModel:\n",
    "    return gpflow.models.GPR((X, Y), kernel=gpflow.kernels.SquaredExponential())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f1ff611",
   "metadata": {},
   "source": [
    "## Components of monitoring\n",
    "\n",
    "The most basic component of GPflow monitoring is the [MonitorTask](../../api/gpflow/monitor/index.rst#gpflow-monitor-monitortask). Sub-classes of `MonitorTask` are responsible for actually doing the monitoring work.\n",
    "\n",
    "`MonitorTask`s are grouped into [MonitorTaskGroup](../../api/gpflow/monitor/index.rst#gpflow-monitor-monitortaskgroup)s, according to the frequency with which they are to be executed. So as not to impact training speed too much, `MonitorTask`s are generally not executed for every training iteration. Instead the `MonitorTaskGroup` is configured for how often the task should be executed.\n",
    "\n",
    "Finally `MonitorTaskGroup`s are grouped into one [Monitor](../../api/gpflow/monitor/index.rst#gpflow-monitor-monitor), which is the part that you pass to GPflow."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7f3c102",
   "metadata": {},
   "source": [
    "### ExecuteCallback\n",
    "\n",
    "The [ExecuteCallback](../../api/gpflow/monitor/index.rst#gpflow-monitor-executecallback) class implements `MonitoringTask` and allows you to wrap a simple Python function. Let us run the whole thing in an example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2aeaa77c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-12T10:20:30.275965Z",
     "iopub.status.busy": "2022-10-12T10:20:30.275673Z",
     "iopub.status.idle": "2022-10-12T10:20:31.718288Z",
     "shell.execute_reply": "2022-10-12T10:20:31.717873Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, GPflow monitoring!\n",
      "Hello, GPflow monitoring!\n",
      "Hello, GPflow monitoring!\n",
      "Hello, GPflow monitoring!\n",
      "Hello, GPflow monitoring!\n",
      "Hello, GPflow monitoring!\n"
     ]
    }
   ],
   "source": [
    "model = get_model()\n",
    "\n",
    "\n",
    "def my_callback() -> None:\n",
    "    print(\"Hello, GPflow monitoring!\")\n",
    "\n",
    "\n",
    "execute_task = gpflow.monitor.ExecuteCallback(my_callback)\n",
    "task_group = gpflow.monitor.MonitorTaskGroup(execute_task, period=3)\n",
    "monitor = gpflow.monitor.Monitor(task_group)\n",
    "\n",
    "opt = gpflow.optimizers.Scipy()\n",
    "opt.minimize(\n",
    "    model.training_loss, model.trainable_variables, step_callback=monitor\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8c5d4c4",
   "metadata": {},
   "source": [
    "## TensorBoard integration\n",
    "\n",
    "The primary value of the GPFlow monitoring framework is however, its integration with [TensorBoard](https://www.tensorflow.org/tensorboard). This gives you an easy way to export the progress of your training.\n",
    "\n",
    "We will first demonstrate [ModelToTensorBoard](../../api/gpflow/monitor/index.rst#gpflow-monitor-modeltotensorboard), which is an easy way to export your entire model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "437d47f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-12T10:20:31.720281Z",
     "iopub.status.busy": "2022-10-12T10:20:31.720086Z",
     "iopub.status.idle": "2022-10-12T10:20:31.995844Z",
     "shell.execute_reply": "2022-10-12T10:20:31.995369Z"
    }
   },
   "outputs": [],
   "source": [
    "model = get_model()\n",
    "log_dir = \"logs/model\"\n",
    "\n",
    "model_task = gpflow.monitor.ModelToTensorBoard(log_dir, model)\n",
    "task_group = gpflow.monitor.MonitorTaskGroup(model_task, period=3)\n",
    "monitor = gpflow.monitor.Monitor(task_group)\n",
    "\n",
    "opt = gpflow.optimizers.Scipy()\n",
    "opt.minimize(\n",
    "    model.training_loss, model.trainable_variables, step_callback=monitor\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ec7ec05",
   "metadata": {},
   "source": [
    "Notice how we need to provide TensorBoard with a log directory. Generally TensorBoard reads and writes files from directories, and directories are the primary way you identify your runs. To view the logs you run something like:\n",
    "\n",
    "```bash\n",
    "tensorboard --logdir . --reload_multifile=true\n",
    "```\n",
    "\n",
    "The `--reload_multifile=true` is needed because the GPflow monitoring framework generally outputs multiple files."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d92abaf7",
   "metadata": {},
   "source": [
    "You can use [ScalarToTensorBoard](../../api/gpflow/monitor/index.rst#gpflow-monitor-scalartotensorboard) to write arbitrary values to the logs. You need to provide a callback function that returns a scalar value; either a `float`, or a scalar tensor:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c74815a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-12T10:20:32.011872Z",
     "iopub.status.busy": "2022-10-12T10:20:32.011684Z",
     "iopub.status.idle": "2022-10-12T10:20:32.033043Z",
     "shell.execute_reply": "2022-10-12T10:20:32.032398Z"
    }
   },
   "outputs": [],
   "source": [
    "model = get_model()\n",
    "\n",
    "\n",
    "def my_scalar() -> tf.Tensor:\n",
    "    return model.training_loss()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d99a8af8",
   "metadata": {},
   "source": [
    "Let us test our function first:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "63c00a8d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-12T10:20:32.035882Z",
     "iopub.status.busy": "2022-10-12T10:20:32.035659Z",
     "iopub.status.idle": "2022-10-12T10:20:32.064794Z",
     "shell.execute_reply": "2022-10-12T10:20:32.064336Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: shape=(), dtype=float64, numpy=21.5778089200757>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_scalar()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b6a9b50",
   "metadata": {},
   "source": [
    "And this is how we use it as a monitor:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "381f772f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-12T10:20:32.066813Z",
     "iopub.status.busy": "2022-10-12T10:20:32.066630Z",
     "iopub.status.idle": "2022-10-12T10:20:32.347126Z",
     "shell.execute_reply": "2022-10-12T10:20:32.346578Z"
    }
   },
   "outputs": [],
   "source": [
    "log_dir = \"logs/scalar\"\n",
    "\n",
    "scalar_task = gpflow.monitor.ScalarToTensorBoard(\n",
    "    log_dir, my_scalar, \"my_scalar_name\"\n",
    ")\n",
    "task_group = gpflow.monitor.MonitorTaskGroup(scalar_task, period=3)\n",
    "monitor = gpflow.monitor.Monitor(task_group)\n",
    "\n",
    "opt = gpflow.optimizers.Scipy()\n",
    "opt.minimize(\n",
    "    model.training_loss, model.trainable_variables, step_callback=monitor\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a67efb42",
   "metadata": {},
   "source": [
    "And you can use [ImageToTensorBoard](../../api/gpflow/monitor/index.rst#gpflow-monitor-imagetotensorboard) to write arbitrary images to the logs. In this case your callback function needs to take a matplotlib `Figure` and `Axes`, and plot your images to those:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "163b3df6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-12T10:20:32.349288Z",
     "iopub.status.busy": "2022-10-12T10:20:32.349085Z",
     "iopub.status.idle": "2022-10-12T10:20:32.366285Z",
     "shell.execute_reply": "2022-10-12T10:20:32.365737Z"
    }
   },
   "outputs": [],
   "source": [
    "model = get_model()\n",
    "\n",
    "\n",
    "def my_image(\n",
    "    figure: matplotlib.figure.Figure, ax: matplotlib.axes.Axes\n",
    ") -> None:\n",
    "    Xnew = np.linspace(X.min() - 0.5, X.max() + 0.5, 100)[:, None]\n",
    "    Ypred = model.predict_f_samples(Xnew, full_cov=True, num_samples=10)\n",
    "    ax.plot(Xnew.flatten(), np.squeeze(Ypred).T, \"C0\", lw=0.5)\n",
    "    ax.scatter(X, Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "838b6988",
   "metadata": {},
   "source": [
    "Again, let us test our callback in isolation, before we use it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d121211b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-12T10:20:32.368415Z",
     "iopub.status.busy": "2022-10-12T10:20:32.368217Z",
     "iopub.status.idle": "2022-10-12T10:20:32.548469Z",
     "shell.execute_reply": "2022-10-12T10:20:32.547974Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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obCxEw++dxp78zmiPBgMyERERERERBOIi70dfrIoBn+/fzrKm7tHlHflNnKN8gAwIBMREREREU1AzvLuEeV/PjAdde1deOC9U9h+voFdr6+BAZmIiIiIiGgCc5RJ8diCSPz7wZloURvwwLunsCWrjvsoXwEDMhERERER0STgILPFw/Mi8N7GmdDozXjwvdP4+FQ19CaLtUsbMxiQiYiIiIiIJhF7O1s8MDscHzycDnupLR754Az+8V051HqTtUuzOok4yi3NOjs74ebmBpVKBVdX19F8aCIiIiIiIrqEIIj4trAJH5+qQXKQKx6aGwFvZ7m1yxpWA82h0lGsiYiIiIiIiMYYGxsJlib5Y0miH05VtuG3W3Lh52qPx+ZHIsTT0drljSoGZCIiIiIiIoJEIsGsSC/MivRCXr0Kf9xXAgB4eG4EUoLdrFzd6OAUayIiIiIiIrqi2jYd3jtWido2He7LCMNNsT6wsZFYu6xBG2gOZUAmIiIiIiKia+rQGfHxqRocL2/B2rQgrJ0aCLnU1tplDdhAcyi7WBMREREREdE1uTvK8OOF0Xhv40xAAjy86QzePliGDp3R2qUNKwZkIiIiIiIiGhC51BZ3zgjBR49kIDHQFduyG6xd0rBiky4iIiIiIiIaFIlEgoVxvtYuY9hxBJmIiIiIiIgIDMhEREREREREABiQiYiIiIiIiAAwIBMREREREREBYEAmIiIiIiIiAsCATERERERERASAAZmIiIiIiIgIAAMyEREREREREQAGZCIiIiIiIiIADMhEREREREREABiQiYiIiIiIiAAwIBMREREREREBYEAmIiIiIiIiAsCATERERERERASAAZmIiIiIiIgIAAMyEREREREREQAGZCIiIiIiIiIADMhEREREREREAADpaD+gKIoAgM7OztF+aCIiIiIiIpqEevNnbx69mlEPyGq1GgAQEhIy2g9NREREREREk5harYabm9tVfy4Rrxehh5kgCGhoaICLiwskEsloPvR1dXZ2IiQkBLW1tXB1dbV2OTRIPH7jG4/f+MdjOL7x+I1vPH7jH4/h+MbjN/aJogi1Wo3AwEDY2Fx9pfGojyDb2NggODh4tB92UFxdXfmLPY7x+I1vPH7jH4/h+MbjN77x+I1/PIbjG4/f2HatkeNebNJFREREREREBAZkIiIiIiIiIgAMyP3I5XK88MILkMvl1i6FhoDHb3zj8Rv/eAzHNx6/8Y3Hb/zjMRzfePwmjlFv0kVEREREREQ0FnEEmYiIiIiIiAgMyEREREREREQAGJCJiIiIiIiIADAgExEREREREQFgQCYiIiIiIiICMMkCcltbG+677z64urrC3d0djzzyCDQazTVvc/PNN0MikfT7+MEPftDvOjU1NVi1ahUcHR3h6+uLp556CmazeSSfyqQ02OPX1taGJ554AnFxcXBwcEBoaCh++tOfQqVS9bvepcdXIpFg8+bNI/10JoW3334b4eHhsLe3R0ZGBk6fPn3N63/++eeIj4+Hvb09UlJSsHPnzn4/F0URzz//PAICAuDg4IDFixejtLR0JJ/CpDaY4/fOO+9g/vz58PDwgIeHBxYvXnzZ9Tdu3HjZa2358uUj/TQmtcEcw02bNl12fOzt7ftdh6/B0TWY43el9ysSiQSrVq3quw5fg6Pn8OHDWLNmDQIDAyGRSLB169br3ubQoUOYNm0a5HI5oqOjsWnTpsuuM9i/qzQ0gz1+X331FZYsWQIfHx+4urpi9uzZ2LNnT7/rvPjii5e9/uLj40fwWdBQTaqAfN999yE/Px/79u3DN998g8OHD+Pxxx+/7u0ee+wxNDY29n288cYbfT+zWCxYtWoVjEYjjh8/jg8++ACbNm3C888/P5JPZVIa7PFraGhAQ0MD3nrrLeTl5WHTpk3YvXs3Hnnkkcuu+/777/c7xuvWrRvBZzI5fPrpp3jyySfxwgsv4Ny5c0hLS8OyZcugVCqveP3jx4/jnnvuwSOPPIKsrCysW7cO69atQ15eXt913njjDfzf//0f/vGPf+DUqVNwcnLCsmXLoNfrR+tpTRqDPX6HDh3CPffcg4MHD+LEiRMICQnB0qVLUV9f3+96y5cv7/da++STT0bj6UxKgz2GAODq6trv+FRXV/f7OV+Do2ewx++rr77qd+zy8vJga2uLO+64o9/1+BocHVqtFmlpaXj77bcHdP3KykqsWrUKCxcuRHZ2Nn7+85/j0Ucf7ReyhvKapqEZ7PE7fPgwlixZgp07dyIzMxMLFy7EmjVrkJWV1e96SUlJ/V5/R48eHYny6UaJk0RBQYEIQDxz5kzfZbt27RIlEolYX19/1dvddNNN4s9+9rOr/nznzp2ijY2NqFAo+i77+9//Lrq6uooGg2FYaqehH79LffbZZ6JMJhNNJlPfZQDELVu2DGe5JIpienq6+OMf/7jve4vFIgYGBoqvvvrqFa9/5513iqtWrep3WUZGhvj9739fFEVRFARB9Pf3F998882+n3d0dIhyuVz85JNPRuAZTG6DPX6XMpvNoouLi/jBBx/0XbZhwwZx7dq1w10qXcVgj+H7778vurm5XfX++BocXTf6GvzTn/4kuri4iBqNpu8yvgatYyDvM37961+LSUlJ/S676667xGXLlvV9f6O/EzQ0Q32fmJiYKL700kt937/wwgtiWlra8BVGI2bSjCCfOHEC7u7umDFjRt9lixcvho2NDU6dOnXN23788cfw9vZGcnIyfvOb30Cn0/W735SUFPj5+fVdtmzZMnR2diI/P3/4n8gkdSPH72IqlQqurq6QSqX9Lv/xj38Mb29vpKen47333oMoisNW+2RkNBqRmZmJxYsX911mY2ODxYsX48SJE1e8zYkTJ/pdH+h+LfVev7KyEgqFot913NzckJGRcdX7pKEZyvG7lE6ng8lkgqenZ7/LDx06BF9fX8TFxeGHP/whWltbh7V26jbUY6jRaBAWFoaQkBCsXbu2398xvgZHz3C8Bt99913cfffdcHJy6nc5X4Nj0/X+Bg7H7wSNHkEQoFarL/sbWFpaisDAQERGRuK+++5DTU2NlSqka5Fe/yoTg0KhgK+vb7/LpFIpPD09oVAornq7e++9F2FhYQgMDEROTg6efvppFBcX46uvvuq734vDMYC+7691vzQ4Qz1+F2tpacErr7xy2bTsl19+GYsWLYKjoyP27t2LH/3oR9BoNPjpT386bPVPNi0tLbBYLFd8bRQVFV3xNld7LfUe397P17oODY+hHL9LPf300wgMDOz3Zm758uVYv349IiIiUF5ejmeffRYrVqzAiRMnYGtrO6zPYbIbyjGMi4vDe++9h9TUVKhUKrz11luYM2cO8vPzERwczNfgKLrR1+Dp06eRl5eHd999t9/lfA2OXVf7G9jZ2Ymuri60t7ff8P/LNHreeustaDQa3HnnnX2XZWRkYNOmTYiLi0NjYyNeeuklzJ8/H3l5eXBxcbFitXSpcR+Qn3nmGbz++uvXvE5hYeGQ7//iMJWSkoKAgADccsstKC8vR1RU1JDvl7qN9PHr1dnZiVWrViExMREvvvhiv58999xzfV9PnToVWq0Wb775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\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "my_image(fig, ax)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db3bd401",
   "metadata": {},
   "source": [
    "And this is how we use the callback:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "575f561d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-12T10:20:32.550540Z",
     "iopub.status.busy": "2022-10-12T10:20:32.550347Z",
     "iopub.status.idle": "2022-10-12T10:20:33.698400Z",
     "shell.execute_reply": "2022-10-12T10:20:33.697925Z"
    }
   },
   "outputs": [],
   "source": [
    "log_dir = \"logs/image\"\n",
    "\n",
    "image_task = gpflow.monitor.ImageToTensorBoard(\n",
    "    log_dir, my_image, \"my_image_name\"\n",
    ")\n",
    "task_group = gpflow.monitor.MonitorTaskGroup(image_task, period=3)\n",
    "monitor = gpflow.monitor.Monitor(task_group)\n",
    "\n",
    "opt = gpflow.optimizers.Scipy()\n",
    "opt.minimize(\n",
    "    model.training_loss, model.trainable_variables, step_callback=monitor\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "576286b6",
   "metadata": {},
   "source": [
    "Finally, let us demonstrate what it might look like if you use all these monitor tasks at the same time:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "311ddca1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-12T10:20:33.700627Z",
     "iopub.status.busy": "2022-10-12T10:20:33.700444Z",
     "iopub.status.idle": "2022-10-12T10:20:35.215023Z",
     "shell.execute_reply": "2022-10-12T10:20:35.214465Z"
    }
   },
   "outputs": [],
   "source": [
    "log_dir = \"logs/combined\"\n",
    "model = get_model()\n",
    "\n",
    "\n",
    "def my_scalar_2() -> tf.Tensor:\n",
    "    return model.training_loss()\n",
    "\n",
    "\n",
    "def my_image_2(\n",
    "    figure: matplotlib.figure.Figure, ax: matplotlib.axes.Axes\n",
    ") -> None:\n",
    "    Xnew = np.linspace(X.min() - 0.5, X.max() + 0.5, 100)[:, None]\n",
    "    Ypred = model.predict_f_samples(Xnew, full_cov=True, num_samples=10)\n",
    "    ax.plot(Xnew.flatten(), np.squeeze(Ypred).T, \"C0\", lw=0.5)\n",
    "    ax.scatter(X, Y)\n",
    "\n",
    "\n",
    "model_task = gpflow.monitor.ModelToTensorBoard(log_dir, model)\n",
    "scalar_task = gpflow.monitor.ScalarToTensorBoard(\n",
    "    log_dir, my_scalar_2, \"my_scalar_name\"\n",
    ")\n",
    "image_task = gpflow.monitor.ImageToTensorBoard(\n",
    "    log_dir, my_image_2, \"my_image_name\"\n",
    ")\n",
    "\n",
    "fast_task_group = gpflow.monitor.MonitorTaskGroup(\n",
    "    [model_task, scalar_task], period=1\n",
    ")\n",
    "slow_task_group = gpflow.monitor.MonitorTaskGroup(image_task, period=3)\n",
    "\n",
    "monitor = gpflow.monitor.Monitor(fast_task_group, slow_task_group)\n",
    "\n",
    "opt = gpflow.optimizers.Scipy()\n",
    "opt.minimize(\n",
    "    model.training_loss, model.trainable_variables, step_callback=monitor\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfb016ad",
   "metadata": {},
   "source": [
    "Here we needed to redefine `my_scalar` and `my_image` because we had hardcoded the model."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}