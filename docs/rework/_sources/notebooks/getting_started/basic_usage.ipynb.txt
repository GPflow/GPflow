{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cf0b375f",
   "metadata": {},
   "source": [
    "# Basic Usage"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6920088c",
   "metadata": {},
   "source": [
    "## Imports\n",
    "\n",
    "These are the imports we'll be assuming below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6a1455a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T15:52:55.519156Z",
     "iopub.status.busy": "2022-08-15T15:52:55.518962Z",
     "iopub.status.idle": "2022-08-15T15:52:58.325009Z",
     "shell.execute_reply": "2022-08-15T15:52:58.324438Z"
    }
   },
   "outputs": [],
   "source": [
    "import gpflow\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e884cd6",
   "metadata": {},
   "source": [
    "## Meet $f$ and $Y$\n",
    "\n",
    "In GPflow we usually assume our data is generated by a process:\n",
    "\n",
    "\\begin{equation}\n",
    "Y_i = f(X_i) + \\varepsilon_i \\,, \\quad \\varepsilon_i \\sim \\mathcal{N}(0, \\sigma^2).\n",
    "\\end{equation}\n",
    "\n",
    "So we have some $X$ values, that are pushed through some deterministic function $f$, but we do not observe $f(X)$ directly. Instead we get noisy observations &mdash; $\\varepsilon$ is some noise that is added before we observe $Y$.\n",
    "\n",
    "Usually we'll either be interested in trying to recover $f$ from our noisy observations, or trying to predict new values of $Y$.\n",
    "\n",
    "Notice that we have two sources of uncertainty here:\n",
    "\n",
    "* We have uncertainty about $f$ which we get because we cannot learn $f$ perfectly from a limited amount of noisy data. The more data we observe the smaller this uncertainty will be. (This is known as epistemic uncertainty.)\n",
    "* We have uncertainty about $Y$ because of our noisy observations. No matter how much data we collect this will never become smaller, because this is an effect of the process we're observing. (This is known as aleatoric uncertainty.)\n",
    "\n",
    "It is important to understand the difference between $f$ and $Y$ to understand GPflow."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0095f2d",
   "metadata": {},
   "source": [
    "## Minimal model\n",
    "\n",
    "Let's model some data. Below we have some variables `X` and `Y`, both of which are NumPy arrays, with shapes $N \\times D$ and $N \\times P$ respectively. $N$ is the number of rows of data. $D$ is the number of input dimensions, and $P$ is the number of output dimensions. We set both $D=1$ and $P=1$ to keep things simple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "93fb3a29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T15:52:58.327503Z",
     "iopub.status.busy": "2022-08-15T15:52:58.327239Z",
     "iopub.status.idle": "2022-08-15T15:52:58.403416Z",
     "shell.execute_reply": "2022-08-15T15:52:58.403003Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X = np.array(\n",
    "    [\n",
    "        [0.86581659],\n",
    "        [0.66617009],\n",
    "        [0.80492181],\n",
    "        [0.77143034],\n",
    "        [0.14790478],\n",
    "        [0.86661055],\n",
    "        [0.00704458],\n",
    "        [0.02633174],\n",
    "        [0.17188597],\n",
    "        [0.8897813],\n",
    "        [0.24323575],\n",
    "        [0.0285901],\n",
    "    ]\n",
    ")\n",
    "Y = np.array(\n",
    "    [\n",
    "        [1.571239],\n",
    "        [3.48742268],\n",
    "        [3.12345341],\n",
    "        [3.91552709],\n",
    "        [3.07610867],\n",
    "        [1.35531828],\n",
    "        [3.80962405],\n",
    "        [3.82153437],\n",
    "        [3.4908364],\n",
    "        [1.30049729],\n",
    "        [4.00344479],\n",
    "        [3.8212637],\n",
    "    ]\n",
    ")\n",
    "\n",
    "plt.plot(X, Y, \"kx\", mew=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7f20550",
   "metadata": {},
   "source": [
    "To model this in GPflow, we first have to create a model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f5fff713",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T15:52:58.405465Z",
     "iopub.status.busy": "2022-08-15T15:52:58.405271Z",
     "iopub.status.idle": "2022-08-15T15:52:58.453585Z",
     "shell.execute_reply": "2022-08-15T15:52:58.453068Z"
    }
   },
   "outputs": [],
   "source": [
    "model = gpflow.models.GPR(\n",
    "    (X, Y),\n",
    "    kernel=gpflow.kernels.RBF(),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b4b6f5c",
   "metadata": {},
   "source": [
    "Here we use a `GPR` model with an `RBF` kernel. We'll go into more details about what that means in other chapters, but these are sensible defaults for small, simple problems."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2058069a",
   "metadata": {},
   "source": [
    "Next we need to train the model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4a718d87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T15:52:58.455894Z",
     "iopub.status.busy": "2022-08-15T15:52:58.455709Z",
     "iopub.status.idle": "2022-08-15T15:52:59.804079Z",
     "shell.execute_reply": "2022-08-15T15:52:59.803606Z"
    }
   },
   "outputs": [],
   "source": [
    "opt = gpflow.optimizers.Scipy()\n",
    "opt.minimize(model.training_loss, model.trainable_variables, options=dict(maxiter=100))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "688754db",
   "metadata": {},
   "source": [
    "Now we can use the model to predict values of $f$ and $Y$ at new values of $X$.\n",
    "\n",
    "The main methods for making predictions are `model.predict_f` and `model.predict_y`. `model.predict_f` returns the mean and variance (uncertainty) the function $f$, while `model.predict_y` returns the mean and variance (uncertainty) of $Y$ &mdash; that is $f$ plus the noise."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08e52281",
   "metadata": {},
   "source": [
    "So, if we want to know what the model thinks $f$ might be at `0.5` we do:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3b0e073c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T15:52:59.806319Z",
     "iopub.status.busy": "2022-08-15T15:52:59.806104Z",
     "iopub.status.idle": "2022-08-15T15:52:59.824974Z",
     "shell.execute_reply": "2022-08-15T15:52:59.824483Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<tf.Tensor: shape=(1, 1), dtype=float64, numpy=array([[4.28186737]])>,\n",
       " <tf.Tensor: shape=(1, 1), dtype=float64, numpy=array([[0.30582518]])>)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xnew = np.array([[0.5]])\n",
    "model.predict_f(Xnew)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ff00a3f",
   "metadata": {},
   "source": [
    "And if we want to predict $Y$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c1ef827a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T15:52:59.842367Z",
     "iopub.status.busy": "2022-08-15T15:52:59.842213Z",
     "iopub.status.idle": "2022-08-15T15:52:59.861552Z",
     "shell.execute_reply": "2022-08-15T15:52:59.861001Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<tf.Tensor: shape=(1, 1), dtype=float64, numpy=array([[4.28186737]])>,\n",
       " <tf.Tensor: shape=(1, 1), dtype=float64, numpy=array([[0.54535075]])>)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.predict_y(Xnew)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a9584e0",
   "metadata": {},
   "source": [
    "Notice how the predicted $f$ and $Y$ have the same mean, but $Y$ has a larger variance. This is because the variance of $f$ is only the uncertainty of $f$, while the variance of $Y$ is both the uncertainty of $f$ and the extra noise."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82db6926",
   "metadata": {},
   "source": [
    "## Plotting the model\n",
    "\n",
    "Now, lets predict $f$ and $Y$ for a range of $X$s and make a pretty plot of it.\n",
    "\n",
    "First we generate some test points for the prediction:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c57c0f72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T15:52:59.863545Z",
     "iopub.status.busy": "2022-08-15T15:52:59.863387Z",
     "iopub.status.idle": "2022-08-15T15:52:59.865979Z",
     "shell.execute_reply": "2022-08-15T15:52:59.865579Z"
    }
   },
   "outputs": [],
   "source": [
    "Xplot = np.linspace(-0.1, 1.1, 100)[:, None]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bfc0fa2",
   "metadata": {},
   "source": [
    "Then we predict the $f$ and $Y$ values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f846d9c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T15:52:59.867781Z",
     "iopub.status.busy": "2022-08-15T15:52:59.867632Z",
     "iopub.status.idle": "2022-08-15T15:52:59.899340Z",
     "shell.execute_reply": "2022-08-15T15:52:59.897749Z"
    }
   },
   "outputs": [],
   "source": [
    "f_mean, f_var = model.predict_f(Xplot, full_cov=False)\n",
    "y_mean, y_var = model.predict_y(Xplot)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f24fc921",
   "metadata": {},
   "source": [
    "We compute the 95% confidence interval of $f$ and $Y$. This math is based on the distribution of $f$ and $Y$ being gaussian:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1c95bd4b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T15:52:59.905249Z",
     "iopub.status.busy": "2022-08-15T15:52:59.904851Z",
     "iopub.status.idle": "2022-08-15T15:52:59.912832Z",
     "shell.execute_reply": "2022-08-15T15:52:59.911960Z"
    }
   },
   "outputs": [],
   "source": [
    "f_lower = f_mean - 1.96 * np.sqrt(f_var)\n",
    "f_upper = f_mean + 1.96 * np.sqrt(f_var)\n",
    "y_lower = y_mean - 1.96 * np.sqrt(y_var)\n",
    "y_upper = y_mean + 1.96 * np.sqrt(y_var)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcd31dd4",
   "metadata": {},
   "source": [
    "Finally we actually plot our values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5b896ee5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T15:52:59.915861Z",
     "iopub.status.busy": "2022-08-15T15:52:59.915603Z",
     "iopub.status.idle": "2022-08-15T15:53:00.025900Z",
     "shell.execute_reply": "2022-08-15T15:53:00.025322Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(X, Y, \"kx\", mew=2, label=\"input data\")\n",
    "plt.plot(Xplot, f_mean, \"-\", color=\"C0\", label=\"mean\")\n",
    "plt.plot(Xplot, f_lower, \"--\", color=\"C0\", label=\"f 95% confidence\")\n",
    "plt.plot(Xplot, f_upper, \"--\", color=\"C0\")\n",
    "plt.fill_between(Xplot[:, 0], f_lower[:, 0], f_upper[:, 0], color=\"C0\", alpha=0.1)\n",
    "plt.plot(Xplot, y_lower, \".\", color=\"C0\", label=\"Y 95% confidence\")\n",
    "plt.plot(Xplot, y_upper, \".\", color=\"C0\")\n",
    "plt.fill_between(Xplot[:, 0], y_lower[:, 0], y_upper[:, 0], color=\"C0\", alpha=0.1)\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef179c1f",
   "metadata": {},
   "source": [
    "Notice how the confidence of $f$ is greater when you're further away from our data, and smaller near the data. Notice also how we're more certain about $f$ than about $Y$; sometimes we're even certain that $f$ lies away from a data point."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31024753",
   "metadata": {},
   "source": [
    "## Marginal variance vs full covariance\n",
    "\n",
    "As mentioned above $f$ is a function, and we expect it to be, more or less, smooth. So if $x_1$ and $x_2$ are near each other, we expect $f(x_1)$ and $f(x_2)$ to be near each other as well. In Gaussian Processes we encode the information about how nearby values of $x$ are similar with a [covariance matrix](https://en.wikipedia.org/wiki/Covariance)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "087de496",
   "metadata": {},
   "source": [
    "If we call `predict_f(..., full_cov=False)` like we did above, when we plotted the model, `predict_f` will return a $N \\times P$ mean vector and a $N \\times P$ marginal variance vector. The marginal variance vector only tells us about our uncertainty at each point individually, and does not tell us anything about how the points relate to each other. Often the marginal variance vector is all you need, and it is faster to compute than the full covariance. `False` is the default value for `full_cov`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "28152e72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T15:53:00.028044Z",
     "iopub.status.busy": "2022-08-15T15:53:00.027873Z",
     "iopub.status.idle": "2022-08-15T15:53:00.045292Z",
     "shell.execute_reply": "2022-08-15T15:53:00.044796Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<tf.Tensor: shape=(3, 1), dtype=float64, numpy=\n",
       " array([[3.75868322],\n",
       "        [4.28186737],\n",
       "        [3.72558666]])>,\n",
       " <tf.Tensor: shape=(3, 1), dtype=float64, numpy=\n",
       " array([[0.17194182],\n",
       "        [0.30582518],\n",
       "        [0.11399897]])>)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xnew = np.array([[0.3], [0.5], [0.7]])\n",
    "model.predict_f(Xnew, full_cov=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07a3e24a",
   "metadata": {},
   "source": [
    "If we call `predict_f(..., full_cov=True)` we will still get a $N \\times P$ mean vector, but instead of the marginal variance we will get a full $P \\times N \\times N$ covariance matrix, which tells us the relationship between different values of $x$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "530d9642",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T15:53:00.047264Z",
     "iopub.status.busy": "2022-08-15T15:53:00.047098Z",
     "iopub.status.idle": "2022-08-15T15:53:00.065432Z",
     "shell.execute_reply": "2022-08-15T15:53:00.064938Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<tf.Tensor: shape=(3, 1), dtype=float64, numpy=\n",
       " array([[3.75868322],\n",
       "        [4.28186737],\n",
       "        [3.72558666]])>,\n",
       " <tf.Tensor: shape=(1, 3, 3), dtype=float64, numpy=\n",
       " array([[[0.17194182, 0.17976266, 0.04001305],\n",
       "         [0.17976266, 0.30582518, 0.12785843],\n",
       "         [0.04001305, 0.12785843, 0.11399897]]])>)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.predict_f(Xnew, full_cov=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "505e6d96",
   "metadata": {},
   "source": [
    "## What's next?\n",
    "\n",
    "On this page we gave you a very quick overview of how a GPflow model is created, and how we can use it to make predictions. On the following pages we will go into details of different kind of GPflow models, how they are configured and, how they are trained."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}