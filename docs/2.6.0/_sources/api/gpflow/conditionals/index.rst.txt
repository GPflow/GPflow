gpflow.conditionals
===================

.. THIS IS AN AUTOGENERATED RST FILE

.. automodule:: gpflow.conditionals

Modules
-------

.. toctree::
   :maxdepth: 1

   gpflow.conditionals.util <util/index>

Functions
---------

gpflow.conditionals.base_conditional
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. autofunction:: gpflow.conditionals.base_conditional

gpflow.conditionals.conditional
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This function uses multiple dispatch, which will depend on the type of argument passed in:

.. code-block:: python

    gpflow.conditionals.conditional( object, InducingVariables, Kernel, object )
    # dispatch to -> gpflow.conditionals.conditionals._sparse_conditional(...)

.. autofunction:: gpflow.conditionals.conditionals._sparse_conditional

.. code-block:: python

    gpflow.conditionals.conditional( object, object, Kernel, object )
    # dispatch to -> gpflow.conditionals.conditionals._dense_conditional(...)

.. autofunction:: gpflow.conditionals.conditionals._dense_conditional

.. code-block:: python

    gpflow.conditionals.conditional( object, SharedIndependentInducingVariables, SharedIndependent, object )
    # dispatch to -> gpflow.conditionals.multioutput.conditionals.shared_independent_conditional(...)

.. autofunction:: gpflow.conditionals.multioutput.conditionals.shared_independent_conditional

.. code-block:: python

    gpflow.conditionals.conditional( object, SeparateIndependentInducingVariables, SharedIndependent, object )
    gpflow.conditionals.conditional( object, SharedIndependentInducingVariables, SeparateIndependent, object )
    gpflow.conditionals.conditional( object, SeparateIndependentInducingVariables, SeparateIndependent, object )
    # dispatch to -> gpflow.conditionals.multioutput.conditionals.separate_independent_conditional(...)

.. autofunction:: gpflow.conditionals.multioutput.conditionals.separate_independent_conditional

.. code-block:: python

    gpflow.conditionals.conditional( object, FallbackSharedIndependentInducingVariables, IndependentLatent, object )
    gpflow.conditionals.conditional( object, FallbackSeparateIndependentInducingVariables, IndependentLatent, object )
    # dispatch to -> gpflow.conditionals.multioutput.conditionals.fallback_independent_latent_conditional(...)

.. autofunction:: gpflow.conditionals.multioutput.conditionals.fallback_independent_latent_conditional

.. code-block:: python

    gpflow.conditionals.conditional( object, InducingPoints, MultioutputKernel, object )
    # dispatch to -> gpflow.conditionals.multioutput.conditionals.inducing_point_conditional(...)

.. autofunction:: gpflow.conditionals.multioutput.conditionals.inducing_point_conditional

.. code-block:: python

    gpflow.conditionals.conditional( object, SharedIndependentInducingVariables, LinearCoregionalization, object )
    gpflow.conditionals.conditional( object, SeparateIndependentInducingVariables, LinearCoregionalization, object )
    # dispatch to -> gpflow.conditionals.multioutput.conditionals.coregionalization_conditional(...)

.. autofunction:: gpflow.conditionals.multioutput.conditionals.coregionalization_conditional

gpflow.conditionals.sample_conditional
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This function uses multiple dispatch, which will depend on the type of argument passed in:

.. code-block:: python

    gpflow.conditionals.sample_conditional( object, SharedIndependentInducingVariables, LinearCoregionalization, object )
    # dispatch to -> gpflow.conditionals.multioutput.sample_conditionals._sample_conditional(...)

.. autofunction:: gpflow.conditionals.multioutput.sample_conditionals._sample_conditional

.. code-block:: python

    gpflow.conditionals.sample_conditional( object, InducingVariables, Kernel, object )
    gpflow.conditionals.sample_conditional( object, object, Kernel, object )
    # dispatch to -> gpflow.conditionals.sample_conditionals._sample_conditional(...)

.. autofunction:: gpflow.conditionals.sample_conditionals._sample_conditional

gpflow.conditionals.uncertain_conditional
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. autofunction:: gpflow.conditionals.uncertain_conditional
