{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2fedf1d3",
   "metadata": {},
   "source": [
    "# Discussion of the GP marginal likelihood upper bound\n",
    "\n",
    "See the [`gp_upper` repository](https://github.com/markvdw/gp_upper) by Mark van der Wilk for code to tighten the upper bound through optimization, and a more comprehensive discussion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1162e720",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-08T15:01:04.746516Z",
     "iopub.status.busy": "2022-08-08T15:01:04.746115Z",
     "iopub.status.idle": "2022-08-08T15:01:09.599930Z",
     "shell.execute_reply": "2022-08-08T15:01:09.599327Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-08-08 15:01:05.852555: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-08-08 15:01:05.852593: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.decorator.check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.inheritance.inherit_check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline\n",
    "plt.rcParams[\"figure.figsize\"] = (12, 6)\n",
    "\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "\n",
    "import gpflow\n",
    "from gpflow import set_trainable\n",
    "from gpflow.utilities import print_summary\n",
    "from gpflow.ci_utils import reduce_in_tests\n",
    "\n",
    "import logging\n",
    "\n",
    "logging.disable(logging.WARNING)\n",
    "\n",
    "np.random.seed(1)\n",
    "\n",
    "from FITCvsVFE import getTrainingTestData"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "97937f74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-08T15:01:09.603874Z",
     "iopub.status.busy": "2022-08-08T15:01:09.603508Z",
     "iopub.status.idle": "2022-08-08T15:01:09.608815Z",
     "shell.execute_reply": "2022-08-08T15:01:09.608070Z"
    }
   },
   "outputs": [],
   "source": [
    "X, Y, Xt, Yt = getTrainingTestData()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cf4f6e11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-08T15:01:09.612545Z",
     "iopub.status.busy": "2022-08-08T15:01:09.612218Z",
     "iopub.status.idle": "2022-08-08T15:01:09.618676Z",
     "shell.execute_reply": "2022-08-08T15:01:09.617959Z"
    }
   },
   "outputs": [],
   "source": [
    "def plot_model(m, name=\"\"):\n",
    "    pX = np.linspace(-3, 9, 100)[:, None]\n",
    "    pY, pYv = m.predict_y(pX)\n",
    "    plt.plot(X, Y, \"x\")\n",
    "    plt.plot(pX, pY)\n",
    "    if not isinstance(m, gpflow.models.GPR):\n",
    "        Z = m.inducing_variable.Z.numpy()\n",
    "        plt.plot(Z, np.zeros_like(Z), \"o\")\n",
    "    two_sigma = (2.0 * pYv ** 0.5)[:, 0]\n",
    "    plt.fill_between(pX[:, 0], pY[:, 0] - two_sigma, pY[:, 0] + two_sigma, alpha=0.15)\n",
    "    lml = m.maximum_log_likelihood_objective().numpy()\n",
    "    plt.title(\"%s (lml = %f)\" % (name, lml))\n",
    "    return lml"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98f770f0",
   "metadata": {},
   "source": [
    "## Full model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1232082e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-08T15:01:09.622183Z",
     "iopub.status.busy": "2022-08-08T15:01:09.621927Z",
     "iopub.status.idle": "2022-08-08T15:01:12.271991Z",
     "shell.execute_reply": "2022-08-08T15:01:12.271165Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.checker.ShapeChecker.__init__ which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "2022-08-08 15:01:09.624769: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-08-08 15:01:09.624797: W tensorflow/stream_executor/cuda/cuda_driver.cc:269] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-08-08 15:01:09.624817: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (8b132faa90e0): /proc/driver/nvidia/version does not exist\n",
      "2022-08-08 15:01:09.625082: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "gpr = gpflow.models.GPR((X, Y), gpflow.kernels.SquaredExponential())\n",
    "gpflow.optimizers.Scipy().minimize(\n",
    "    gpr.training_loss, gpr.trainable_variables, options=dict(maxiter=reduce_in_tests(1000))\n",
    ")\n",
    "full_lml = plot_model(gpr)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a538e71e",
   "metadata": {},
   "source": [
    "## Upper bounds for sparse variational models\n",
    "As a first investigation, we compute the upper bound for models trained using the sparse variational GP approximation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0eba23fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-08T15:01:12.275303Z",
     "iopub.status.busy": "2022-08-08T15:01:12.275047Z",
     "iopub.status.idle": "2022-08-08T15:01:27.185717Z",
     "shell.execute_reply": "2022-08-08T15:01:27.184960Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/optimizers/scipy.py:94: OptimizeWarning: Unknown solver options: compile\n",
      "  return scipy.optimize.minimize(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19 "
     ]
    }
   ],
   "source": [
    "Ms = np.arange(4, reduce_in_tests(20, test_n=6), 1)\n",
    "vfe_lml = []\n",
    "vupper_lml = []\n",
    "vfe_hyps = []\n",
    "for M in Ms:\n",
    "    Zinit = X[:M, :].copy()\n",
    "    vfe = gpflow.models.SGPR((X, Y), gpflow.kernels.SquaredExponential(), inducing_variable=Zinit)\n",
    "    gpflow.optimizers.Scipy().minimize(\n",
    "        vfe.training_loss,\n",
    "        vfe.trainable_variables,\n",
    "        options=dict(disp=False, maxiter=reduce_in_tests(1000), compile=True),\n",
    "    )\n",
    "\n",
    "    vfe_lml.append(vfe.elbo().numpy())\n",
    "    vupper_lml.append(vfe.upper_bound().numpy())\n",
    "    vfe_hyps.append([(p.name, p.numpy()) for p in vfe.trainable_parameters])\n",
    "    print(\"%i\" % M, end=\" \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "74a3fd10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-08T15:01:27.188409Z",
     "iopub.status.busy": "2022-08-08T15:01:27.188175Z",
     "iopub.status.idle": "2022-08-08T15:01:27.354201Z",
     "shell.execute_reply": "2022-08-08T15:01:27.353222Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"LML bounds for models trained with SGPR\")\n",
    "plt.plot(Ms, vfe_lml, label=\"lower\")\n",
    "plt.plot(Ms, vupper_lml, label=\"upper\")\n",
    "plt.axhline(full_lml, label=\"full\", alpha=0.3)\n",
    "plt.xlabel(\"Number of inducing points\")\n",
    "plt.ylabel(\"LML estimate\")\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74d7fb3e",
   "metadata": {},
   "source": [
    "We see that the lower bound increases as more inducing points are added. Note that the upper bound does _not_ monotonically decrease! This is because as we train the sparse model, we also get better estimates of the hyperparameters. The upper bound will be different for this different setting of the hyperparameters, and is sometimes looser. The upper bound also converges to the true lml slower than the lower bound."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6018235d",
   "metadata": {},
   "source": [
    "### Upper bounds for fixed hyperparameters\n",
    "Here, we train sparse models with the hyperparameters fixed to the optimal value found previously."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1cc7aaa6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-08T15:01:27.388375Z",
     "iopub.status.busy": "2022-08-08T15:01:27.388109Z",
     "iopub.status.idle": "2022-08-08T15:01:38.535379Z",
     "shell.execute_reply": "2022-08-08T15:01:38.534062Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18 "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19 "
     ]
    }
   ],
   "source": [
    "fMs = np.arange(3, reduce_in_tests(20, test_n=5), 1)\n",
    "fvfe_lml = []  # Fixed vfe lml\n",
    "fvupper_lml = []  # Fixed upper lml\n",
    "\n",
    "init_params = gpflow.utilities.parameter_dict(vfe)\n",
    "\n",
    "# cannot copy this due to shape mismatch with different numbers of inducing points between models:\n",
    "del init_params[\".inducing_variable.Z\"]\n",
    "\n",
    "for M in fMs:\n",
    "    Zinit = vfe.inducing_variable.Z.numpy()[:M, :]\n",
    "    Zinit = np.vstack((Zinit, X[np.random.permutation(len(X))[: (M - len(Zinit))], :].copy()))\n",
    "\n",
    "    vfe = gpflow.models.SGPR((X, Y), gpflow.kernels.SquaredExponential(), inducing_variable=Zinit)\n",
    "\n",
    "    # copy hyperparameters (omitting inducing_variable.Z) from optimized model:\n",
    "    gpflow.utilities.multiple_assign(vfe, init_params)\n",
    "\n",
    "    set_trainable(vfe.kernel, False)\n",
    "    set_trainable(vfe.likelihood, False)\n",
    "\n",
    "    gpflow.optimizers.Scipy().minimize(\n",
    "        vfe.training_loss,\n",
    "        vfe.trainable_variables,\n",
    "        options=dict(disp=False, maxiter=reduce_in_tests(1000)),\n",
    "        compile=True,\n",
    "    )\n",
    "\n",
    "    fvfe_lml.append(vfe.elbo().numpy())\n",
    "    fvupper_lml.append(vfe.upper_bound().numpy())\n",
    "    print(\"%i\" % M, end=\" \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8395876a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-08T15:01:38.540361Z",
     "iopub.status.busy": "2022-08-08T15:01:38.539936Z",
     "iopub.status.idle": "2022-08-08T15:01:38.710911Z",
     "shell.execute_reply": "2022-08-08T15:01:38.710365Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(fMs, fvfe_lml, label=\"lower\")\n",
    "plt.plot(fMs, fvupper_lml, label=\"upper\")\n",
    "plt.axhline(full_lml, label=\"full\", alpha=0.3)\n",
    "plt.xlabel(\"Number of inducing points\")\n",
    "plt.ylabel(\"LML estimate\")\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bf34b72e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-08T15:01:38.713369Z",
     "iopub.status.busy": "2022-08-08T15:01:38.713159Z",
     "iopub.status.idle": "2022-08-08T15:01:38.716442Z",
     "shell.execute_reply": "2022-08-08T15:01:38.715965Z"
    }
   },
   "outputs": [],
   "source": [
    "assert np.all(np.array(fvupper_lml) - np.array(fvfe_lml) > 0.0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be5f97d9",
   "metadata": {},
   "source": [
    "Now, as the hyperparameters are fixed, the bound _does_ monotonically decrease. We chose the optimal hyperparameters here, but the picture should be the same for any hyperparameter setting. This shows that we increasingly get a better estimate of the marginal likelihood as we add more inducing points."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3df11788",
   "metadata": {},
   "source": [
    "### A tight estimate bound does not imply a converged model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "43c839e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-08T15:01:38.718898Z",
     "iopub.status.busy": "2022-08-08T15:01:38.718675Z",
     "iopub.status.idle": "2022-08-08T15:01:40.195471Z",
     "shell.execute_reply": "2022-08-08T15:01:40.194915Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lower bound: -62.487142\n",
      "Upper bound: -62.481937\n"
     ]
    }
   ],
   "source": [
    "single_inducing_point = X[:1, :].copy()\n",
    "vfe = gpflow.models.SGPR(\n",
    "    (X, Y), gpflow.kernels.SquaredExponential(), inducing_variable=single_inducing_point\n",
    ")\n",
    "objective = tf.function(vfe.training_loss)\n",
    "gpflow.optimizers.Scipy().minimize(\n",
    "    objective, vfe.trainable_variables, options=dict(maxiter=reduce_in_tests(1000)), compile=False\n",
    ")\n",
    "# Note that we need to set compile=False here due to a discrepancy in compiling with tf.function\n",
    "# see https://github.com/GPflow/GPflow/issues/1260\n",
    "\n",
    "print(\"Lower bound: %f\" % vfe.elbo().numpy())\n",
    "print(\"Upper bound: %f\" % vfe.upper_bound().numpy())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f97e41b",
   "metadata": {},
   "source": [
    "In this case we show that for the hyperparameter setting, the bound is very tight. However, this does _not_ imply that we have enough inducing points, but simply that we have correctly identified the marginal likelihood for this particular hyperparameter setting. In this specific case, where we used a single inducing point, the model collapses to not using the GP at all (lengthscale is really long to model only the mean). The rest of the variance is explained by noise. This GP can be perfectly approximated with a single inducing point."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c2a05b62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-08T15:01:40.198149Z",
     "iopub.status.busy": "2022-08-08T15:01:40.197934Z",
     "iopub.status.idle": "2022-08-08T15:01:40.394490Z",
     "shell.execute_reply": "2022-08-08T15:01:40.393787Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-62.48714176147101"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_model(vfe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d4efaa71",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-08T15:01:40.397666Z",
     "iopub.status.busy": "2022-08-08T15:01:40.397360Z",
     "iopub.status.idle": "2022-08-08T15:01:40.411946Z",
     "shell.execute_reply": "2022-08-08T15:01:40.411275Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                    </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th>value         </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>SGPR.kernel.variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>0.10776       </td></tr>\n",
       "<tr><td>SGPR.kernel.lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>79859.76897   </td></tr>\n",
       "<tr><td>SGPR.likelihood.variance</td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>0.68234       </td></tr>\n",
       "<tr><td>SGPR.inducing_variable.Z</td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>(1, 1) </td><td>float64</td><td>[[-326.21603]]</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print_summary(vfe, fmt=\"notebook\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7b02edd",
   "metadata": {},
   "source": [
    "This can be diagnosed by showing that there are other hyperparameter settings with higher upper bounds. This indicates that there might be better hyperparameter settings, but we cannot identify them due to the lack of inducing points. An example of this can be seen in the previous section."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
