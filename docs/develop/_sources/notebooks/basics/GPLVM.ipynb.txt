{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "23c4135b",
   "metadata": {},
   "source": [
    "# Bayesian Gaussian process latent variable model (Bayesian GPLVM)\n",
    "This notebook shows how to use the Bayesian GPLVM model. This is an unsupervised learning method usually used for dimensionality reduction. For an in-depth overview of GPLVMs,see **[1, 2]**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c8fbddd1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T08:53:06.052449Z",
     "iopub.status.busy": "2022-09-28T08:53:06.052127Z",
     "iopub.status.idle": "2022-09-28T08:53:10.721124Z",
     "shell.execute_reply": "2022-09-28T08:53:10.720460Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-09-28 08:53:06.670329: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2022-09-28 08:53:06.832330: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-09-28 08:53:06.832358: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n",
      "2022-09-28 08:53:06.862342: E tensorflow/stream_executor/cuda/cuda_blas.cc:2981] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-09-28 08:53:07.665178: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory\n",
      "2022-09-28 08:53:07.665297: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory\n",
      "2022-09-28 08:53:07.665312: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.decorator.check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.inheritance.inherit_check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "\n",
    "import gpflow\n",
    "from gpflow.ci_utils import reduce_in_tests\n",
    "from gpflow.config import (\n",
    "    default_float,\n",
    "    set_default_float,\n",
    "    set_default_summary_fmt,\n",
    ")\n",
    "from gpflow.utilities import ops, print_summary\n",
    "\n",
    "set_default_float(np.float64)\n",
    "set_default_summary_fmt(\"notebook\")\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84fc2d6b",
   "metadata": {},
   "source": [
    "## Data\n",
    "We are using the \"three phase oil flow\" dataset used initially for demonstrating the Generative Topographic mapping from **[3]**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7ddd9efc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T08:53:10.724497Z",
     "iopub.status.busy": "2022-09-28T08:53:10.724041Z",
     "iopub.status.idle": "2022-09-28T08:53:10.728414Z",
     "shell.execute_reply": "2022-09-28T08:53:10.727908Z"
    }
   },
   "outputs": [],
   "source": [
    "data = np.load(\"./data/three_phase_oil_flow.npz\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "945f3bf6",
   "metadata": {},
   "source": [
    "Following the GPflow notation we assume this dataset has a shape of `[num_data, output_dim]`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fc67dd88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T08:53:10.731163Z",
     "iopub.status.busy": "2022-09-28T08:53:10.730892Z",
     "iopub.status.idle": "2022-09-28T08:53:10.756084Z",
     "shell.execute_reply": "2022-09-28T08:53:10.755484Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-09-28 08:53:10.733659: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-09-28 08:53:10.733687: W tensorflow/stream_executor/cuda/cuda_driver.cc:263] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-09-28 08:53:10.733707: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (cb3bb19c0592): /proc/driver/nvidia/version does not exist\n",
      "2022-09-28 08:53:10.733964: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "Y = tf.convert_to_tensor(data[\"Y\"], dtype=default_float())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "360bcee9",
   "metadata": {},
   "source": [
    "Integer in $[0, 2]$ indicating to which class the data point belongs (shape `[num_data,]`). Not used for model fitting, only for plotting afterwards."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9556d6d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T08:53:10.758686Z",
     "iopub.status.busy": "2022-09-28T08:53:10.758411Z",
     "iopub.status.idle": "2022-09-28T08:53:10.763173Z",
     "shell.execute_reply": "2022-09-28T08:53:10.762616Z"
    }
   },
   "outputs": [],
   "source": [
    "labels = tf.convert_to_tensor(data[\"labels\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0f11dcbc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T08:53:10.798993Z",
     "iopub.status.busy": "2022-09-28T08:53:10.798337Z",
     "iopub.status.idle": "2022-09-28T08:53:10.805083Z",
     "shell.execute_reply": "2022-09-28T08:53:10.803868Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of points: 100 and Number of dimensions: 12\n"
     ]
    }
   ],
   "source": [
    "print(\n",
    "    \"Number of points: {} and Number of dimensions: {}\".format(\n",
    "        Y.shape[0], Y.shape[1]\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55f07503",
   "metadata": {},
   "source": [
    "## Model construction\n",
    "\n",
    "We start by initializing the required variables:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4da311ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T08:53:10.810565Z",
     "iopub.status.busy": "2022-09-28T08:53:10.809962Z",
     "iopub.status.idle": "2022-09-28T08:53:10.814769Z",
     "shell.execute_reply": "2022-09-28T08:53:10.813971Z"
    }
   },
   "outputs": [],
   "source": [
    "latent_dim = 2  # number of latent dimensions\n",
    "num_inducing = 20  # number of inducing pts\n",
    "num_data = Y.shape[0]  # number of data points"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b52b078",
   "metadata": {},
   "source": [
    "Initialize via PCA:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f6263f31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T08:53:10.819333Z",
     "iopub.status.busy": "2022-09-28T08:53:10.818786Z",
     "iopub.status.idle": "2022-09-28T08:53:10.846250Z",
     "shell.execute_reply": "2022-09-28T08:53:10.845629Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.checker.ShapeChecker.__init__ which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "X_mean_init = ops.pca_reduce(Y, latent_dim)\n",
    "X_var_init = tf.ones((num_data, latent_dim), dtype=default_float())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c44a9cd",
   "metadata": {},
   "source": [
    "Pick inducing inputs randomly from dataset initialization:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8a858ba9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T08:53:10.849050Z",
     "iopub.status.busy": "2022-09-28T08:53:10.848715Z",
     "iopub.status.idle": "2022-09-28T08:53:10.852591Z",
     "shell.execute_reply": "2022-09-28T08:53:10.852040Z"
    }
   },
   "outputs": [],
   "source": [
    "np.random.seed(1)  # for reproducibility\n",
    "inducing_variable = tf.convert_to_tensor(\n",
    "    np.random.permutation(X_mean_init.numpy())[:num_inducing],\n",
    "    dtype=default_float(),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b62e91c",
   "metadata": {},
   "source": [
    "We construct a Squared Exponential (SE) kernel operating on the two-dimensional latent space.\n",
    "The `ARD` parameter stands for Automatic Relevance Determination, which in practice means that\n",
    "we learn a different lengthscale for each of the input dimensions. See [Manipulating kernels](../advanced/kernels.ipynb) for more information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c31c8d50",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T08:53:10.855126Z",
     "iopub.status.busy": "2022-09-28T08:53:10.854868Z",
     "iopub.status.idle": "2022-09-28T08:53:10.881201Z",
     "shell.execute_reply": "2022-09-28T08:53:10.880554Z"
    }
   },
   "outputs": [],
   "source": [
    "lengthscales = tf.convert_to_tensor([1.0] * latent_dim, dtype=default_float())\n",
    "kernel = gpflow.kernels.RBF(lengthscales=lengthscales)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19392192",
   "metadata": {},
   "source": [
    "We have all the necessary ingredients to construct the model. GPflow contains an implementation of the Bayesian GPLVM:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e2467fa3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T08:53:10.884342Z",
     "iopub.status.busy": "2022-09-28T08:53:10.884038Z",
     "iopub.status.idle": "2022-09-28T08:53:10.932526Z",
     "shell.execute_reply": "2022-09-28T08:53:10.931885Z"
    }
   },
   "outputs": [],
   "source": [
    "gplvm = gpflow.models.BayesianGPLVM(\n",
    "    Y,\n",
    "    X_data_mean=X_mean_init,\n",
    "    X_data_var=X_var_init,\n",
    "    kernel=kernel,\n",
    "    inducing_variable=inducing_variable,\n",
    ")\n",
    "# Instead of passing an inducing_variable directly, we can also set the num_inducing_variables argument to an integer, which will randomly pick from the data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83e1c2dc",
   "metadata": {},
   "source": [
    "We change the default likelihood variance, which is 1, to 0.01."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1acc40fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T08:53:10.935855Z",
     "iopub.status.busy": "2022-09-28T08:53:10.935539Z",
     "iopub.status.idle": "2022-09-28T08:53:10.946645Z",
     "shell.execute_reply": "2022-09-28T08:53:10.946044Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Variable 'UnreadVariable' shape=() dtype=float64, numpy=-4.600266525158267>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gplvm.likelihood.variance.assign(0.01)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6616db48",
   "metadata": {},
   "source": [
    "Next we optimize the created model. Given that this model has a deterministic evidence lower bound (ELBO), we can use SciPy's BFGS optimizer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "761f234a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T08:53:10.949430Z",
     "iopub.status.busy": "2022-09-28T08:53:10.949142Z",
     "iopub.status.idle": "2022-09-28T08:56:37.229269Z",
     "shell.execute_reply": "2022-09-28T08:56:37.228550Z"
    }
   },
   "outputs": [],
   "source": [
    "opt = gpflow.optimizers.Scipy()\n",
    "maxiter = reduce_in_tests(1000)\n",
    "_ = opt.minimize(\n",
    "    gplvm.training_loss,\n",
    "    method=\"BFGS\",\n",
    "    variables=gplvm.trainable_variables,\n",
    "    options=dict(maxiter=maxiter),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a6b2f60",
   "metadata": {},
   "source": [
    "## Model analysis\n",
    "GPflow allows you to inspect the learned model hyperparameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "cd201aae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T08:56:37.232608Z",
     "iopub.status.busy": "2022-09-28T08:56:37.232268Z",
     "iopub.status.idle": "2022-09-28T08:56:37.249020Z",
     "shell.execute_reply": "2022-09-28T08:56:37.248454Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                             </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape   </th><th>dtype  </th><th>value                           </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>BayesianGPLVM.kernel.variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()      </td><td>float64</td><td>0.91802                         </td></tr>\n",
       "<tr><td>BayesianGPLVM.kernel.lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>(2,)    </td><td>float64</td><td>[0.86661 1.76001]               </td></tr>\n",
       "<tr><td>BayesianGPLVM.likelihood.variance</td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()      </td><td>float64</td><td>0.00648                         </td></tr>\n",
       "<tr><td>BayesianGPLVM.X_data_mean        </td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>(100, 2)</td><td>float64</td><td>[[-7.98770e-01, 3.04429e+00...  </td></tr>\n",
       "<tr><td>BayesianGPLVM.X_data_var         </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>(100, 2)</td><td>float64</td><td>[[0.00041, 0.00154...           </td></tr>\n",
       "<tr><td>BayesianGPLVM.inducing_variable.Z</td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>(20, 2) </td><td>float64</td><td>[[1.317670e+00, -1.723680e+00...</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print_summary(gplvm)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c1446e3",
   "metadata": {},
   "source": [
    "## Plotting vs. Principle Component Analysis (PCA)\n",
    "The reduction of the dimensionality of the dataset to two dimensions allows us to visualize the learned manifold.\n",
    "We compare the Bayesian GPLVM's latent space to the deterministic PCA's one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3ae2ac11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-28T08:56:37.251603Z",
     "iopub.status.busy": "2022-09-28T08:56:37.251325Z",
     "iopub.status.idle": "2022-09-28T08:56:37.600020Z",
     "shell.execute_reply": "2022-09-28T08:56:37.599421Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_pca = ops.pca_reduce(Y, latent_dim).numpy()\n",
    "gplvm_X_mean = gplvm.X_data_mean.numpy()\n",
    "\n",
    "f, ax = plt.subplots(1, 2, figsize=(10, 6))\n",
    "\n",
    "for i in np.unique(labels):\n",
    "    ax[0].scatter(X_pca[labels == i, 0], X_pca[labels == i, 1], label=i)\n",
    "    ax[1].scatter(\n",
    "        gplvm_X_mean[labels == i, 0], gplvm_X_mean[labels == i, 1], label=i\n",
    "    )\n",
    "    ax[0].set_title(\"PCA\")\n",
    "    ax[1].set_title(\"Bayesian GPLVM\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f2f2d48",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "bd237449",
   "metadata": {},
   "source": [
    "## References\n",
    "\\[1\\] Lawrence, Neil D. 'Gaussian process latent variable models for visualization of high dimensional data'. *Advances in Neural Information Processing Systems*. 2004.\n",
    "\n",
    "\\[2\\] Titsias, Michalis, and Neil D. Lawrence. 'Bayesian Gaussian process latent variable model'. *Proceedings of the Thirteenth International Conference on Artificial Intelligence and Statistics*. 2010.\n",
    "\n",
    "\\[3\\] Bishop, Christopher M., and Gwilym D. James. 'Analysis of multiphase flows using dual-energy gamma densitometry and neural networks'. *Nuclear Instruments and Methods in Physics Research Section A: Accelerators, Spectrometers, Detectors and Associated Equipment* 327.2-3 (1993): 580-593."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
