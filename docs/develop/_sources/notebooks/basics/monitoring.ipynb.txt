{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8383075a",
   "metadata": {},
   "source": [
    "# Monitoring Optimisation\n",
    "\n",
    "In this notebook we cover how to monitor the model and certain metrics during optimisation.\n",
    "\n",
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1b78cbe8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T12:35:39.601512Z",
     "iopub.status.busy": "2022-09-16T12:35:39.601236Z",
     "iopub.status.idle": "2022-09-16T12:35:43.688259Z",
     "shell.execute_reply": "2022-09-16T12:35:43.687504Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-09-16 12:35:40.127234: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-09-16 12:35:40.279097: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-09-16 12:35:40.279125: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n",
      "2022-09-16 12:35:40.316547: E tensorflow/stream_executor/cuda/cuda_blas.cc:2981] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-09-16 12:35:41.002230: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory\n",
      "2022-09-16 12:35:41.002299: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory\n",
      "2022-09-16 12:35:41.002308: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.decorator.check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.inheritance.inherit_check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "\n",
    "import gpflow\n",
    "from gpflow.ci_utils import reduce_in_tests\n",
    "\n",
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f54d9f2",
   "metadata": {},
   "source": [
    "The monitoring functionality lives in `gpflow.monitor`.\n",
    "For now, we import `ModelToTensorBoard`, `ImageToTensorBoard`, `ScalarToTensorBoard` monitoring tasks and `MonitorTaskGroup` and `Monitor`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0c4adea1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T12:35:43.691619Z",
     "iopub.status.busy": "2022-09-16T12:35:43.691137Z",
     "iopub.status.idle": "2022-09-16T12:35:43.694428Z",
     "shell.execute_reply": "2022-09-16T12:35:43.693901Z"
    }
   },
   "outputs": [],
   "source": [
    "from gpflow.monitor import (\n",
    "    ImageToTensorBoard,\n",
    "    ModelToTensorBoard,\n",
    "    Monitor,\n",
    "    MonitorTaskGroup,\n",
    "    ScalarToTensorBoard,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f425c478",
   "metadata": {},
   "source": [
    "## Set up data and model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fe0f9ea5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T12:35:43.697955Z",
     "iopub.status.busy": "2022-09-16T12:35:43.697615Z",
     "iopub.status.idle": "2022-09-16T12:35:43.700825Z",
     "shell.execute_reply": "2022-09-16T12:35:43.700293Z"
    }
   },
   "outputs": [],
   "source": [
    "# Define some configuration constants.\n",
    "\n",
    "num_data = 100\n",
    "noise_std = 0.1\n",
    "optimisation_steps = reduce_in_tests(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "04623a5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T12:35:43.703843Z",
     "iopub.status.busy": "2022-09-16T12:35:43.703563Z",
     "iopub.status.idle": "2022-09-16T12:35:43.860100Z",
     "shell.execute_reply": "2022-09-16T12:35:43.859100Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fadd95d8e80>]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create dummy data.\n",
    "\n",
    "X = np.random.randn(num_data, 1)  # [N, 2]\n",
    "Y = np.sin(X) + 0.5 * np.cos(X) + np.random.randn(*X.shape) * noise_std  # [N, 1]\n",
    "plt.plot(X, Y, \"o\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a15358af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T12:35:43.864151Z",
     "iopub.status.busy": "2022-09-16T12:35:43.863655Z",
     "iopub.status.idle": "2022-09-16T12:35:44.016256Z",
     "shell.execute_reply": "2022-09-16T12:35:44.015523Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.checker.ShapeChecker.__init__ which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "2022-09-16 12:35:43.868944: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-09-16 12:35:43.868991: W tensorflow/stream_executor/cuda/cuda_driver.cc:263] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-09-16 12:35:43.869020: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (94c4230f8925): /proc/driver/nvidia/version does not exist\n",
      "2022-09-16 12:35:43.869426: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "&lt;gpflow.models.gpr.GPR object at 0x7fadd9613d90&gt;\n",
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th>value  </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0    </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>(2,)   </td><td>float64</td><td>[1. 2.]</td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0    </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>0.01   </td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<gpflow.models.gpr.GPR object at 0x7fadd9613d90>\n",
       "╒════════════════════════════════════╤═══════════╤══════════════════╤═════════╤═════════════╤═════════╤═════════╤═════════╕\n",
       "│ name                               │ class     │ transform        │ prior   │ trainable   │ shape   │ dtype   │ value   │\n",
       "╞════════════════════════════════════╪═══════════╪══════════════════╪═════════╪═════════════╪═════════╪═════════╪═════════╡\n",
       "│ GPR.kernel.kernels[0].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0     │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼─────────┤\n",
       "│ GPR.kernel.kernels[0].lengthscales │ Parameter │ Softplus         │         │ True        │ (2,)    │ float64 │ [1. 2.] │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼─────────┤\n",
       "│ GPR.kernel.kernels[1].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0     │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼─────────┤\n",
       "│ GPR.likelihood.variance            │ Parameter │ Softplus + Shift │         │ True        │ ()      │ float64 │ 0.01    │\n",
       "╘════════════════════════════════════╧═══════════╧══════════════════╧═════════╧═════════════╧═════════╧═════════╧═════════╛"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set up model and print\n",
    "\n",
    "kernel = gpflow.kernels.SquaredExponential(lengthscales=[1.0, 2.0]) + gpflow.kernels.Linear()\n",
    "model = gpflow.models.GPR((X, Y), kernel, noise_variance=noise_std ** 2)\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "96bc94d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T12:35:44.019215Z",
     "iopub.status.busy": "2022-09-16T12:35:44.018880Z",
     "iopub.status.idle": "2022-09-16T12:35:44.265967Z",
     "shell.execute_reply": "2022-09-16T12:35:44.265340Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We define a function that plots the model's prediction (in the form of samples) together with the data.\n",
    "# Importantly, this function has no other argument than `fig: matplotlib.figure.Figure` and `ax: matplotlib.figure.Axes`.\n",
    "\n",
    "\n",
    "def plot_prediction(fig, ax):\n",
    "    Xnew = np.linspace(X.min() - 0.5, X.max() + 0.5, 100).reshape(-1, 1)\n",
    "    Ypred = model.predict_f_samples(Xnew, full_cov=True, num_samples=20)\n",
    "    ax.plot(Xnew.flatten(), np.squeeze(Ypred).T, \"C1\", alpha=0.2)\n",
    "    ax.plot(X, Y, \"o\")\n",
    "\n",
    "\n",
    "# Let's check if the function does the desired plotting\n",
    "fig = plt.figure()\n",
    "ax = fig.subplots()\n",
    "plot_prediction(fig, ax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40844a7b",
   "metadata": {},
   "source": [
    "## Set up monitoring tasks\n",
    "\n",
    "We now define the `MonitorTask`s that will be executed during the optimisation.\n",
    "For this tutorial we set up three tasks:\n",
    "- `ModelToTensorBoard`: writes the models hyper-parameters such as `likelihood.variance` and `kernel.lengthscales` to a TensorBoard.\n",
    "- `ImageToTensorBoard`: writes custom matplotlib images to a TensorBoard.\n",
    "- `ScalarToTensorBoard`: writes any scalar value to a TensorBoard. Here, we use it to write the model's training objective."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "eb95e33b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T12:35:44.268764Z",
     "iopub.status.busy": "2022-09-16T12:35:44.268456Z",
     "iopub.status.idle": "2022-09-16T12:35:44.288080Z",
     "shell.execute_reply": "2022-09-16T12:35:44.287280Z"
    }
   },
   "outputs": [],
   "source": [
    "log_dir = \"logs\"  # Directory where TensorBoard files will be written.\n",
    "model_task = ModelToTensorBoard(log_dir, model)\n",
    "image_task = ImageToTensorBoard(log_dir, plot_prediction, \"image_samples\")\n",
    "lml_task = ScalarToTensorBoard(log_dir, lambda: model.training_loss(), \"training_objective\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0f30c4f",
   "metadata": {},
   "source": [
    "We now group the tasks in a set of fast and slow tasks and pass them to the monitor.\n",
    "This allows us to execute the groups at a different frequency."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "31d00c92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T12:35:44.501143Z",
     "iopub.status.busy": "2022-09-16T12:35:44.500784Z",
     "iopub.status.idle": "2022-09-16T12:35:44.504520Z",
     "shell.execute_reply": "2022-09-16T12:35:44.503978Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# Plotting tasks can be quite slow. We want to run them less frequently.\n",
    "# We group them in a `MonitorTaskGroup` and set the period to 5.\n",
    "slow_tasks = MonitorTaskGroup(image_task, period=5)\n",
    "\n",
    "# The other tasks are fast. We run them at each iteration of the optimisation.\n",
    "fast_tasks = MonitorTaskGroup([model_task, lml_task], period=1)\n",
    "\n",
    "# Both groups are passed to the monitor.\n",
    "# `slow_tasks` will be run five times less frequently than `fast_tasks`.\n",
    "monitor = Monitor(fast_tasks, slow_tasks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f036a512",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T12:35:44.506829Z",
     "iopub.status.busy": "2022-09-16T12:35:44.506575Z",
     "iopub.status.idle": "2022-09-16T12:35:53.352149Z",
     "shell.execute_reply": "2022-09-16T12:35:53.351428Z"
    }
   },
   "outputs": [],
   "source": [
    "training_loss = model.training_loss_closure(\n",
    "    compile=True\n",
    ")  # compile=True (default): compiles using tf.function\n",
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "for step in range(optimisation_steps):\n",
    "    opt.minimize(training_loss, model.trainable_variables)\n",
    "    monitor(step)  # <-- run the monitoring"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a054ee4f",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "TensorBoard is accessible through the browser, after launching the server by running `tensorboard --logdir ${logdir}`.\n",
    "See the [TensorFlow documentation on TensorBoard](https://www.tensorflow.org/tensorboard/get_started) for more information."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3111863",
   "metadata": {},
   "source": [
    "### For optimal performance, we can also wrap the monitor call inside `tf.function`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e7759e5a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T12:35:53.355481Z",
     "iopub.status.busy": "2022-09-16T12:35:53.355164Z",
     "iopub.status.idle": "2022-09-16T12:35:53.359857Z",
     "shell.execute_reply": "2022-09-16T12:35:53.359240Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "log_dir_compiled = f\"{log_dir}/compiled\"\n",
    "model_task = ModelToTensorBoard(log_dir_compiled, model)\n",
    "lml_task = ScalarToTensorBoard(\n",
    "    log_dir_compiled, lambda: model.training_loss(), \"training_objective\"\n",
    ")\n",
    "# Note that the `ImageToTensorBoard` task cannot be compiled, and is omitted from the monitoring\n",
    "monitor = Monitor(MonitorTaskGroup([model_task, lml_task]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d1fbfa8",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "In the optimisation loop below we use `tf.range` (rather than Python's built-in range) to avoid re-tracing the `step` function each time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "966b1d3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T12:35:53.362505Z",
     "iopub.status.busy": "2022-09-16T12:35:53.362235Z",
     "iopub.status.idle": "2022-09-16T12:35:55.348251Z",
     "shell.execute_reply": "2022-09-16T12:35:55.347473Z"
    }
   },
   "outputs": [],
   "source": [
    "@tf.function\n",
    "def step(i):\n",
    "    opt.minimize(model.training_loss, model.trainable_variables)\n",
    "    monitor(i)\n",
    "\n",
    "\n",
    "# Notice the tf.range\n",
    "for i in tf.range(optimisation_steps):\n",
    "    step(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1778bf4",
   "metadata": {},
   "source": [
    "When opening TensorBoard, you may need to use the command `tensorboard --logdir . --reload_multifile=true`, as multiple `FileWriter` objects are used."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec7a68c3",
   "metadata": {},
   "source": [
    "### Scipy Optimization monitoring\n",
    "\n",
    "Note that if you want to use the `Scipy` optimizer provided by GPflow, and want to monitor the training progress, then you need to simply replace\n",
    "the optimization loop with a single call to its `minimize` method and pass in the monitor as a `step_callback` keyword argument:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5a023eba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T12:35:55.351617Z",
     "iopub.status.busy": "2022-09-16T12:35:55.351321Z",
     "iopub.status.idle": "2022-09-16T12:35:55.371311Z",
     "shell.execute_reply": "2022-09-16T12:35:55.370578Z"
    }
   },
   "outputs": [],
   "source": [
    "opt = gpflow.optimizers.Scipy()\n",
    "\n",
    "log_dir_scipy = f\"{log_dir}/scipy\"\n",
    "model_task = ModelToTensorBoard(log_dir_scipy, model)\n",
    "lml_task = ScalarToTensorBoard(log_dir_scipy, lambda: model.training_loss(), \"training_objective\")\n",
    "image_task = ImageToTensorBoard(log_dir_scipy, plot_prediction, \"image_samples\")\n",
    "\n",
    "monitor = Monitor(\n",
    "    MonitorTaskGroup([model_task, lml_task], period=1), MonitorTaskGroup(image_task, period=5)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7c4f3067",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T12:35:55.374570Z",
     "iopub.status.busy": "2022-09-16T12:35:55.374220Z",
     "iopub.status.idle": "2022-09-16T12:35:57.916204Z",
     "shell.execute_reply": "2022-09-16T12:35:57.915570Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "      fun: -69.68099880889758\n",
       " hess_inv: <5x5 LbfgsInvHessProduct with dtype=float64>\n",
       "      jac: array([-2.96735859e-04, -4.30340709e-04,  3.97830747e-04,  2.26009893e-06,\n",
       "        4.29147212e-04])\n",
       "  message: 'CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH'\n",
       "     nfev: 37\n",
       "      nit: 28\n",
       "     njev: 37\n",
       "   status: 0\n",
       "  success: True\n",
       "        x: array([  2.07005976,   1.74612938,   0.18194306, -15.21875416,\n",
       "        -4.53840856])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opt.minimize(training_loss, model.trainable_variables, step_callback=monitor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a109736",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
