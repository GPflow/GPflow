{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4cd21259",
   "metadata": {},
   "source": [
    "# Monitoring Optimisation\n",
    "\n",
    "In this notebook we cover how to monitor the model and certain metrics during optimisation.\n",
    "\n",
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e74892a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T13:04:22.906947Z",
     "iopub.status.busy": "2022-09-29T13:04:22.906637Z",
     "iopub.status.idle": "2022-09-29T13:04:27.228471Z",
     "shell.execute_reply": "2022-09-29T13:04:27.227790Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-09-29 13:04:23.462671: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2022-09-29 13:04:23.612300: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-09-29 13:04:23.612322: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n",
      "2022-09-29 13:04:23.642947: E tensorflow/stream_executor/cuda/cuda_blas.cc:2981] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-09-29 13:04:24.362036: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory\n",
      "2022-09-29 13:04:24.362134: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory\n",
      "2022-09-29 13:04:24.362145: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.decorator.check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.inheritance.inherit_check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "\n",
    "import gpflow\n",
    "from gpflow.ci_utils import reduce_in_tests\n",
    "\n",
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2671da9",
   "metadata": {},
   "source": [
    "The monitoring functionality lives in `gpflow.monitor`.\n",
    "For now, we import `ModelToTensorBoard`, `ImageToTensorBoard`, `ScalarToTensorBoard` monitoring tasks and `MonitorTaskGroup` and `Monitor`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1bf30338",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T13:04:27.232087Z",
     "iopub.status.busy": "2022-09-29T13:04:27.231562Z",
     "iopub.status.idle": "2022-09-29T13:04:27.234977Z",
     "shell.execute_reply": "2022-09-29T13:04:27.234441Z"
    }
   },
   "outputs": [],
   "source": [
    "from gpflow.monitor import (\n",
    "    ImageToTensorBoard,\n",
    "    ModelToTensorBoard,\n",
    "    Monitor,\n",
    "    MonitorTaskGroup,\n",
    "    ScalarToTensorBoard,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a99d9500",
   "metadata": {},
   "source": [
    "## Set up data and model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e777566d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T13:04:27.239289Z",
     "iopub.status.busy": "2022-09-29T13:04:27.237146Z",
     "iopub.status.idle": "2022-09-29T13:04:27.242587Z",
     "shell.execute_reply": "2022-09-29T13:04:27.241566Z"
    }
   },
   "outputs": [],
   "source": [
    "# Define some configuration constants.\n",
    "\n",
    "num_data = 100\n",
    "noise_std = 0.1\n",
    "optimisation_steps = reduce_in_tests(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7064c0c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T13:04:27.246255Z",
     "iopub.status.busy": "2022-09-29T13:04:27.245905Z",
     "iopub.status.idle": "2022-09-29T13:04:27.387986Z",
     "shell.execute_reply": "2022-09-29T13:04:27.387375Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7faf1be23610>]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create dummy data.\n",
    "\n",
    "X = np.random.randn(num_data, 1)  # [N, 2]\n",
    "Y = (\n",
    "    np.sin(X) + 0.5 * np.cos(X) + np.random.randn(*X.shape) * noise_std\n",
    ")  # [N, 1]\n",
    "plt.plot(X, Y, \"o\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5000b2f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T13:04:27.391214Z",
     "iopub.status.busy": "2022-09-29T13:04:27.390907Z",
     "iopub.status.idle": "2022-09-29T13:04:27.497369Z",
     "shell.execute_reply": "2022-09-29T13:04:27.496643Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.checker.ShapeChecker.__init__ which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "2022-09-29 13:04:27.395051: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-09-29 13:04:27.395085: W tensorflow/stream_executor/cuda/cuda_driver.cc:263] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-09-29 13:04:27.395106: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (847716d337b1): /proc/driver/nvidia/version does not exist\n",
      "2022-09-29 13:04:27.395400: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "&lt;gpflow.models.gpr.GPR object at 0x7faf1bb54a00&gt;\n",
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th>value  </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0    </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>(2,)   </td><td>float64</td><td>[1. 2.]</td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0    </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>0.01   </td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<gpflow.models.gpr.GPR object at 0x7faf1bb54a00>\n",
       "╒════════════════════════════════════╤═══════════╤══════════════════╤═════════╤═════════════╤═════════╤═════════╤═════════╕\n",
       "│ name                               │ class     │ transform        │ prior   │ trainable   │ shape   │ dtype   │ value   │\n",
       "╞════════════════════════════════════╪═══════════╪══════════════════╪═════════╪═════════════╪═════════╪═════════╪═════════╡\n",
       "│ GPR.kernel.kernels[0].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0     │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼─────────┤\n",
       "│ GPR.kernel.kernels[0].lengthscales │ Parameter │ Softplus         │         │ True        │ (2,)    │ float64 │ [1. 2.] │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼─────────┤\n",
       "│ GPR.kernel.kernels[1].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0     │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼─────────┤\n",
       "│ GPR.likelihood.variance            │ Parameter │ Softplus + Shift │         │ True        │ ()      │ float64 │ 0.01    │\n",
       "╘════════════════════════════════════╧═══════════╧══════════════════╧═════════╧═════════════╧═════════╧═════════╧═════════╛"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set up model and print\n",
    "\n",
    "kernel = (\n",
    "    gpflow.kernels.SquaredExponential(lengthscales=[1.0, 2.0])\n",
    "    + gpflow.kernels.Linear()\n",
    ")\n",
    "model = gpflow.models.GPR((X, Y), kernel, noise_variance=noise_std ** 2)\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "72f45b5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T13:04:27.500660Z",
     "iopub.status.busy": "2022-09-29T13:04:27.500188Z",
     "iopub.status.idle": "2022-09-29T13:04:27.771183Z",
     "shell.execute_reply": "2022-09-29T13:04:27.770353Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We define a function that plots the model's prediction (in the form of samples) together with the data.\n",
    "# Importantly, this function has no other argument than `fig: matplotlib.figure.Figure` and `ax: matplotlib.figure.Axes`.\n",
    "\n",
    "\n",
    "def plot_prediction(fig, ax):\n",
    "    Xnew = np.linspace(X.min() - 0.5, X.max() + 0.5, 100).reshape(-1, 1)\n",
    "    Ypred = model.predict_f_samples(Xnew, full_cov=True, num_samples=20)\n",
    "    ax.plot(Xnew.flatten(), np.squeeze(Ypred).T, \"C1\", alpha=0.2)\n",
    "    ax.plot(X, Y, \"o\")\n",
    "\n",
    "\n",
    "# Let's check if the function does the desired plotting\n",
    "fig = plt.figure()\n",
    "ax = fig.subplots()\n",
    "plot_prediction(fig, ax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "468238d9",
   "metadata": {},
   "source": [
    "## Set up monitoring tasks\n",
    "\n",
    "We now define the `MonitorTask`s that will be executed during the optimisation.\n",
    "For this tutorial we set up three tasks:\n",
    "- `ModelToTensorBoard`: writes the models hyper-parameters such as `likelihood.variance` and `kernel.lengthscales` to a TensorBoard.\n",
    "- `ImageToTensorBoard`: writes custom matplotlib images to a TensorBoard.\n",
    "- `ScalarToTensorBoard`: writes any scalar value to a TensorBoard. Here, we use it to write the model's training objective."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ad7ee910",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T13:04:27.774165Z",
     "iopub.status.busy": "2022-09-29T13:04:27.773803Z",
     "iopub.status.idle": "2022-09-29T13:04:27.791194Z",
     "shell.execute_reply": "2022-09-29T13:04:27.790304Z"
    }
   },
   "outputs": [],
   "source": [
    "log_dir = \"logs\"  # Directory where TensorBoard files will be written.\n",
    "model_task = ModelToTensorBoard(log_dir, model)\n",
    "image_task = ImageToTensorBoard(log_dir, plot_prediction, \"image_samples\")\n",
    "lml_task = ScalarToTensorBoard(\n",
    "    log_dir, lambda: model.training_loss(), \"training_objective\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9fb4615",
   "metadata": {},
   "source": [
    "We now group the tasks in a set of fast and slow tasks and pass them to the monitor.\n",
    "This allows us to execute the groups at a different frequency."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ff260611",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T13:04:27.794483Z",
     "iopub.status.busy": "2022-09-29T13:04:27.794143Z",
     "iopub.status.idle": "2022-09-29T13:04:27.798517Z",
     "shell.execute_reply": "2022-09-29T13:04:27.797699Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# Plotting tasks can be quite slow. We want to run them less frequently.\n",
    "# We group them in a `MonitorTaskGroup` and set the period to 5.\n",
    "slow_tasks = MonitorTaskGroup(image_task, period=5)\n",
    "\n",
    "# The other tasks are fast. We run them at each iteration of the optimisation.\n",
    "fast_tasks = MonitorTaskGroup([model_task, lml_task], period=1)\n",
    "\n",
    "# Both groups are passed to the monitor.\n",
    "# `slow_tasks` will be run five times less frequently than `fast_tasks`.\n",
    "monitor = Monitor(fast_tasks, slow_tasks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f80fef3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T13:04:27.801026Z",
     "iopub.status.busy": "2022-09-29T13:04:27.800741Z",
     "iopub.status.idle": "2022-09-29T13:04:36.991955Z",
     "shell.execute_reply": "2022-09-29T13:04:36.991260Z"
    }
   },
   "outputs": [],
   "source": [
    "training_loss = model.training_loss_closure(\n",
    "    compile=True\n",
    ")  # compile=True (default): compiles using tf.function\n",
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "for step in range(optimisation_steps):\n",
    "    opt.minimize(training_loss, model.trainable_variables)\n",
    "    monitor(step)  # <-- run the monitoring"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ce12d18",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "TensorBoard is accessible through the browser, after launching the server by running `tensorboard --logdir ${logdir}`.\n",
    "See the [TensorFlow documentation on TensorBoard](https://www.tensorflow.org/tensorboard/get_started) for more information."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e0c4355",
   "metadata": {},
   "source": [
    "### For optimal performance, we can also wrap the monitor call inside `tf.function`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dba22b3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T13:04:37.032392Z",
     "iopub.status.busy": "2022-09-29T13:04:37.032018Z",
     "iopub.status.idle": "2022-09-29T13:04:37.037332Z",
     "shell.execute_reply": "2022-09-29T13:04:37.036714Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "log_dir_compiled = f\"{log_dir}/compiled\"\n",
    "model_task = ModelToTensorBoard(log_dir_compiled, model)\n",
    "lml_task = ScalarToTensorBoard(\n",
    "    log_dir_compiled, lambda: model.training_loss(), \"training_objective\"\n",
    ")\n",
    "# Note that the `ImageToTensorBoard` task cannot be compiled, and is omitted from the monitoring\n",
    "monitor = Monitor(MonitorTaskGroup([model_task, lml_task]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6cee16cf",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "In the optimisation loop below we use `tf.range` (rather than Python's built-in range) to avoid re-tracing the `step` function each time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7fbf1d1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T13:04:37.040565Z",
     "iopub.status.busy": "2022-09-29T13:04:37.040240Z",
     "iopub.status.idle": "2022-09-29T13:04:39.286680Z",
     "shell.execute_reply": "2022-09-29T13:04:39.285838Z"
    }
   },
   "outputs": [],
   "source": [
    "@tf.function\n",
    "def step(i):\n",
    "    opt.minimize(model.training_loss, model.trainable_variables)\n",
    "    monitor(i)\n",
    "\n",
    "\n",
    "# Notice the tf.range\n",
    "for i in tf.range(optimisation_steps):\n",
    "    step(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e84b0ec",
   "metadata": {},
   "source": [
    "When opening TensorBoard, you may need to use the command `tensorboard --logdir . --reload_multifile=true`, as multiple `FileWriter` objects are used."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd800fba",
   "metadata": {},
   "source": [
    "### Scipy Optimization monitoring\n",
    "\n",
    "Note that if you want to use the `Scipy` optimizer provided by GPflow, and want to monitor the training progress, then you need to simply replace\n",
    "the optimization loop with a single call to its `minimize` method and pass in the monitor as a `step_callback` keyword argument:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bd84b3ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T13:04:39.290181Z",
     "iopub.status.busy": "2022-09-29T13:04:39.289822Z",
     "iopub.status.idle": "2022-09-29T13:04:39.306405Z",
     "shell.execute_reply": "2022-09-29T13:04:39.305666Z"
    }
   },
   "outputs": [],
   "source": [
    "opt = gpflow.optimizers.Scipy()\n",
    "\n",
    "log_dir_scipy = f\"{log_dir}/scipy\"\n",
    "model_task = ModelToTensorBoard(log_dir_scipy, model)\n",
    "lml_task = ScalarToTensorBoard(\n",
    "    log_dir_scipy, lambda: model.training_loss(), \"training_objective\"\n",
    ")\n",
    "image_task = ImageToTensorBoard(log_dir_scipy, plot_prediction, \"image_samples\")\n",
    "\n",
    "monitor = Monitor(\n",
    "    MonitorTaskGroup([model_task, lml_task], period=1),\n",
    "    MonitorTaskGroup(image_task, period=5),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0264d37f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-29T13:04:39.309623Z",
     "iopub.status.busy": "2022-09-29T13:04:39.309322Z",
     "iopub.status.idle": "2022-09-29T13:04:42.112343Z",
     "shell.execute_reply": "2022-09-29T13:04:42.111618Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "      fun: -69.68099880889176\n",
       " hess_inv: <5x5 LbfgsInvHessProduct with dtype=float64>\n",
       "      jac: array([-2.96735870e-04, -4.30340722e-04,  3.97828780e-04,  2.26010527e-06,\n",
       "        4.29141705e-04])\n",
       "  message: 'CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH'\n",
       "     nfev: 37\n",
       "      nit: 28\n",
       "     njev: 37\n",
       "   status: 0\n",
       "  success: True\n",
       "        x: array([  2.07005976,   1.74612938,   0.18194306, -15.21875135,\n",
       "        -4.53840856])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opt.minimize(training_loss, model.trainable_variables, step_callback=monitor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d3fbd7c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
