{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3b53b611",
   "metadata": {},
   "source": [
    "# Monitoring Optimisation\n",
    "\n",
    "In this notebook we cover how to monitor the model and certain metrics during optimisation.\n",
    "\n",
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8a819729",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T10:35:18.866509Z",
     "iopub.status.busy": "2022-09-16T10:35:18.866235Z",
     "iopub.status.idle": "2022-09-16T10:35:23.505228Z",
     "shell.execute_reply": "2022-09-16T10:35:23.504193Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-09-16 10:35:19.438560: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2022-09-16 10:35:19.593158: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-09-16 10:35:19.593196: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n",
      "2022-09-16 10:35:19.630264: E tensorflow/stream_executor/cuda/cuda_blas.cc:2981] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-09-16 10:35:20.424975: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory\n",
      "2022-09-16 10:35:20.425047: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory\n",
      "2022-09-16 10:35:20.425055: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.decorator.check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.inheritance.inherit_check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "\n",
    "import gpflow\n",
    "from gpflow.ci_utils import reduce_in_tests\n",
    "\n",
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6f68559",
   "metadata": {},
   "source": [
    "The monitoring functionality lives in `gpflow.monitor`.\n",
    "For now, we import `ModelToTensorBoard`, `ImageToTensorBoard`, `ScalarToTensorBoard` monitoring tasks and `MonitorTaskGroup` and `Monitor`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "53b1dce9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T10:35:23.509527Z",
     "iopub.status.busy": "2022-09-16T10:35:23.509005Z",
     "iopub.status.idle": "2022-09-16T10:35:23.512391Z",
     "shell.execute_reply": "2022-09-16T10:35:23.511845Z"
    }
   },
   "outputs": [],
   "source": [
    "from gpflow.monitor import (\n",
    "    ImageToTensorBoard,\n",
    "    ModelToTensorBoard,\n",
    "    Monitor,\n",
    "    MonitorTaskGroup,\n",
    "    ScalarToTensorBoard,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65caac4a",
   "metadata": {},
   "source": [
    "## Set up data and model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4fe24972",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T10:35:23.514971Z",
     "iopub.status.busy": "2022-09-16T10:35:23.514656Z",
     "iopub.status.idle": "2022-09-16T10:35:23.517760Z",
     "shell.execute_reply": "2022-09-16T10:35:23.517251Z"
    }
   },
   "outputs": [],
   "source": [
    "# Define some configuration constants.\n",
    "\n",
    "num_data = 100\n",
    "noise_std = 0.1\n",
    "optimisation_steps = reduce_in_tests(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "62b1ae8d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T10:35:23.520377Z",
     "iopub.status.busy": "2022-09-16T10:35:23.520099Z",
     "iopub.status.idle": "2022-09-16T10:35:23.662002Z",
     "shell.execute_reply": "2022-09-16T10:35:23.661455Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f3093207520>]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create dummy data.\n",
    "\n",
    "X = np.random.randn(num_data, 1)  # [N, 2]\n",
    "Y = np.sin(X) + 0.5 * np.cos(X) + np.random.randn(*X.shape) * noise_std  # [N, 1]\n",
    "plt.plot(X, Y, \"o\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bd9a94b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T10:35:23.664674Z",
     "iopub.status.busy": "2022-09-16T10:35:23.664392Z",
     "iopub.status.idle": "2022-09-16T10:35:23.776134Z",
     "shell.execute_reply": "2022-09-16T10:35:23.775489Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.checker.ShapeChecker.__init__ which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "2022-09-16 10:35:23.667218: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-09-16 10:35:23.667246: W tensorflow/stream_executor/cuda/cuda_driver.cc:263] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-09-16 10:35:23.667266: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (eb8e951b175b): /proc/driver/nvidia/version does not exist\n",
      "2022-09-16 10:35:23.667547: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "&lt;gpflow.models.gpr.GPR object at 0x7f3093223ee0&gt;\n",
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th>value  </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0    </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>(2,)   </td><td>float64</td><td>[1. 2.]</td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0    </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>0.01   </td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<gpflow.models.gpr.GPR object at 0x7f3093223ee0>\n",
       "╒════════════════════════════════════╤═══════════╤══════════════════╤═════════╤═════════════╤═════════╤═════════╤═════════╕\n",
       "│ name                               │ class     │ transform        │ prior   │ trainable   │ shape   │ dtype   │ value   │\n",
       "╞════════════════════════════════════╪═══════════╪══════════════════╪═════════╪═════════════╪═════════╪═════════╪═════════╡\n",
       "│ GPR.kernel.kernels[0].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0     │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼─────────┤\n",
       "│ GPR.kernel.kernels[0].lengthscales │ Parameter │ Softplus         │         │ True        │ (2,)    │ float64 │ [1. 2.] │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼─────────┤\n",
       "│ GPR.kernel.kernels[1].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0     │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼─────────┤\n",
       "│ GPR.likelihood.variance            │ Parameter │ Softplus + Shift │         │ True        │ ()      │ float64 │ 0.01    │\n",
       "╘════════════════════════════════════╧═══════════╧══════════════════╧═════════╧═════════════╧═════════╧═════════╧═════════╛"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set up model and print\n",
    "\n",
    "kernel = gpflow.kernels.SquaredExponential(lengthscales=[1.0, 2.0]) + gpflow.kernels.Linear()\n",
    "model = gpflow.models.GPR((X, Y), kernel, noise_variance=noise_std ** 2)\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7f16fb00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T10:35:23.778839Z",
     "iopub.status.busy": "2022-09-16T10:35:23.778590Z",
     "iopub.status.idle": "2022-09-16T10:35:24.028066Z",
     "shell.execute_reply": "2022-09-16T10:35:24.027453Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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tqW5gYX3ASNhmX0JD8bvLgoC2hSvU9T43UnxSxTn4k4tIiKaVQwv0+XKBPIelAAz15t0E5EWvynamy9LQ5FAvMcF8ZugMd60ax+9PZrjR0REyWN4SYTdCeA2lxWSsDsA+xzeOk5ERCnBwpfxEBER0XzE8EJERESWwvBCRERElsLwQkRERJbC8EJERESWwvBCRERElsLwQkRERJbC8EJERESWwvBCRERElsLwQkRERJbC8EJERESWwvBCRERElsLwQkRERJYy526VNgwDABAIBEyuhIiIiKZr9O/26N/xqcy58BIMBgEAJSUlJldCREREiQoGg8jKypryOYoxnYhjIbquo6urC16vF4qizOpnBQIBlJSU4MqVK8jMzJzVz5orOGbJ4bgljmOWHI5b4jhmybl53AzDQDAYRFFREVR16q6WOTfzoqoqiouL7+lnZmZm8hc2QRyz5HDcEscxSw7HLXEcs+TcOG53mnEZxYZdIiIishSGFyIiIrIUhpe74HQ60djYCKfTaXYplsExSw7HLXEcs+Rw3BLHMUvO3YzbnGvYJSIiormNMy9ERERkKQwvREREZCkML0RERGQpDC9ERERkKQwvM+TZZ59FaWkpXC4XCgsL8eKLL6Krq8vsslLa5cuX8eqrr6K8vBxutxsVFRVobGyEpmlml5bS3nvvPaxcuRIejwfZ2dlml5OyduzYgbKyMrhcLjz++OM4duyY2SWltMOHD2PdunUoKiqCoij45ptvzC4p5W3btg2PPfYYvF4v8vLysH79epw/f97sslLazp078dBDD40dTLdixQp8++23Cb8Pw8sMqampwZdffonz58/j66+/xsWLF/H888+bXVZKa2trg67r2LVrF86ePYuPPvoIn3zyCd555x2zS0tpmqZhw4YNqK+vN7uUlPXFF19gy5YtaGxsxKlTp7B06VI8/fTT6O3tNbu0lBUKhbB06VLs2LHD7FIs49ChQ2hoaMCRI0fwww8/YGRkBE899RRCoZDZpaWs4uJivP/++zh58iROnDiBNWvW4LnnnsPZs2cTeyODZkVLS4uhKIqhaZrZpVjKBx98YJSXl5tdhiU0NTUZWVlZZpeRkqqrq42Ghoax72OxmFFUVGRs27bNxKqsA4DR3NxsdhmW09vbawAwDh06ZHYplpKTk2N8+umnCb2GMy+zYGBgAJ9//jlWrlyJtLQ0s8uxFL/fD5/PZ3YZZGGapuHkyZOora0de0xVVdTW1uLnn382sTKa6/x+PwDw/7BpisVi2Lt3L0KhEFasWJHQaxleZtDWrVuRnp6OBQsWoL29HS0tLWaXZCkXLlzA9u3b8frrr5tdCllYf38/YrEY8vPzJzyen5+Pnp4ek6qiuU7XdWzevBlPPPEEqqqqzC4npf3666/IyMiA0+nExo0b0dzcjMrKyoTeg+FlCm+99RYURZnyq62tbez5b775Jk6fPo19+/bBZrPhpZdegjEPDzBOdNwAoLOzE2vXrsWGDRvw2muvmVS5eZIZMyJKHQ0NDThz5gz27t1rdikp74EHHkBrayuOHj2K+vp61NXV4dy5cwm9B68HmEJfXx+uXr065XMWL14Mh8Nxy+MdHR0oKSnBTz/9lPB0mNUlOm5dXV1YvXo1li9fjt27d0NV51+mTuZ3bffu3di8eTMGBwdnuTpr0TQNHo8HX331FdavXz/2eF1dHQYHBzkjOg2KoqC5uXnC+NHkNm3ahJaWFhw+fBjl5eVml2M5tbW1qKiowK5du6b9Gvss1mN5ubm5yM3NTeq1uq4DACKRyEyWZAmJjFtnZydqamqwbNkyNDU1zcvgAtzd7xpN5HA4sGzZMuzfv3/sj6+u69i/fz82bdpkbnE0pxiGgTfeeAPNzc04ePAgg0uSdF1P+G8lw8sMOHr0KI4fP45Vq1YhJycHFy9exLvvvouKiop5N+uSiM7OTqxevRqLFi3Chx9+iL6+vrGfFRQUmFhZamtvb8fAwADa29sRi8XQ2toKAFiyZAkyMjLMLS5FbNmyBXV1dXj00UdRXV2Njz/+GKFQCC+//LLZpaWsoaEhXLhwYez7S5cuobW1FT6fD6WlpSZWlroaGhqwZ88etLS0wOv1jvVUZWVlwe12m1xdanr77bfxzDPPoLS0FMFgEHv27MHBgwfx/fffJ/ZGs7Drad755ZdfjJqaGsPn8xlOp9MoKyszNm7caHR0dJhdWkpramoyANz2iyZXV1d32zE7cOCA2aWllO3btxulpaWGw+EwqqurjSNHjphdUko7cODAbX+v6urqzC4tZU32/1dTU5PZpaWsV155xVi0aJHhcDiM3Nxc48knnzT27duX8Puw54WIiIgsZX42GBAREZFlMbwQERGRpTC8EBERkaUwvBAREZGlMLwQERGRpTC8EBERkaUwvBAREZGlMLwQERGRpTC8EBERkaUwvBAREZGlMLwQERGRpTC8EBERkaX8HwI1Dc2dTlGxAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We define a function that plots the model's prediction (in the form of samples) together with the data.\n",
    "# Importantly, this function has no other argument than `fig: matplotlib.figure.Figure` and `ax: matplotlib.figure.Axes`.\n",
    "\n",
    "\n",
    "def plot_prediction(fig, ax):\n",
    "    Xnew = np.linspace(X.min() - 0.5, X.max() + 0.5, 100).reshape(-1, 1)\n",
    "    Ypred = model.predict_f_samples(Xnew, full_cov=True, num_samples=20)\n",
    "    ax.plot(Xnew.flatten(), np.squeeze(Ypred).T, \"C1\", alpha=0.2)\n",
    "    ax.plot(X, Y, \"o\")\n",
    "\n",
    "\n",
    "# Let's check if the function does the desired plotting\n",
    "fig = plt.figure()\n",
    "ax = fig.subplots()\n",
    "plot_prediction(fig, ax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8b76409",
   "metadata": {},
   "source": [
    "## Set up monitoring tasks\n",
    "\n",
    "We now define the `MonitorTask`s that will be executed during the optimisation.\n",
    "For this tutorial we set up three tasks:\n",
    "- `ModelToTensorBoard`: writes the models hyper-parameters such as `likelihood.variance` and `kernel.lengthscales` to a TensorBoard.\n",
    "- `ImageToTensorBoard`: writes custom matplotlib images to a TensorBoard.\n",
    "- `ScalarToTensorBoard`: writes any scalar value to a TensorBoard. Here, we use it to write the model's training objective."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "dbffccd0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T10:35:24.030959Z",
     "iopub.status.busy": "2022-09-16T10:35:24.030683Z",
     "iopub.status.idle": "2022-09-16T10:35:24.047903Z",
     "shell.execute_reply": "2022-09-16T10:35:24.047326Z"
    }
   },
   "outputs": [],
   "source": [
    "log_dir = \"logs\"  # Directory where TensorBoard files will be written.\n",
    "model_task = ModelToTensorBoard(log_dir, model)\n",
    "image_task = ImageToTensorBoard(log_dir, plot_prediction, \"image_samples\")\n",
    "lml_task = ScalarToTensorBoard(log_dir, lambda: model.training_loss(), \"training_objective\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d625924f",
   "metadata": {},
   "source": [
    "We now group the tasks in a set of fast and slow tasks and pass them to the monitor.\n",
    "This allows us to execute the groups at a different frequency."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8001b9ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T10:35:24.097919Z",
     "iopub.status.busy": "2022-09-16T10:35:24.097346Z",
     "iopub.status.idle": "2022-09-16T10:35:24.103823Z",
     "shell.execute_reply": "2022-09-16T10:35:24.102776Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# Plotting tasks can be quite slow. We want to run them less frequently.\n",
    "# We group them in a `MonitorTaskGroup` and set the period to 5.\n",
    "slow_tasks = MonitorTaskGroup(image_task, period=5)\n",
    "\n",
    "# The other tasks are fast. We run them at each iteration of the optimisation.\n",
    "fast_tasks = MonitorTaskGroup([model_task, lml_task], period=1)\n",
    "\n",
    "# Both groups are passed to the monitor.\n",
    "# `slow_tasks` will be run five times less frequently than `fast_tasks`.\n",
    "monitor = Monitor(fast_tasks, slow_tasks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b10c34ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T10:35:24.107128Z",
     "iopub.status.busy": "2022-09-16T10:35:24.106680Z",
     "iopub.status.idle": "2022-09-16T10:35:34.112759Z",
     "shell.execute_reply": "2022-09-16T10:35:34.112049Z"
    }
   },
   "outputs": [],
   "source": [
    "training_loss = model.training_loss_closure(\n",
    "    compile=True\n",
    ")  # compile=True (default): compiles using tf.function\n",
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "for step in range(optimisation_steps):\n",
    "    opt.minimize(training_loss, model.trainable_variables)\n",
    "    monitor(step)  # <-- run the monitoring"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8546af76",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "TensorBoard is accessible through the browser, after launching the server by running `tensorboard --logdir ${logdir}`.\n",
    "See the [TensorFlow documentation on TensorBoard](https://www.tensorflow.org/tensorboard/get_started) for more information."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "816c3902",
   "metadata": {},
   "source": [
    "### For optimal performance, we can also wrap the monitor call inside `tf.function`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e448e4a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T10:35:34.116472Z",
     "iopub.status.busy": "2022-09-16T10:35:34.116157Z",
     "iopub.status.idle": "2022-09-16T10:35:34.121698Z",
     "shell.execute_reply": "2022-09-16T10:35:34.120757Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "log_dir_compiled = f\"{log_dir}/compiled\"\n",
    "model_task = ModelToTensorBoard(log_dir_compiled, model)\n",
    "lml_task = ScalarToTensorBoard(\n",
    "    log_dir_compiled, lambda: model.training_loss(), \"training_objective\"\n",
    ")\n",
    "# Note that the `ImageToTensorBoard` task cannot be compiled, and is omitted from the monitoring\n",
    "monitor = Monitor(MonitorTaskGroup([model_task, lml_task]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2bf5169",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "In the optimisation loop below we use `tf.range` (rather than Python's built-in range) to avoid re-tracing the `step` function each time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d001b4cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T10:35:34.125996Z",
     "iopub.status.busy": "2022-09-16T10:35:34.125663Z",
     "iopub.status.idle": "2022-09-16T10:35:36.348390Z",
     "shell.execute_reply": "2022-09-16T10:35:36.347756Z"
    }
   },
   "outputs": [],
   "source": [
    "@tf.function\n",
    "def step(i):\n",
    "    opt.minimize(model.training_loss, model.trainable_variables)\n",
    "    monitor(i)\n",
    "\n",
    "\n",
    "# Notice the tf.range\n",
    "for i in tf.range(optimisation_steps):\n",
    "    step(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca421c33",
   "metadata": {},
   "source": [
    "When opening TensorBoard, you may need to use the command `tensorboard --logdir . --reload_multifile=true`, as multiple `FileWriter` objects are used."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "203eb3af",
   "metadata": {},
   "source": [
    "### Scipy Optimization monitoring\n",
    "\n",
    "Note that if you want to use the `Scipy` optimizer provided by GPflow, and want to monitor the training progress, then you need to simply replace\n",
    "the optimization loop with a single call to its `minimize` method and pass in the monitor as a `step_callback` keyword argument:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2b7dbca6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T10:35:36.351601Z",
     "iopub.status.busy": "2022-09-16T10:35:36.351316Z",
     "iopub.status.idle": "2022-09-16T10:35:36.367444Z",
     "shell.execute_reply": "2022-09-16T10:35:36.366865Z"
    }
   },
   "outputs": [],
   "source": [
    "opt = gpflow.optimizers.Scipy()\n",
    "\n",
    "log_dir_scipy = f\"{log_dir}/scipy\"\n",
    "model_task = ModelToTensorBoard(log_dir_scipy, model)\n",
    "lml_task = ScalarToTensorBoard(log_dir_scipy, lambda: model.training_loss(), \"training_objective\")\n",
    "image_task = ImageToTensorBoard(log_dir_scipy, plot_prediction, \"image_samples\")\n",
    "\n",
    "monitor = Monitor(\n",
    "    MonitorTaskGroup([model_task, lml_task], period=1), MonitorTaskGroup(image_task, period=5)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8eeee56b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T10:35:36.370177Z",
     "iopub.status.busy": "2022-09-16T10:35:36.369916Z",
     "iopub.status.idle": "2022-09-16T10:35:39.247785Z",
     "shell.execute_reply": "2022-09-16T10:35:39.247187Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "      fun: -69.68099880889758\n",
       " hess_inv: <5x5 LbfgsInvHessProduct with dtype=float64>\n",
       "      jac: array([-2.96735859e-04, -4.30340709e-04,  3.97830747e-04,  2.26009893e-06,\n",
       "        4.29147212e-04])\n",
       "  message: 'CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH'\n",
       "     nfev: 37\n",
       "      nit: 28\n",
       "     njev: 37\n",
       "   status: 0\n",
       "  success: True\n",
       "        x: array([  2.07005976,   1.74612938,   0.18194306, -15.21875416,\n",
       "        -4.53840856])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opt.minimize(training_loss, model.trainable_variables, step_callback=monitor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "db98a2d6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
