{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "11b2562a",
   "metadata": {},
   "source": [
    "# Monitoring Optimisation\n",
    "\n",
    "In this notebook we cover how to monitor the model and certain metrics during optimisation.\n",
    "\n",
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a90822be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T08:50:21.836096Z",
     "iopub.status.busy": "2022-09-16T08:50:21.835687Z",
     "iopub.status.idle": "2022-09-16T08:50:26.528241Z",
     "shell.execute_reply": "2022-09-16T08:50:26.527619Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-09-16 08:50:22.429123: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-09-16 08:50:22.584429: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-09-16 08:50:22.584458: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n",
      "2022-09-16 08:50:22.625285: E tensorflow/stream_executor/cuda/cuda_blas.cc:2981] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-09-16 08:50:23.439601: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory\n",
      "2022-09-16 08:50:23.439672: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory\n",
      "2022-09-16 08:50:23.439680: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.decorator.check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.inheritance.inherit_check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "\n",
    "import gpflow\n",
    "from gpflow.ci_utils import reduce_in_tests\n",
    "\n",
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e004120",
   "metadata": {},
   "source": [
    "The monitoring functionality lives in `gpflow.monitor`.\n",
    "For now, we import `ModelToTensorBoard`, `ImageToTensorBoard`, `ScalarToTensorBoard` monitoring tasks and `MonitorTaskGroup` and `Monitor`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ded523da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T08:50:26.531573Z",
     "iopub.status.busy": "2022-09-16T08:50:26.531104Z",
     "iopub.status.idle": "2022-09-16T08:50:26.534388Z",
     "shell.execute_reply": "2022-09-16T08:50:26.533845Z"
    }
   },
   "outputs": [],
   "source": [
    "from gpflow.monitor import (\n",
    "    ImageToTensorBoard,\n",
    "    ModelToTensorBoard,\n",
    "    Monitor,\n",
    "    MonitorTaskGroup,\n",
    "    ScalarToTensorBoard,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbcd520a",
   "metadata": {},
   "source": [
    "## Set up data and model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c68111a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T08:50:26.536769Z",
     "iopub.status.busy": "2022-09-16T08:50:26.536535Z",
     "iopub.status.idle": "2022-09-16T08:50:26.539373Z",
     "shell.execute_reply": "2022-09-16T08:50:26.538884Z"
    }
   },
   "outputs": [],
   "source": [
    "# Define some configuration constants.\n",
    "\n",
    "num_data = 100\n",
    "noise_std = 0.1\n",
    "optimisation_steps = reduce_in_tests(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "597f874a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T08:50:26.541781Z",
     "iopub.status.busy": "2022-09-16T08:50:26.541335Z",
     "iopub.status.idle": "2022-09-16T08:50:26.728000Z",
     "shell.execute_reply": "2022-09-16T08:50:26.727425Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f61f03007f0>]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create dummy data.\n",
    "\n",
    "X = np.random.randn(num_data, 1)  # [N, 2]\n",
    "Y = np.sin(X) + 0.5 * np.cos(X) + np.random.randn(*X.shape) * noise_std  # [N, 1]\n",
    "plt.plot(X, Y, \"o\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "52892008",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T08:50:26.730725Z",
     "iopub.status.busy": "2022-09-16T08:50:26.730426Z",
     "iopub.status.idle": "2022-09-16T08:50:26.853066Z",
     "shell.execute_reply": "2022-09-16T08:50:26.852489Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.checker.ShapeChecker.__init__ which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "2022-09-16 08:50:26.733085: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-09-16 08:50:26.733119: W tensorflow/stream_executor/cuda/cuda_driver.cc:263] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-09-16 08:50:26.733139: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (385c48695bfb): /proc/driver/nvidia/version does not exist\n",
      "2022-09-16 08:50:26.733395: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "&lt;gpflow.models.gpr.GPR object at 0x7f61f038f0a0&gt;\n",
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th>value  </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0    </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>(2,)   </td><td>float64</td><td>[1. 2.]</td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>1.0    </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td>0.01   </td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<gpflow.models.gpr.GPR object at 0x7f61f038f0a0>\n",
       "╒════════════════════════════════════╤═══════════╤══════════════════╤═════════╤═════════════╤═════════╤═════════╤═════════╕\n",
       "│ name                               │ class     │ transform        │ prior   │ trainable   │ shape   │ dtype   │ value   │\n",
       "╞════════════════════════════════════╪═══════════╪══════════════════╪═════════╪═════════════╪═════════╪═════════╪═════════╡\n",
       "│ GPR.kernel.kernels[0].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0     │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼─────────┤\n",
       "│ GPR.kernel.kernels[0].lengthscales │ Parameter │ Softplus         │         │ True        │ (2,)    │ float64 │ [1. 2.] │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼─────────┤\n",
       "│ GPR.kernel.kernels[1].variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 1.0     │\n",
       "├────────────────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼─────────┤\n",
       "│ GPR.likelihood.variance            │ Parameter │ Softplus + Shift │         │ True        │ ()      │ float64 │ 0.01    │\n",
       "╘════════════════════════════════════╧═══════════╧══════════════════╧═════════╧═════════════╧═════════╧═════════╧═════════╛"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set up model and print\n",
    "\n",
    "kernel = gpflow.kernels.SquaredExponential(lengthscales=[1.0, 2.0]) + gpflow.kernels.Linear()\n",
    "model = gpflow.models.GPR((X, Y), kernel, noise_variance=noise_std ** 2)\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e25458e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T08:50:26.855641Z",
     "iopub.status.busy": "2022-09-16T08:50:26.855357Z",
     "iopub.status.idle": "2022-09-16T08:50:27.102307Z",
     "shell.execute_reply": "2022-09-16T08:50:27.101654Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAi8AAAGdCAYAAADaPpOnAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjYuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy89olMNAAAACXBIWXMAAA9hAAAPYQGoP6dpAACcVElEQVR4nOz9eXxbh3nmjz4HB/vODQRIURK1S5Y3OaFD21lr1WxaN2k7d9o0/qTJtMmNZnpvW6fT1r/7a1RNZurJdElz244zmZn80hmn28xtx3Hb4a3jpEnsKGFiWbG1WCu1kQBBEvsOHJzfH88BwZ2gRBIg9X4/H5okeAAcULLOg/d93udVdF3XIQiCIAiCsEkwNfsEBEEQBEEQVoOIF0EQBEEQNhUiXgRBEARB2FSIeBEEQRAEYVMh4kUQBEEQhE2FiBdBEARBEDYVIl4EQRAEQdhUiHgRBEEQBGFTYW72Caw11WoV4+Pj8Hg8UBSl2acjCIIgCEID6LqOdDqNnp4emEzL11a2nHgZHx9HX19fs09DEARBEITb4ObNm9i2bduyx2w58eLxeADwxXu93iafjSAIgiAIjZBKpdDX1zdzHV+OLSdeaq0ir9cr4kUQBEEQNhmNWD7EsCsIgiAIwqZCxIsgCIIgCJsKES+CIAiCIGwqRLwIgiAIgrCpEPEiCIIgCMKmQsSLIAiCIAibChEvgiAIgiBsKkS8CIIgCIKwqdhyIXWCIAjC2qBVdYyMxhBNFxDw2DHQ3w7VJDvjhOYj4kUQBEFYwPCZME68eA7hZGHmtpDPjuNPHsLQ4VATz0wQpG0kCIIgzGP4TBjHnj81R7gAQCRZwLHnT2H4TLhJZyYIRMSLIAiCMINW1XHixXPQF/lZ7bYTL56DVl3sCEHYGES8CIIgCDOMjMYWVFxmowMIJwsYGY1t3EkJwjxEvAiCIAgzRNNLC5fbOU4Q1gMRL4IgCMIMAY99TY8ThPVAxIsgCIIww0B/O0I+O5YaiFbAqaOB/vaNPC1BmIOIF0EQBGEG1aTg+JOHAGCBgKl9f/zJQ5L3IjQVES+CIAjCHIYOh/DcU0cQ9M1tDQV9djz31BEMHQ5Bq+o4eWUaL5wew8kr0zJ9JGwoElInCIIgLGDocAhHDwUXTdiVADuh2Si6rm8puZxKpeDz+ZBMJuH1ept9OoIgCFuKWoDd/AtHrYlUq8wIwmpZzfVb2kaCIAhCQ0iAndAqiHgRBEEQGkIC7IRWQTwvgiAIW4CN2ADdaDBdJFXAySvTso1aWDdEvAiCIGxyNspA22gw3Wf+7ixi2fK6notwdyNtI0EQhE3MRm6AXinArsZs4bJe5yLc3Yh4EQRB2KRstIG2kQC7xZg5lxfegBa7DuTjQCkHVIpAVVv0PpIjIyyHtI0EQRA2Kasx0A7u7liT56wF2M1vU7U7TJjOV5c/l3QFIyPfwWCwCqh2wGIHzHbA6gZsHkC1ACYzhi/nceJrYwinSjP3l9aTMBsRL4IgCJsQrarj1cuTDR27ZhugK0WglMVQMIuj/w8LRq7GEU3lEDAXEMnp+LU3tq18LpOTgDkOmK2AyQIoKqCaAasHcLZjOOLFsX/MLqgmhZMFfPL5U/i1x/fil9+3VwzAdzkiXgRBEDYZixl0l+O2N0DrOlBMA/kYkI4CyRtA4iaQnYBazmNQB2AuA7qOz8f2NXYuoV6gsxOolADogGJi60gBtOwUTnwb0GHCUo2oz33tEv5i5CZ+5yelCnM3I+JFEARhE7FUwu1iKOA+ompVxwunxxobWy4XgHwCSFwHkreA1BgQu0YBUynPckqaWD0x26FZnPiL6A6wObTUY+sIOoCBoAVQzIDZxfsDQLUKVEsYGdcQzqsrvq5Iigbg5z58BEP3ioC5GxHxIgiCsElYzqA7HwWUEvmyhg//1+/N3L6od0QrA+kIMH0ZiI8CmSkgFwMyEaCYYnVEMRmiwwk42gCHHzCpgK5jJOZBpGRb8Yw+FLgGNTIN2Nx8PF0D9CpgdgCOdkTLnlX9Pk589Yc4uscN1bG6+wmbHxEvgiAIm4SVDLqz8TstiOfKSOQWH1t+7sNHMNRXAWJXgfg1IDcF5OKcBMolAFRppPX2AXYP4A4A7i5AsQDlDKBpQCUPlHOI5hubBNqp3wJiEcBsA+w++lysNqCUAQoJBIptAHY29Fg0AGsYefMsBvf1At4eiinhrkDEiyAIwiahUePtv3rvbvz/Xru16M9qjZ0Tf/sajg5FoGYiQDYGlHOsglidQMdOQLUCNi/QsQtwdVHUZKeB4jRQrVBwVIpAtYyA6m/ovAIuE2BSgEoByFaASg4ouwCbD3B0YMCpImSvIFJQoa+YJkMimQqFVyEJ+HpZFRK2PCJeBEEQNgmNGm/bnVZEUsUlf64DCOcUjFwcw2BbiiPKti62b8w2wOkH2ncDWgWYugSMn6aw0UpAIQWU85wSsjgAqxPxqgMm6KguITgU6Ag6gYEH3w4UpoDUOJCdogAqpumxKWWhujtx/KESjr3qwPL+mTqf+XYaDqsVQ7vAClI+Afi28TUJWxYRL4IgCJuEWsJtJFlY1PdSM+i2u6wNPV606gPsJlZYzFZAtbH1kpsCzn4VKCRYXSkbVRYdrMgoCmAyAUUrhtM78a+u7V7Gh8OfHL8/C1WxAL4+IHCIJt30OBC7AiRvAqlbQHYCQ45xfKL/Hvyn0c6GXkMsX8Wxv5vEcx/oxdAO8JxLGcDbCzjbl7zfRuyCEtYPES+CIAibhFrC7bHnT80YcmvULrvHnzwEX2PaBZ1eJ06mXYhGdQTMeQwor0PNTQKlLKsuWpEPrNooWlSVFQ2rC7A4oCkWnLgwYJzH4hd+E4A/OXgOQ7YYELayWmO28TFc3cD2R1h9mTwPJG9Cy8bx1TEXGq281DjxcgRHP7kfql5iCyxhJPm27VzghdmoXVDC+iHiRRAEYROxVMJt0GfH8aFdGArloU1dRshRRSSvLOodUaDDb6ngU691IFKut6JCaheO+/8RQ45w3VRrcwEWBsjB2Q64OjlpZPNiZMKEcKm84PFnU4WCNmuFraZSHNDyQFVnQJ2ZibqwuABnJ+DfjZGIhnDJsarfiQ4gnNEwcnUCg3u6aQTORjkpNX2ZLTCVl7ulRs1njMxPHREBswkQ8SIIgrDJGDocwtFDwXrbwwEMtGWh5iNAOAK1kMTxexUcG+mAAn2OgOH3QLxsxvxLQETz4tj0P8Nze36Aod4ihYorQA+Js40R/iYzvS/lHKI3pgEsL14AIFr1A14zQ++qGg27RcM7U8rRbJseBxQF0UT/bf9eotMxYJuNYqi9H0jcYBVm+hLQsQeaYl52F5QC7oI6eigoLaQWR8SLIAjCJkQ1KRjc6QPSOSAzCSSngXSYmS0mK4ZCaTx3eBonLu5AuFSvrgTVFPJVMxK6E/PbMjoUKNBxIvx2HH1yN1RvkH4Y6BQb+QTNtoUEUM4hUC0DWDljJdC3h6LCpBripUgBpAAoZnn+mQhQTCNQWHo/0orPY6swo8YNJgF7e3m+lQIwdQkjyfYN3wUlrA8iXgRBEDYbug7kpnlhLqaMzxmaaKsVIDYKlAsYskRxdPs/YiTdhmjZiYApg6pqx4cn/vnSDw0F4SwwEjVhUL8JJMeZtFvOUgToRqS/2YYBnwMhhxORvGmJ9hQQdJsw0GOlqKoUuYzR4QegA6U8/TRtO9imKqQwkJpEaLSMSMHc8Li0Ah1BexkDzimg1AXkVFaKkoaAyUwAWhHR8PWGHm/NdkEJ64aIF0EQhM1EOc+qQjEJZKJAdpKR/loRKKRpUk1H2DLRK1BhwqA9C7jtQHs/Xsg/AEys/DTRK6eA9CTbOoCR++JhOq6jE7C5oFqcOP4jnPZZ0kD87jaoTiN9VyvTDJyZoJAxG0bgXJwTTDYP1MBuHH9PBseGUwtaXouhzJ5mykWNJ9bZ3rJ7uN7AvwNIhxFwLD0+Ppvb3gUlbBgiXgRBEDYDus6LfjpCj0jyFlCIU7jARM9IahxIjjH5VjVGn20eoK0f8O8ETAoC6cai9AOmDL0j3l5e/L09bCFZnRQaBkPbgOf8C6d3grXpnXuCrNiU8xQu5Ry/1jV+X0zzw2Tm9yYVQ9vb8NyPteHEt5MIZ+ptJJfCVlO2Wh+nCtpKOP62KoaCJaDaBRRixm6ECrNpHD5WYPw7MdBXRcgdRyRTXXbUfKB/6RFroTUQ8SIIgrBGrFt2SCnHSkolDy0+jpHL44hmNQQcKgY8BaiTb1HUlNJs6VjdgKOD6bjugJHLYgFUMwb8aYQcvmVaPTqCLgUD990D+Htp2LUsX4lYYCCe/9otDn7Ucld0nQKmnKNwyRm7lApJoFwCCnEMOas4+tMhjKTaEM3rCJgLGNDOA/GrGJm0IlqyIFCdxoA3BhW7AP0gfTQWFytQOjjuDZ1tquQNqG19OP7uNI79/fSyo+Zi1m19RLwIgiCsAYtlh/gdFnzs0X788vv23N4FcXa1pVzA8KlLOHHajXCxZ+aQkLkdx9uuYsiapGjxBIH2nYDdC5hsADSOJsMEqBaoTj+OHyni2KuORSaR+N/jQ7ug9u2dGS9eiVWLNkVhBcfq5ESTfwe9O7kpIH7d2GBdgpocxaBWATp6GG5nfh8Q6cKg7xYwdZn3KRWAqQus2nTtYytKr/J76Hwus9G2So1h6KF9eE6/gBPfSsyp6gQl52VToei63thGrdvgW9/6Fn7v934Pr732GsLhMP72b/8WH/zgB5e9zz/90z/h6aefxtmzZ9HX14f/8//8P/HRj3604edMpVLw+XxIJpPwer139gIEQRAaYKnskBp+pwX//qfvXd2FsVJktSWfAFJjGH4zjGOn+xYEwtU8H89t/waG+i3MZTEb8fqlPGBxUoSYrYCjnRM/WhnDE16cGDEhnK2fdchnw/En71nVea554Fu1St9O/DqQuGZUZqYpQtr30Nw7fYVeltgV+nJy0xQsniDQfQ+9LoUUJ5tcXay8tO1gwJ7FBdj90JK3MDJeQhTtCHR0SMJuC7Ca6/e6Vl6y2Szuv/9+/It/8S/w0z/90ysePzo6ih//8R/HJz/5SXzlK1/Byy+/jF/6pV9CKBTCE088sZ6nKgiCcFtoVX3J7JAaiVwZn3z+FL7QaABaLkafRpaVCC0VxonzhxZNsp0Zb554FEcPXIBqsTMeX9cBsx1QTaxumI3Wj90H2P0YCjlx9OE2jEQVRDIaYtkS2t02+BxWaFW9oQv5ugS+mUyAq4MfPfdTxEye5/bryfOsRHXup6fHbAesN+lriV3jigG9yvUDrnYagRM3+StLGasJylnAbIXqCWBw2ySg5IEOBxdGCpuGdRUvP/ZjP4Yf+7Efa/j4L3zhC+jv78cf/MEfAAAOHjyIV155BZ/73OdEvAiC0JKMjMaWzQ6ZzYoBaNUqkLxBM25mkpNE+RhGUm0IF5fO/NehIFy0YWTaiUH/NC/sVmNbs80D2JwULVY3ty47OzjZAyB5K4zPDl9AJDXLbOu143d+cvnKyXKibc0C30wqfTv+PiB6Hhh/neJl/DXA08vX1G4xKksOHpNi2B30vfUN09NXeVImC+DpZmXHHaIBuZjiKoHO/RROwqagpf6kTp48iccff3zObU888QROnjzZpDMSBEFYntVkgtQC0BalUgQm3wImzhlVlyhbHyYropPRxs6lqLA1ZG+j0bZ9B9DRD/i2MyK/+zB3/dg4cTR8JoxPPn9qjnABgEiqgE8+fwrDZ8JLPtdKom124Nsdo1qA0H3AgZ8AQg/w0WstJV0D3EFWaroOcTVA4iYweQlIhmk2drYxZTdxndWsqg5kwmwnmSychkrevPPzFDaMljLsRiIRdHd3z7mtu7sbqVQK+XweDsfCfRfFYhHFYn12P5VKrft5CoIg1FhtJsiiYqeQAiYvsOJSyXNaBobpdOIMAuW2hh57Cm3QLAWo7Tu5K8hspYhxdiyoKmhVHb/1N28u+3jP/M2bS1ZOGhVtaxr45uoAdr0b8PQAY68BuSinmEw2joU7fYB6AIhdBtK3KGwU8HfhDrAFVdU4lu3s4O/b08N2Uz5GUbfMJmqhdWipysvt8Oyzz8Ln88189PX1NfuUBEG4ixjob0e7y9Lw8QvETjoCjJ0C4qP0YxSMcefx13mBzicxoP0QIXN6xpy7FJ85047HXtqG4QkfWy2BQ4C7a0a4aFUdJ69M44XTY/jSK6NI5JbfSxTPlfHdq9ONvY5GX++dYrYBwXuAPT8CdOwDTFZ6fExmVmhsTqBjL+AMcOVA7ApQTACKheIndYvLGgsJ+mOykxQ3gCEeGwuyE5pLS4mXYDCIiYm50Y8TExPwer2LVl0A4JlnnkEymZz5uHlTSn+CIGwcqknBTz3Q29CxfoelHoCm6zSZjr3OgLlKge2Mcg648L+BlBFGV0xD9YdwvPc0ACwiYOZ+H8kw8XZ4tDwnTG74TBiPffbr+NB//i5+5S9P49/9w/mGzvnklcXFy0B/O0I++5L5two4dbQugW+KAvi3AbvfC7Tv4pSRSWXOi2qjkbe9n+2zfJwtpEKCAsbqZVspfh0opKGVCzh5NY4XrlRx8mYO2vQ1/tkILU1LiZfBwUG8/PLLc2576aWXMDg4uOR9bDYbvF7vnA9BEISN5PFDwYaO+9ijO9mC0XVg6hKrK7kphqlZ3GwdXfoaU3Nzk4CqAr4ewOLkosVD5xC0leY96vzpI3LixXPQqvyuNhXUqLF4LotfyFWTguNPHlrkDDYw8M3uBXa9hwLG1cEWWTEDWGz0uni3s61USrKyVUzOhPUhPorhsxE89n9F8KG/volf+fsIPvQ303jsP1/F8PcbE3ZC81hX8ZLJZHD69GmcPn0aAEehT58+jRs3bgBg1eQjH/nIzPGf/OQncfXqVfzGb/wG3nrrLfzH//gf8dd//df4tV/7tfU8TUEQhDtipSoEALQ5Lfjl9+2lcIm8AYR/yHh/6JwKuviPnKIp51klsPsBq4+tEHcX4OrEUCiHV47ewm8/kF/2fGabZRsZ5V6OwV2dS/5s6HAIzz11BEHf3NZQ0Ge/vTHp20E1A9sfBoL3c2Ta38fWm9kKODyAswtQ1PpG7HIasLgwHPHg2KtOhLNzt1hHMlUc+5tRDL8+uv7nLtw262rY/cEPfoD3vve9M98//fTTAIBf+IVfwJe//GWEw+EZIQMA/f39+Pu//3v82q/9Gj7/+c9j27Zt+C//5b/ImLQgCC1NrQpx7PlTC2LnAVYinv3pe6FCB26OAPFrbAnZvABU4I3/ARSmgWLW2MfTRp+K1c70WZOZYXPeHqiqBZ3tfgArezOi6cKqRrnn43da8I7dHcses+JqgI2i+yBgttA/pGtAYowJvp5uYw1BihNcFjs0RcWJy/cvkZtjjHn//QUcvXc7VLO6sa9DaIh1FS/vec97sFyA75e//OVF7/P666+v41kJgiCsPbUqxJJpswe7gNFvAukwfRieHibDXvjfnCrKJ9nuMDt58XV1A94QABPg387UWLMdCN2PgNsLfP27K55TwGO/o2mff//T9zYkQlSTgsEVRM6G0LGHnpeb3wMqZW7dtrpYjZm6xM3biZsYyYZWyM0BwhkNI+cuYfC+Axt3/kLDtNSotCAIwmZmySqErgGj36IxNzsNdO5h9eXSy5yUKaQY618z2Lbv4fd2P7c6W2wUO6H7AasTA34dIZ8dkWRhxe3It5OzEvTa8Ds/ubo1AS2Dv4+ttuvfoYG3mOZYdFsFmHoLKOcQzaYbeqjo9DQ9NDb3Op+0sFpEvAiCIKwhC6oQWgW49i2O4eanmeQavQhc/yZbGfkkjadVjQFr7TvYNvLvYLXF0Q507DbaR+rMcyzVpppvlq35cVYSOr//z+7HVLbYvLbPWuIJAjsfYwVr6jInudp38PPURQTKS4fvzSbgUhleJ+m7LYf8aQiCIKwXlRIrLvEbnCry9wPRc8C1b7ICk4uxwqLrDEfr2gt4e9j+8AaB9t3QQkdwMu7DC29EcPLK9MwEUaNm2Uangh7d24kPPNCLwd0dm1u41HAHgL5BJgrDxOpW1wHA04MB2/Vlc3MUACG3ioFeBwVPujGxI2wc67pVuhnIVmlBEJqFVtXrLSOnCQM4DzU5SnNu205WAW58h5uQSym2hUwq9+x09LPK4tvG8Wh3EMPjDpz4h4vLbmye85zLVE3WfPvzZmHqCnDt2wynM5kZanfrexgOu3Fs8qcAcDdUjZkt3e9vx9DBDpp9AaBzH/0zwrqxmuu3iBdBEITbZLZwuDaVw1+M3JizJyhkr+D4oSiGDvqB6Wu8iKbDvCA6u5ik27YDaNvOykvbLlZcvL0Yvq7g2FcWbmyuXWZvZxS5UaGzpahWmZ9z/RUG/1mcQCkPhF/HcNSLE8kfQ7hcFyUhaw7H70vzd+sNcuFjJQ9YXEDXvia+kK2PiBcRL4IgrDOLVTLmM/Mu/sExDOX+jhujqxWGqalmhqu5AzTldu2jsdS/HZrNj8c++/UlH7vmU3nlN9+39cXHWqCVgYmzwLVXOS7t7KKXZeIstEIKI7ZHEG1/CIHiNQyYL0E1Ozh6HXqA1ZaqBig6fUey+2jdWM31WzwvgiAIq6TRxNpaO+LEmz5osVFeRJ2d3M/TuZ9fd+wBeh4APCHe5mjb2I3NdwOqBejaz83Udj9H1H3bgfZdUE1mDFZfxwfM38Xg/j6odg9H2dPjwNQFis0a6TArOULTEfEiCIKwClabWKtDQbjiwecyj+Ok6UFoVi8Q2A84/EYy7L2svnTuY6Q9mrSxeatjcQDBwzTtWuxMMW7bDrTvZBsvcY1LHLv2czQ6dh1IR1mhgcapMa3ERY5C05FRaUEQhFVwu4m1f5I/ij/JA6F4AcftYxh6x4OA3c0Wkm/uYsembWze6jjaKGBKGWDqIktY7iC/T0eA2ChDAr29QPwKkBjlmgFnO3ci6QAyE2zvqXL5bCZSeREE4a5Fq+o4eWUaL5wemzOGvBx3Wu2IlGw49sZuDN9SAe+2BcIFaPLG5q2ObxsQOMDU4nKW6wOcHRQoiRtAJgKYFMAZ4Hh1egKInKF4qeSZHSOj001HpKMgCHcltzs6fKfVjhkfzCtZHH2sE4ttzllNCJ2wShSFraN8kn6W2FWgfTeFSqXMisy2txuLHf1AaowTR/GrrMhoFXpmXF0zbT5h45HKiyAIdx1LGW7DyQKOPX8Kw2eWfmcdz5bW5BzCqdKyhtuW2Ni8VVEtNEm7uhgKqBUA3w6KEa3M9pHFCah25vBkw8DEW4BeMXJfdIoaoWlI5UUQhLuKlQy3OoBn/uZNHD0UXFDZ0Ko6PvP359bsXF46F1l2oWHLbGzeitjcQO8RoJzn/iOvG8hFgcwkx6k9IcDmYcJuLsbVDWOngG0Pc5EmIHuPmohUXgRBuKtoxHAbz5XxJ1+/dFv3JY3NIr1wenxFn01tV9KWiu5vFbw9zNrx9dG0G7yXVRm9AiSuA1Y3YHMCVgeQuEX/S3oMqBSBqi7elyYi4kUQhLuKRg23/9er1xYIi0bv61eLcCnlFY+bzi7fOhI2gND9xvbubTTkdh8CqgqXaOYnAVeQLSS9BOQS0G6+jpMRBS+cncLJq9PQcolmv4K7EhEvgiDcVTRquE3kywuERcDRWEXlFwKj0E2LWXEXIlktTUY1A9sHAKsTsHmZvusJ0Jgbu8Zt0q4uwNmF4TEVj518EB/6uzx+5RtlfOhvpvHYH353WY/UlqQFgvpEvAiCcFfx0I62JUeQ5zNHWGgVDNhuIuTQltlGrMNvLuL/Gz6AnNbYP6+S1dICODuAwCHmwFRLQNdBiplCApi6BPh2YDjZh2NjTyBcss25aySjrWjy3lJUNSB6lmPlTRQxIl4EQbireO16vOF03BlhoetA9DzU5A0cv4cJq/MFjAKdtyjmOVuKl0KyWlqMwCHA1WGsb7AC/p3MdkmOQZu6iBPX7zH+xOf+2db+Fpx48VxDOUGbnkyUI+alHKtSTULEiyAIdxUN+1YclrqwSFznnpt8AkM9BTy35zUETak5xwctefza7igS5cbaRYBktbQUJhMniWwumnbbdwGOdqCcx8h4EeG8ivnCpcZds2tKq9TXI3i6m3oqMiotCMJdRaNtmo89upPCIhcHxl/nNIpWBJK3MFT8Fo76voIRfT+ill4E/F4MbHfj75R3AldyKz6232nBv//peyWrpdVw+IDue5j1ko0CnXuBShHRyZXN1wAQTeXX+QSbTHaSCcNmB1tsTUTEiyAIdxW16P1IsrBk+6jNacEvv28vL2I3v8sskHwSKCSB698DcjGoqgmDjhjQ0Qb42oFd70Ig1wNg4Yj1fP70Q0fw6N7ONX1dwhrRuR9IjjHfRTcBrk4E0pWV7wcgYNnC5mutQkEHAJ5gc88F0jYSBOEuoxa9DyzeBFAAPPvT97Lqcus1CpbsFLM9rr3KIDMAsPuA9h2cTNn1bqBrHwbu2Yug17bIo9YfO+Sz4x3LBNMJTcZkAnofYvicyQS078ZAewEhc2ZZo3bICQy05+mP2opko4Be5di4w9/ssxHxIgjC3cdS0fuh2dH7U5eAxDWmr5bzwPXvMBJeqzBt1dtLc+f2R7ip2NuDl85FUKgsPYGhA/i5t/et74sT7hxnGyeOnG2ArkP19eD4tlMAFjdqA8DxA7egVnJAPr7hp7vuzPa6uJvrdakhbSNBEO5Klo3ez07R51LVgHwCGH8DiF9jK8HqAVyd/Ed829uYEeLrndmXtNL77s997RL+8vs3V1wAKTSZwEGK1XIe0IoY6s3hOf3bODH+EMJl18xhQUsWx4Pfx5CtCEStrMg5t9gEWYtVXQARL4Ig3MXUovfnUC4CN07yH+tCkkv6pi5wNNTsoKnT30dj5653A75tK+5Lmk/EWAApCxZbGJPK9lExxY3TdheGeuI42v4PGEm1IWrbhYC9ggH7dajpcSBnAcJvsiLnDVHEbAVasOoCiHgRBEGAVtVZgUkVEMhdwIAzC1UrAPHrQOSHvICpZvog/Ns5Rrv3KNC2A8Bqdh4RHfS/nHjx3KILIIUWwdUJdO4DSnm2g5wdULUSBv0pQP8B0L4XqPrYWixlDEP3dyhut4p4WazqUkhxaaXSvL+3Il4EQbirGT4TxokXz80RHyGHC8f3xzCUOQ2kJ6k0zE5elHx9wL4f5Ritwe1E/M/OBllus7TQZAKHgOQtCtjULe5AykwYRu4JihR3J5ABj8lGgav/xAqM3dvss78zKkWG0gH1CaNyHpi+AljsFHYNrsFYa8SwKwjCXUvNpzK/ahLJKzh2ejuGJ3z1d53ebgqX3e8DQg/MSRe9k4h/2W3U4qgW/nk72wGTFaiWGV7n7AQyk2yrQAFUlUKmkOTF/cZ36JnazKTGAOj0edUqSbFRYPoSW0lK8ySEVF4EQbgrWc6nwnh/Hb+V/hl4/EW8w56C2r4L6HsY2PkoW0izeGhHG0wKcDvp8LLbqDWZaSWmCwh4bBjw7YBaSPHC7QwAShWodgGpm4A7xDZKLg6YzGwjjb9Osdt1sKkx+rdNIUUhBgXwbeNt2el6JcbRIW0jQRCEjWZln4qCBNz4cOITCGXzOB7IYmj/EMvl83jtenzVwkUBEJTdRi3Joq1ErxXHHwhhyBYG8tNsH0Gh16WU4R4kkxVA1Wi3TAHR86zatfc37bXcFrpuVF3AjdoWOytMqTGglKYXyNXckMVNKAcFQRBWj1bVcfLKNF44PYaTV6YRSTYe5R4p23FspBPDl7OL/ny1rZ/a+1XZbdR6LNlKTJVw7FtmDGf2cmS+kGDFxbcNyMcA1cRKhF5hO0UrA5EzbK8kbzXnxdwu2Um+RpO57nVJjQFaia0wu7/pI9NSeREEYcuz2Dvpdpe14fvrUJadDlpt6yfos0vOSwuyfCvRmBB7sw1HB7uhZidYlXB2Ab4skAoDNi+gWAG9xOkkmxeYukjfjGoF3IENfkW3gVYG0mF+7e2lIbeYpkArZvgarC7AvHSS9EYg4kUQhC3NUuFx8WzJ+Kp2WVqe2dNBA/3tc8LtHtrRtuK+pHaXBb/9E/cg6J0Vhie0FCu1EnUA4Swwou3GoDIBJG4AfQOAVgByMVYmdM1oIalAIU5R076blQvV0vSFhiuSGjdM6i6alHW9XjlSzYDFwcpLkxHxIgjClmWld9KY+UljAgYAvnYugqf/+vRcP4TPjp+8P4QvfmvUsPrWqT3q7/6UbJFudRpt/0WtfYA1BCRv8qPrIH0ukdOcytFKABQu83QkKAg6djE3yGRhXlArUsywwgIAvl5+zkywhQQTQxqBlsiwEc+LIAhblkZMufWPxvivr15b6IdIFvDFb43iE+/qX7AvKTh7X5LQ0jTa/gv07OT2adUCTF9lRaK9H2jbySmdSglQVP61SkfYhqlqAHQgdoXHtBrVKitJAODsYGuolOP5A5ymMhkCZhHT+kYjlRdBELYsq89QqdVMFooZBfRjLjZVVKvbfPWHYXzzX78Xr12PL9yXJLQ8A/3ty7b/ZibE9vYA8fuZ5xK/AkTeAHY/ThNvbgooFegTMdu4biJ2lWLH3wdU8vy+bWfTTa9zSI0BWpHeHG/vLDGjs9JS25bdIucslRdBELYsq89QqYmM+ZuDecty49A1T8xr1+MY3N2BDzzQi8HdHSJcNhGqScHxJw8BWChfF0yI+bcDPQ/QA5K4zryX3iNA2276XqoVXvC1Cv0wE29SGNj9AHQgPsrbW4FCiqILYDaNSWW1qJLnxJG3l2IMaAm/CyDiRRCELUztnfTq5MPCNlLQZ8e/eHRnQ/eWxNzNzdDhEJ576siC9p/PYcGvPr4XRw8Zo8OqBQjdB7T10+A69jqTaEMPUgBAB0opChm9CkQvGAF37WzLABQ9mcmNfYHzqWr07QBMDbZ7KVSyRhidfztQygLQW6ZlBIh4EQRhC7PcO+mV+OX37sbnf+4B/MXH34FXfvN99YvWCkhi7uZn6HAIr/zm+/Brj++D32EBACTyZXzua5fw2Ge/juEzxiixOwD0vQOwuoFsBJg4AwQOAN0HKVAqRVZg8inmv9z8AZC4SXHjMsamU7fqqbXNIHmLBmPVZrSLtLneF7uPY99Ay7SMABEvgiBscWbeSXtWZ/F7dE/XnNbPSlUcBZw6ksTcrcFL5yL4o69dRCJfnnN7JFnAsedPUcAoChDYz2kjKMD4Kabt9g3SwOvo4Lh0tUzza+wK20XZSU7zeAwTd2qsOQImn6hPF/m305C7mJhpsZYRIOJFEIS7gKE9TrzyIQf+4l0xfO7+cbSreShLJLIsJUJW5YcQNjUrj9gzsFCrGmbWHY8yvyWfBMZe42TO9kEadFUrxUBmgvuQrr0KJMcYBucJAu5ZCbYb2UKqFOvtInc3x7dzsXliRjX2G+mA2d4yLSNAxIsgCFudahVI3ISaiWDQF8dP2V/H7zr/CgAWCJiVRMhSfggZh95aNBRWZwQWAgDad9LrolqAyA9ZvQgcBEL3c6qoUgB0BUhNAJkIdx7NpNiGZgmYW0B2aj1fGtEqnHiqVrh7yR0EyvlZYiZYz6IpJPi5haougIxKC4KwCZm78XfxceSZYybC6CyPA8kMphJAIBrFUYzgOWcFJ4o/i7DmmblPI7H9Q4dDOHoouOLzC5uXhsPqasdZ7MDOR4DJ8xQAN7/PttC2t9H4mp0y4vVTnE668V2KGmcnYHVSwEBndaYmINZr8aGuA/FrFFSqFWjfRUNxbJSfbd76PiOtUs+kaSG/CyDiRRCETcaiG3/niY7FjgG6jY/dCCkfwPG2l/DK4W9hxPMjiHa8HQGfq2ERopoUDO7uWNsXJrQMDYfVzT7OEwJ6386R46kLwOQFYPvDQPA+tmNunOTCxswE9x/dHKFA6drH+3t7KCyyUQoYvbo+u5ASN7gZWlEpXExmVmG0In0u/h308gCGUVdndcbiWPtzuQOkbSQIwqZhyY2/s0yUSx0z53i9Dcdi/xwvVR/C4Dsew0880AcA+Ls3xnHyyjS9DMJdy22Zs00qxYpvO8ejb/2Ae422vY0iwb+T91TMQCYMhH8IRN+qT/IA0Dw9ODntxAsXcjh57iq0ZHhtX1g6YnhaFFZ+LA62r4opCqv2fqYF18hN87Oz9YS6VF4EQdgUNLLx93e+ehYLnSyLHa9AgY4Tb/Wguk/DZ/7+68tWcoS7i5o5+9jzp5bcVbWoL8rVQaNuOsIMl+g5tmB2DNIHU0rRAFs2zLLXvsWWUe9DGD43sbCi6I7j+I/GMDRwz52/qOxU3Wfj28Y8l3yclSCA49uzqyulHEPqoLSc3wWQyosgCJuERkyUkVQRkVRjfgUdCsKZKv7ln7++bCVHuDu5bXN27xFWWhQTMH4amLoEtO8Beo6wTWR2ADYXp30mzgHXXsXwD84vXlHMVHHsb65h+Htv1uP5b4d0ZJaXJsDzyMe5KLJ2m3PeiH9t6sjum1uNaRFa74wEQRAWYSOTa2uXid/56lkcPRQUM+5dym2Zs61OYOdjHH1Oh4GJ88xL6X8UmDzHwLpKHrArQCkH7dorOHF1N/RFagm1iuKJl27h6C4H1I5+tqdWQ/IWc2UAjkR7eziSnbrF2+x+3jbnifV6O6sFW0aAVF4EQdgkNCO5NpIq4k++fnnDn1doHWrm7FXtquq+B+jcR6Pr5DkaeM12oP/d9QqHowMw2zESdyGcX/pSrAMIZ6oYGZ0Cpi4C5QZFfG2qqCZcvNsoUlLjdeHi7KT3RZn3mgoJjlGbLMysaUFEvAiCsCloxEQZ9NoQdKsNuF4a53NfuyjtI2F1qGag/52Aq4uTRlOXOYrc8yC3S1tcgJYHPCFETV0NPWQ0r3C8eeqiERy3DKUcN17n4wAUThC5OjlpVPO4eEIM0ZsvXID6wkhn++I/bwFEvAiCsCloJOH2d350B37nUZdx29oJmJk0VUFolPZdQNcB5qNMnaeYKGWAXe8yYvfLgKIg4LE19HCBnp3coaRrHG1OTyw8qJznz6YuGOPQxgSRxUnRU5se8m2vZ7nMRyvX1wE4WnfVhYgXQRA2DcuaKH/+AQxtK2CobQzPPTSBoJpZs+edk6YqCI2gKED/u+gZKRmiYvItCpqufYC9EyilMOBNIGQtrLyuYncA6NhT96CkxymIKkXuKIqN8vFrVRlHG5+rUqKYKefq2S6uZXwsM9kurpZaBzAfMewKgrCpWNJEmR4DYgkgPY4h5TyOtp3El1NH8JnSz67J826kYVjYIniDQPBeVkGmL7Pi4o0wDyYdBsZOQS1ncXzvNRw7ux8KdOiz6oo1QXN80Ap1+iLXD6g2wOwEkjc4LTT+OltAVifvZPfze0XhBuuSUUWxebmvSLUsf84tnO0yG6m8CIKw6VhgotSKzLGYusAleBNvQC2l8FH7txBSU8u+q3XbGnsP1wzDsLAF2PlOmnOh1Ksvvu2sgLi7gUoRQ47zeO6Bmwha5grkoEvBc+8sYahtjJkxU5eA+FUKEpuHKbzVCjdSV6uAt4/G4FrGTK115OsDOnavLFxKWfpqFFPLrQOYz4aIlz/90z/Fzp07Ybfb8fDDD2NkZGTJY7/85S9DUZQ5H3a7/KMhCHcjWlXHySvTeOH02PLJt+lxZlkU08C1V4BcHNA1qFYXfrIzOufd7Hz+w8/ch6B36X9jltoyLQgN4fABoQdmGWYnOQXUdRDoPgSARtwh7zW88u7z+ItD38Pn77mMv/iAF6/8+rswNPggJ4JcndxFVMpTrJQyFD/2NgBVippr3+Zjl3N8bpuXraNG9yTVzLx2/+pHsjeYdW8b/dVf/RWefvppfOELX8DDDz+MP/qjP8ITTzyBCxcuIBBYfG+D1+vFhQsXZr5XWtTtLAjC+tHIDiMAFCz5ODB9CZi+BiTGaFxUbRg2vxtfjOxe8jk+8a5+vP++EEwm4NjzpwCsIk1VEBplxyOshBTTrL7YnNyD5A0B/m0UI6lbUEMPYDBYBso3gKoJSLZx5NrXxypKMQ0UM9xDVMPqBIoOCo9qmeFyth30x6zGs1Iu1P0y67FTaY1Z98rLH/7hH+LjH/84Pvaxj+HQoUP4whe+AKfTiS996UtL3kdRFASDwZmP7u7u9T5NQRBaiEZ2GAFglkVqHIjfAAoZYOwUUEwCUKDZ/DgRe3zZqstXfxiGVtVvP01VEBrB6gD6Bji9k52kwTZ+ld6UwD1s9ShmVk3sPlZM0uNc7jh9iRNGjjZ6VroP8T6d+ylsOvcBvQ8Be58Atr2dWS7VMhC7wudplJmqi6/lljAuxrpWXkqlEl577TU888wzM7eZTCY8/vjjOHny5JL3y2Qy2LFjB6rVKo4cOYLf/d3fxT33LL7boVgsolisq9BUKrV2L0AQhA2nkR1GJ148x+TbQhwopPiP/vhpoBDnqKfZgRH7IMKl5cdQa1NEg7s7bi9NVRAapedBIPIm812mL3N8uWMPVwX4dwCZCJCfpmHW2c4W0dQltnx0nR6ZminXbAVgXfgcdi//f0jeYnUmPgrkvDQKL1eFqRTribruJUaoW4x1rbxMTU1B07QFlZPu7m5EIpFF77N//3586UtfwgsvvIDnn38e1WoVjzzyCG7durXo8c8++yx8Pt/MR19f35q/DkEQNo5GdhiFkwWMXJ1i1SV2hZMb8avQClmc1A7iBTyGV01HGnq+2VNEt5WmKgiNYLYCOx4DrB6GyGWMv792L+DppmAxu1iZKeY4VaSAI9DlLCswszZQL4nd8Lm4uwEo3Bg9+Rafq6otfp9MFIDOik9NILU4LTcqPTg4iMHBwZnvH3nkERw8eBD/6T/9J3zmM59ZcPwzzzyDp59+eub7VColAkYQNjGNjiRHJ6OAuVZ1eQPD6Z04kf4VhPU2IAugwVgWmSISNozAfmDiDLNXEtcApw9Q2jk5ZPMA7TuYxpufBkxmwOZmJSWXANxdhhm3QK/McphMbB85O1iFKabYFsrFGE7n7Kgn52rl+ni0e/NYNNZVvHR2dkJVVUxMzE0CnJiYQDDYWGnKYrHgwQcfxOXLi+8XsdlssNkaSygUBKH1aVRMBMwZvhuduozhqXYcS/38qjJ1FdDTIlNEwoZRC65Lj3EiKH4TaDOxKmN1c5eQvx9I3QByUcBiA1ClUdfVwZC5TISLHf07KVKWw2zjiHQhCSTH2EpK3uRknjvA3Ua1qovVTbG0SVjXtpHVasVDDz2El19+eea2arWKl19+eU51ZTk0TcObb76JUEgMc4JwN9DIDqOQx4IBfx6YugRt6gpOJN9vCJfG2jwyRSQ0DXcXELzP8KfE2RLKJ2iSVQD4emjO1cqsmljcrNJUCsZYtEIxMnVh5R1HNew+IHCQyxlVKw29qTEg/AZbSlVt9VUXvbnrMtZ92ujpp5/Gf/7P/xl/9md/hvPnz+PYsWPIZrP42Mc+BgD4yEc+MsfQ+2/+zb/BP/7jP+Lq1as4deoUnnrqKVy/fh2/9Eu/tN6nKghCC9DIDqPjj7mgTp0HJi9iJOllq6hB4QLIFJHQRBQF6HmAYsHmAxK3+Fe3kOTEEQBsexuAKj/io4DZYUT/x4G2HazQVArGHqPLjAZo5HndXUDgEEPyVBuQm6THJhVmQJ1WWf4xdJ2+m6nLrOA0kXX3vPzsz/4sJicn8elPfxqRSAQPPPAAhoeHZ0y8N27cgGlW6Ssej+PjH/84IpEI2tra8NBDD+E73/kODh06tN6nKghCi1AbXZ6f8xL02XH8vR0Yao8C584CqVuIFrc19Ji//N492Nvtlikiofk42ihg8jGgojBUEQp9LqqZKdF9DwM3v0+Hei4G2N30vFjdNORmo0ZYXZrCxtnBNtBKhltFYQvK6qbXxWxjmm4mwsd0drKlNDuNV6vw2NwUzw0AyiZWclZqXa0Tiq43ufazxqRSKfh8PiSTSXi93mafjiAId4BW1eeOLvfaoE69BVx+GRj9NhAfxclcLz6U+ZUVH+svPv4ODO5u7X0twl1EPg5cexWYOEdBYLGz+mH3Aq4uVmZu/YCiQldowLV7OF7dfZim3UqRU0SFRP1xzXYm5Dr8y+e1TF+hkdfq5vNlJurJvFA4ym22M2OmkMRMfKPJzLwaV5cxsr12rOb63XLTRoIgCDVqo8szTF1mr37iHN91VkoYMF1CyJREpOpdNJBOjLlCS+JooxDJRjk6nZ2iITcVoTgoZYHQfcDNYn1aSFFotrXYAauLQqe9n8dmJmjsrRQoeDIR+lssjroQsTgpPgoJPiYUpveqVn5kozT2Zif5OABvd/iZ/+IJctQ7dpnrA9zd9amlDUbEiyAIm4NCku9Wb4wAyXHudqlWoFqtON57CsduvhcKJN5f2ER4gkzLvXGSQiB5HYDC9lDgIFtBbf30vdTWYJhUtnosTqD7XmNSycUQu6pRJSkkOGKtlfgx29hbrQCxa4YHJsicpForCGDbyRTkY1TKFEpmB+9XKfJxKwW2kVxdFFxNQMSLIAibg1SYvf34NSA/xX9Mq1XA2YahRx7Cc+YlPDLzdyEJQqvg8POjaz8Qvw5YvayIpMYBdwhwBQBPF1s3yXH+vS+kAPM0PSmqHQgcqC9RNKkMu3O2U8iUczTz1j4qBVZodI33tbrqwsVkZnXGbDPGpj3cLp2P1ysxsausfNq8XEXQxOWNIl4EQWh9cjG2icZf5z+eWgkolxit3nkQOPQBDFmdEu8vbD7c3Wz75GKspoR/yEmg2CXAaewzKqZpojXBOM4B5CyAcpmVl449C9s3JrUeflcjH6fod+nMf1EtABSKFnUJOeDqZAUoHwdufBfQqyxppm6x9dUkw66IF0EQWpva8sXIG0DiJkvglTJg0gFXO/DQR2cmLBZ4ZASh1XH4WQHp2M1dRr5eaLHrGIkoiMYnEdjdiwGfB6rDaIpqFf4/YPfx/wtFZVvHv8LUnVZhboxJZbvIuQoPmKKwiuMNAVonDcEWR9OECyDiRRCEVicXY88/+hbNilqJvXeHF+h5CNj5WLPPUBDuDE+Q4sDdjeExG06c2olw0UiOfzOOkNuE4w+aMLQ9wMpJJkpPiquLrRyYKCZcSwj3qsbjqhVWWTyrXL5YzLB1BHBM2+7d+iF1giAIt42u0+MSvcB3jaU0k0dVlaXshz/JrwVhM2P3ARYXhsMuHHvVhXBx7ghyJFPFsW87MHxdA9p2UrhXSgAM8+70BeDW9+mHmU+1SuFSzrJK07ZzdRNC1SqQuMGvnR0ULkDTpoxqiHgRBKF1ycWYRxG7ZJgGS1xMZ/MAO94JdB9s9hkKwpqguQI48e3UomsuajWOE6ds0LQq0L6boiU7AXhCTNyNnmVuzGwBUxMupQyFS8ee5bNfFiNl7ERSrYC39w5e4doi4kUQhNZE17m/JT4KxG/xnWOlxH9E3Z3AOz7R7DMUhDVjJKwhnKku+XMdQDhnwsh4gYF1rgB/kIkCHfv5/0XkTeDCPzCxV9f5/04pzamhjt0rp+/OJz3BVF2AeTBNnC6aj4gXQRBak+wkqy5TFzjpUClzoZzdA+wdAvx9zT5DQVgzounCygcBiKbybKHufCf9K7lp/n+x7WHA6uDI9ev/Hbj+HY5dKyZWaqyu1Z1QLgakx/m1t7feLmoRRLwIgtB66DowcYb/ECfGWPbWCoDFxkmJt/9is89QENaUgMfe2HHVKDA9CiRGge2PsB00fZFVkR2P1fNYzr0AxEa5hNHmXt3JFJJ1n4srwDHtFkPEiyAIrUdqjMJl8iJQTNKkq1UAiwc4/DOrG/MUhE3AQH87Qj77krvRFegI2csYCKpAegy4+V2G1lnsQPIG8NY/AIlrwK73cgpJtQBTF4FbIxypXmljdI1ihiZ56FxT4Gsdn8tsRLwIgtBa6DoQfhOI34CWnsDJTDdeyN+Dk/phaL4dwP3/vNlnKAhrjmpScPzJQwDm23UpXADg+IM5qP5t3PycSwCRM0DnPgbdFRNss6o24JH/N9A3QFPv+Gng6jdZyUyFjSmlJSimWbXRq0zR9W9fj5e6JkjOiyAI686C7dDLJd9OXwHS4xi+lMGJsV9AWPPN/ChUqeL45SyGDrdW/10Q1oKhwyE899QRnPjqWYRTxZnbgw4Nxw9GMNRZApyHgOA9jA/QDYNv/3soZKoVIH0L8ASAAz8BjJ/i7ekI/S/d93Bho8XJ8WyblyZeXQfSYa4OAACLizuVmjwOvRyKrjc5aWaNWc1KbUEQ1p/hM+EFO4dCS+0c0jTgrb/D8KnLOHZ2/4Kx0dpXzz11RPYVCVsWrapj5I0ziMZTCJhSGOjUoCZG6Wdp76cBN3qWxl2zHQjdz91EiesUHGYn0HsEaNtB38vYKbZfKyXA1wM4OuqTR7pOQzx0I8CuF2jbDtTWnOo6RVK1wp1I1QpD7xTTmrdvV3P9FvEiCMK6MXwmjGPPn8L8f2SWFCHRt6CNfhuPvehDuOLEwgI6bwn67HjlN98ne4uErUs5z0WkmUkabicvA7kJwNkFdO5hS+jGCFDJAe4ewObkPHUxC6gKlzz23M8R50KSe4kKCR5jdTIbRivyeRSFYsQTnLsLaTEqRe5iMtuBnY+u6UtezfVbPC+CIKwLWlXHiRfPLRAuwKzQrRfPQasa31XKQPQ8Ri5HEa64sJhwqd03nCxgZDS2DmctCC2CxcEdQjYPx6F9IcDqYe5KtUrx0N4PmKxcLaCYKEZQpYCJXQFGvwXc+gEAnWs0Og9wAWPyJs28eaMaA4VTfCYLxYlW5ueKIW4KaSAzBSRuMVemkq9vo24S4nkRBGFdGBmNzWkVzWe2CBnc3cE8l+wkorHGREmjuRiCsGnxhFgt0cqc/HEHgelLNNW2/wjgLtGnUkhR2Ni9FCRVJ1Aw06BbSHEKyRNi1ouzg22fYgooZziZ5N/B7dQAhREAKGajIgPAAgBGRUYxAVY3/TK63jRfjIgXQRDWhYZDt9IFRv5PXgSibyFQiTZ0v0637U5OTxBaH4udYiM7BeQmAXcXUIhReExdArY/zDC50gVWWkIPsl2kVzl1lBhl7EA+ScHibAfcIaB9F6s1lQI9LOW8cR9rPUVXMRkfCv00Ng8/rO6WMPJK20gQhHWh4dAtjx2InueelunLiBcUmLB0THqNT/31aQyfCd/paQpCa+MJsX1ULlBktO9mOycdpqjZ9hCrJ8UUBUwxzdaQ1QnseBToexjwb+Mxdj9gMlGEdB3gYzna+b3Fzp+ZzICjjc/btpPHde3n92a70UZK8qOJSOVFEIR1oRa6FUkWFvW91Iy3Az0W4MooMHEOw9MB/KvkBxc9fj4TqSKOPX9KJo+ErY1q4SqM1Bgnhry9NOEWk0D0HNcEhO5jaykTBaBTYHjBSo23lxWUYpo+Fc3CqaR0hPkw7bt4e26aVZxqGcjH+FHDZGaFZs552Tlu3SSk8iIIwrqwfOgWOf7kIajTF4F0BNr0NZyYft+iW3UXY1HTryBsRVwBVki0MpBLcgRa1+lnmb7CMLmuffShVIqGOInS8+LuZtXF5mG+i8VFMaIVmcw7cZa+GYvTqMbsorfG5qWBF5glXBSgCiA5DmQba++uFyJeBEFYN2qhW0Hf3BZS0GdnxWSXDUjcBCJnMJL0Ilz1oRHhUkMmj4S7ApOJwgIAinF6TtzdrJJkoxQf7m6G15ktNO5OnqOxNzMJ+LaxFaQo9Lp4e/lhMvMxctPcQD1xhsdXKzT3eoLcjeQO1sVT/Ao3VReSja8cWAekbSQIwroydDiEo4eCCxN2oQNjPwCS3GMULXTe9nPI5JGw5fEEaN6ttXdcHUBWp4jIJQBPN8VIx36OU5eMcelKAdg+yFYTwEC6xA1WbwL3UIgU06ziaEV+X0rPfe5qhS2ponG7xQl07Ka3pkmIeBEEYd1RTQrHoWeTjrLvPvEmUEogcAedn0bNwYKwqek6AFx/lSLC7udtdh/NuiYTs2HKOcDbw/ZQ+BSrMhNngHwPKyi6zvHr+HW2m5ztfAwf2HIqpllhqRpZL7k4zfQmC+Dp4Vh12/amTxyJeBEEYePRKvzHM3YViN8ACmkMKGH4kUECSwfUzWfG9NsvW6aFu4Da5FEhQUOt3Q9AB6olzBh1q1UAFU4K6RpHqhM3eWzyBgCFm6O1EsPmOvfXY/7NNo5LF9N8/HKObSjfNsDsoNiprRVoMiJeBEHYeDIRIDsJRM4aYVlG20dR0NCoEeaZfmVNgHA3oJopSiJvsMVjdTH91tfDpFyzFdAKgMnJnwcOsq1UyrAt5AmwBWRzs+oZn+SbCFcnTb2KydhlpNWf02xkzbi6ml5tmY2IF0EQNpZKkVMQ0xf5jrCYArQKRqr7kdBdDT9McKnljoKwlXEHWCnJJ+lfsThYRbH5KExMFiCf4LGeIBA4RG9ZbpJixtnGyorNy8pnbpp5MaU84A3SN6OoNPg62ymQWhARL4IgbCypcZakI2f4rrBcABQgqnY3dPePDO7Ajx0O0fQrFRfhbsPu4+RPIclKCcCvLc66obe2cDEd4RLHbJQm3bHvA7veSwHkDnAsOjvJn+kaABOnkJyd9NC0MCJeBEG4LbSqvnCCaCUxUcryH9eJs5wyKqXYozepCPi9QGLl5/2xw6GF5l9BuFswqYDDDxQ7WbUspulHqRqtHrufhtvkTQbcFbuB3rexSlNMA+Ef0vjrNtpA7gCrMPFr9MCkxrgqwN3dUm2i+Yh4EQRh1QyfCePEi+fmLF4MNdLGSYVpNgy/CRTiQLnI2x3tGLhnL0LTNkRSxeUTecWcK9zt2P2APck3A7X022KaX3cd5Hi0xcnKi72N1ZfQg0D4tBFI56BQ8fVRoFjsQOc+Cp58jKsHium5CxtbjNauCwmC0HIMnwnj2POnFmyMjiQLOPb8qaX3DRXTfKc4/oYhYtI0B5pUoHMP1P1Hcfwn7wGwQiKvtIqEux27ny0jh49VF80YcYbONwVtO2mwLeWAqYv8f80T5O2OdiMrZpqTSFqZj2kyMfvFv4OPXcoAk2+xYtOCiHgRBKFhtKqOEy+eW7QysmJcfzrCfSzhH/IfxFrVxdXOEK2OvSsn8oo5VxCM5YpeVlfsPlZPSllWXLKT3CjduZfipphixcVk4sizs40m3EoZKGeByQsMvavhbGdbyeKiDyZ+jRNJVW2ps2kK0jYSBKFhRkZjCyous5kd1z/Q3173xNg0DLhTUG+eMkRMincwmYCOfcDeH2EFBssk8krFRRDqOPxswVodgNVL025mEvDbebuzna2iq/9EH8vkBW6HroXbmSyssGjGLqTcNMWNxcG8l869/H81E2ErqZRhVcbmbtpLno2IF0EQGqbRGP6XzkXw9F+fnuuJcSk43jWFoUqC49KKQtNg39vYb5/Foom8giDUsfmMXJYqc16KSSA7zfZQJkrx4unmeHT0HNtHNi8FSjHNBF1PL4AqfTC1NpGzkyZesw3whrjQMXGd49jTl2jk9YSabuaVtpEgCA3TaAz/l169ttATk63i2LVHMZzoA6DUl83tOTpTdREEoUFqrSOAPhari8bbxHWacWt7iLr2cy1AKQvERtmy9Rjt10yE49VdB+sVmdwUxU7kTW6sLmV5f5PKoLvJC8D17wCJsQ1/ybMR8SIIQsMM9Lcj5LMvG96/VHdHN+51IvtBaIoCuLqB0P38x1UQhNXjaOPnYopLFhWF4XXlPKsvACsoHbto4M1Ps4WkmumX0TV+b7YC7f1Axx7A6gGgGBNMKSA9zrUCVY2Pn5viVNLY92WrtCAImwPVpOD4k4dw7PlTUDA3yb/2/WJe3Ro6FIT1Nny3vA8m+72IVt6BwGhcPC2CcDvYvIZvpcSx51rGS+I6Y/3LBVZj3N005WYqTNJN3GDLqJxjJcbRDti9bBHZPJwCLOc4rVTK8DEVo9LjDrLNZPc2dau0ouv6HexybT1SqRR8Ph+SySS8Xm+zT0cQtiSL5bz4nRaUKlXkSitPJfhNeSSqjpnvG8qIEQRhIfFrFCCuLk4Qjf+A7Z22HVy66O/jcYkbXANQSNLsa7JwyWIhSaHTdaDpPpbVXL9FvAiCcFvMTti9NpXDH33tYqM7FcEaTf0fytpXMg4tCKsknwDioxQj7buAW9+noFHNQMdeoOcIv64Ugeh5toMUlf/TqVaj9VOlD8YTbOpLWc31WzwvgiDcFrWJoJ+4rwd/+f0bty1carcAy2TECIKwOHYfxUi1zMkjT4iTRpUSk3Jz0zzObKNHxqRyHNpkYbupWmGbKDNBgbNJEPEiCMIdsVL2y0IWL03PzogRBKFBFIUCBmC+i6vTmA4y1xN2aw0WTxCAwmkkdzd9LCYTW0dVDUjeatarWDUiXgRBuCMazX5p1uMJwpbH4efnfIKmXbMN8G4DqiVOC6Uj/Hmt+gJwkqhtJwCFk0epcYqffGKDT/72EPEiCMId0Wj2S7MeTxC2PFYPqyjVMqsqzg7A6QcsblZdIm/Uqy/ubn4upuo+GYudwiY1zjHoarVpL6VRRLwIgnBHNJL90ggKOHUkW6MFYZWYTPXWUT7B1hEAeHsoWvJxIHaVt1ns9epLJsKR5/ZdgLOLHpj4NWa/tDgiXgRBuCNq2S/AYm6W1dl4f/L+kOS9CMLtMON7SbKKYvMaGS9dvH3yAlDM8Gt3sH5sOc9sl87d9STe8VMMu2thRLwIgnDHzGyDds8NrVJWIV4A4IvfGsXwmfBanpog3B3Udh1pRRp1a9UXmxE+V0wz7r+qza2+1PwwNg8Trx1tFDTXX+XEUosi4kUQhDVhaJ8Xr3y0C3/xriQ+HxzGV5yfR7eSxGqqL4CMSwvCbWEyUYAArKjYfYBqA1QLE3RVM5CN0tMC1L0vhQTFCsCN0TseYWhdMdXSAkbEiyAIa0NmAqpewWDh2/iA8gpM0BDR27DUaPRiyLi0INwBteWKhQQ/u4yWkWLimHQhCWRjQGaSWS+149Ozqp02DwWMamH2y/jrLZn/IuJFEIQ7p5znP4zRi0DsCpCPIYrbN97KuLQg3AZ2H5jjUuBeI2c7hYtq5WSRsx0opWnILWbq26ULSbaaargDQM+DFDDJm8DE+bk/bwFEvAiCcOdkJri87cZ3uM22qiFgztz2w8m4tCDcBiZ1Vusowe8d7UbxU6GfRdcA6JwqMqlzJ49m498JdO5j2F16HJi+TN9MiyDiRRCEO6NS5Cjm1GVg6hJQiAMmCwbs4wha86t6KBmXFoQ7ZKZ1ZEwLzbSOFK4CsPuM9e9lCpgZ78u86ovJxBFqXx+Pzcdp+G2REDsRL4Ig3BmZCeZD3PgOv65qgGqF6u/F7xxsfHKo5ow5/uQhGZcWhNulNjJdzvGNhcXOiSOTyswXxcRt0ooKlDLcfeQw3iyk5/3/anUBvl7At43CRitxCWR2emNf0yKIeBEE4faplIBcDIhdA6JvAcUk++RmG9DWh6F3PIAvPHUEfqdlwV3ny5Ogzy5bpQXhTlHNTNwFZlVfOus/16v0qHl7+H120kjfVThhVMrOfTx3N8WPpxso5Vm1Sd4A0hPr/UqWxbzyIXfOn/7pn+L3fu/3EIlEcP/99+OP//iPMTAwsOTx/+N//A/89m//Nq5du4a9e/fis5/9LN7//vdvxKkKgrAaslHmSlyrVV0qgNXLvSq+bcD2d2BIteDooSC+e3UaJ69MA9AxuKsTb+9vx2vX44imCwh42CqSiosgrAF2H425+QTNtzYvx6YBetNUE/9f9fbSvFuIs0qj2pj70rG7/liKAvh3AJNvAQ5vPfkgO8k1BOqGyIgFrHvl5a/+6q/w9NNP4/jx4zh16hTuv/9+PPHEE4hGo4se/53vfAcf+tCH8Iu/+It4/fXX8cEPfhAf/OAHcebMmfU+VUEQVoNWYck5dgOInuW7NrMdsLDqgp3vYhUGTOF9dE8nfv2J/fj1Jw7g0b2dsJpNGNzdgQ880IvB3R0iXARhragtaixnKVYUpV59qWqstGSn6IfxbeftionG3HyynsRbw2wF/H3GcaCvpmN304QLsAHi5Q//8A/x8Y9/HB/72Mdw6NAhfOELX4DT6cSXvvSlRY///Oc/j6GhIfzrf/2vcfDgQXzmM5/BkSNH8Cd/8ifrfaqCIKyGbJTv1q6/yl55tcKRTE8PS9J9g80+Q0G4O1EtgMXFr2utI2cHfS5mO0epq2VOJLk6gLZ+tnpNKpC6tfhuI0cbHwNga8m0sBW8kayreCmVSnjttdfw+OOP15/QZMLjjz+OkydPLnqfkydPzjkeAJ544okljy8Wi0ilUnM+BEFYZ6oa37nFbwGRMzT+qTZAtbNl1P9uwGJt9lkKwt3L7F1HAIWJq4uVk9rW6OwUPzv8QPtuLmes5IGJs0B6ke6IdxvFT7UMJK6v9ytYlnUVL1NTU9A0Dd3d3XNu7+7uRiQSWfQ+kUhkVcc/++yz8Pl8Mx99fX1rc/KCICxNdorv3q5/e1bVxQ54Q4CvhwmdgiA0j5p4Kab5ZgMwxIuJrd1Sjm86Zq8G6D4EODs5VXTze3VxU8Nkov8Fxti1VtmwlzOfTT9t9MwzzyCZTM583Lx5s9mnJAhbG12nWS9+Ewi/wX8ATVaOX3p7gZ3vZI9cEITmYbGzSgKdfjSAHhVnB4PntDJvmy1QLA5g+yBgddMvM3kBiI3WxQ/A/8879jDAromel3V95s7OTqiqiomJuSNVExMTCAaDi94nGAyu6nibzQabzbY2JywIwsrk48yQGP02JxP0CmDxA+5OZkLsfKzZZygIAsApo0qBraNakq4rQMGiWll1ycfoUTOp/LnVye3SU5cYg2B1ApPGaHXNCGxzN+XlzGZdKy9WqxUPPfQQXn755ZnbqtUqXn75ZQwOLm7mGxwcnHM8ALz00ktLHi8IwgaTiQLx60Dkh3Wvi8XGfvjOx/g1AK2q4+SVabxwegwnr0zLpmhB2GhmfC8pI8sFrIo62gCrg8ZbvUqRMht3N/cguTpZodGKDKeburQwB6ZJrHvN5+mnn8Yv/MIv4G1vexsGBgbwR3/0R8hms/jYxz4GAPjIRz6C3t5ePPvsswCAX/mVX8G73/1u/MEf/AF+/Md/HH/5l3+JH/zgB/jiF7+43qcqCMJKFNMsQY9+m7tQ9CpgcvMfO3/fTNVl+EwYJ148h3CyvmAx5LPj+JOHJIROEDYKq4stomqF/+/avbzd3c2Ki8nCicHsJODuqt/PbGV7KTcFWJzcl5Sd5JuVqYsclfaE2JpqEuvuefnZn/1Z/P7v/z4+/elP44EHHsDp06cxPDw8Y8q9ceMGwuF6JPEjjzyCP//zP8cXv/hF3H///fif//N/4n/9r/+Fw4cPr/epCoKwEpko96GE36ThT7XwHZyvB9j+GGCxY/hMGMeePzVHuABAJFnAsedPYfhM4ysDBEG4AxRl4dQRQNFh97OtlE+wslKYN6nr7gagsEVs8wBdB+uj0oUEMHVhrhdmg1F0Xd9StdxUKgWfz4dkMgmv19vs0xGErUO5AETeAF7778Dlr/FdmM3N6YMdg8C7fwOaasdjn/36AuFSQwHXALzym++TUDpB2AgKSSB2lR6X7nvqt5dyFCCZScDh45TR7GRdAEjcZPXF6gE69/C2ch5IjdMM7Otd01NdzfV7008bCYKwQWQNr8vEG3w3ploAs7G4bfsjgMWBkdHYksIFYLJ4OFnAyGhsyWMEQVhDrB6OR2uluVujrU5WXhx+LlospthCmk2t+lJKs+0EcCKpY3d9N1KTEPEiCMLKaGW2jK7+E9+p6VVAdXDCyL8D2Mlcl2h6aeEym0aPEwThDjGZKFKAua0jgL4V1QLomuF9mZfrYrbW1wqk52WtKc2tnIp4EQRhZbJTwNRlIHLWiAY3A1Y7331tf5jGQAABT2MGvkaPEwRhDVjM9wKw+mL3s/qSm+Kuslr6bg13Nys3pczC+zcRES+CICxPtcp3XVe/yYkDvcp+t6sTaNsxJ013oL8dIZ8dS70nU8Cpo4H+9g05dUEQYFReFEb/z28NeUKAxc3bSxnmOM1GtdAPAyysvjQRES+CICxPPgZEz/OjlOF4pcUJzRPCScvDeOF8aibHRTUpOP7kIQBYIGBq3x9/8pCYdQVhI1HNTM0FFlZPLHZmutjbWHnJTS28f636Us5xOqkFaF62ryAIrY+uA8lxYPSbQC7K781WDONhnDh7FOFTGoDTAObmuDz31JEFOS9ByXkRhOZh99F4W0gB7sDcn3mCbA3npvjZt22mFQyA4scVYLZTOsLHarLnRcSLIAhLU0gCt14DohdnvC7D2ttwLPx+6PNqK7Ucl+eeOoKhwyEcPRTEyGgM0XQBAQ9bRVJxEYQmYfcBqVsUMFpl7l4is42CJhMFcpNsD88WLwB/np1k6ykfZ7WmiUjbSBCEpUmNA9e+xTFpXYGmmHEi8xNYLByqdtuJF8/NtJAGd3fgAw/0YnB3hwgXQWgmZitgdvDrYmrhzz1BCpJyAUjeAiqluT83qcboNIydZs2NiBPxIgjC4pSywJV/AmLXgXIGMKkYwWGEKx4sdLQQyXERhBZmZuoosfBnqoUrPiwuVmCykwuPcXUZG6mLC/chbTAiXgRBWJzEDeDmSSA7gZpYiVobC6aSHBdBaEFq4qWYXjgSDbCy4upgoN3UxYXHmEz16kumudUXES+CcJfR0LbnShE4/79p1i1nAUUFrB4EPLaGnkNyXAShBbE6uSZAr9L7Mh+TCnTu5zHZSQqU+Tg72X5ydTVVvIhhVxDuIhbb9hz02vChge3Y2emqG2unLgLj3wcyExyRhA54ujGwqxOhqBWRVGlR30ttd5HkuAhCi2L3UZgUkvVKzGxcHYC3F4iPApEzC9cAmExA4MDGnOsyiHgRhLuE2rbn+aIjkiric1+7NPN9yGvD8f4LGEpPMtdFMeLFvUGoOwZxPLAfx54/BQWY81iS4yIImwCbty5edH3xkefuw2wb52Nczujv2/jzXAFpG62WrbWEW7hL0Ko6Trx4btFqyXwiqSKO/XAHhqc6AZMKrQqcNB3BC9ojOFnciaOHgnjuqSMI+ua2hoI++8yYtCAILYrNwzZwtUJT/qLHuID2Xfx64uzi/pgmI5WXRinlgNQYv+7c29xzEYRVstK259noYBXlRPrHUXUU8ZnCP0M46QfGAfzwLEK+Kzj+5CG88pvvkxwXQdhsKApg9zKrpZgCbO7Fj+u+B4hf42RS/BrQsWsDT3JlRLw0isnMEjoAVDUamwRhk7Da6R8dCsJ6O/5l7hcX/Gx+GJ0gCJsMu4/ipZBc6GmpYbHzjXr0HDB1AfCGAItjY89zGaRt1ChmK5fRAYsH/AhCC3Nn0z9zqynzw+gEQdhkzCxqLDCUbik6djNpt5DiVvmqtmGnuBIiXlaDzcvPxUVGzAShhVlp2/PSSBidIGw5TCq9L8DCRY2zsbqAjj1cJZCJAInrG3N+DSDiZTXM/GFL5UXYXCy37XlxGquoSBidIGxSZtJ2lxEvANcGeEI8Lp8E0hPrf24NIOJlNVjdHButloFyvtlnIwirorbtef6U0HyUBoULIGF0grBpqYmXchbQyssc52fXwdVBy0R6vCXewIthdzWYTBQwxRRbRy1kXhKERpi/7fnaVA5/MXIdkVRx5pigEsdvu/8Bnyn+DCIlh4TRCcJWRLUAFidQzlGMuDoWP05RmKZbLbPyArB91LmfXtAmIeJltdi8FC+FFFeEC8Imo7btucYv91zGyLeHEY2lEKhEMKC+BbX7HpjaMjg24pAwOkHYqth9hnhJLC1eAMDZAaTDgN1YylqtMIG3Yy/f1DcBaRutlprvpZRpyeAeQVgVxQzUq/9/DFou4wPqdzBouQDV7gG69mLooX147ucflDA6Qdiq1FpHK13PVDPgaKNtwupidIjavKoLIJWX1WOxA6qNK8FL6cV3QwjCZuHSS0AqDKSj7HvrVaBtJxC6H+jYi6EdXTh6OCRhdIKwFbE46tezYgpw+Jc+1tXFdQGlLCeQlgq32yBEvNwONg+QK9L3IuJF2Kyko8Dot4B8ClohhZHKbkRNQQSshzAQOAzV1QlgYZtJEIQthH3WrqPlxIvVSc9nKcNrn4iXTYjNA+Sm6HsR7SK0KFpVX7piUq2y6pIOY3iqCycSH0ZYb+PP3gRC15M4/pMRaQ0JwlantmW6mFp6UWMNVyfFS24KcHc3ze8CiHi5PWyGaUkrApUiYLY1+4wEYQ7DZ8I48eK5OfuMQj47jj95iIIkcQMY+wGGp7pwLP7EIpumS7ICQBDuBqzuuYsal6uo2P30umglmnydzZs2FMPu7WBS+QcOSNqu0HIMnwnj2POnFixirO0kGn7jFnDlZWiZSZyYGDSEy8IVADqA/8/fnkGpIsZ0Qdiy1BY1AisH1ikK4GQ7GdnJ9T2vFRDxcrs0Eq0sCBuMVtVx4sVzi2azzOwk+uoZaJEzGIm5ENZ8WC5zdzpbwjue/RqGz4TX43QFQWgFGk3bBTg2rajsODRx4lbEy+0ye2Ral+V0QmswMhpbUHGZjQ4gnNEwEjEhmm3sH55YtsyKjQgYQdia1BY1asXlFzUCHJvuvodTiU30vIh4uV2sTsBk4WhpKdPssxEEAI3vGormgUD55qoeW7ZIC8IWpdFFjbOPbzIiXu4EWdQotBid7sbM44HyOAaqZxBSYg3tMpIt0oKwxVlN66gFEPFyJ9RMTkURL0LzGT4Txqf++vSyxyjQEbJkMFD+AVRVx3HP36/qOWSLtCBsURpd1NgiiHi5E2p9wkph5T6hIKwjtQmj2QsW51OrsBz3vQS1kgVgwtAuK557VwXtTktDzyNbpAVhi6JaAIuLX2+CboKIlzthdp9Qqi/COqNVdZy8Mo0XTo/h5JXpGf/JchNGswlai3huxzcxVP0GYFK4qyR0L4YefgDf/T8eR7traQGjgDkxskVaELYwMyPTiaaeRiNISN2dYvcZW6aTsmVaWDeWCp377R8/iHCysOyEUY3f33Uaj+a/B5QKXLDW8xDQuQ/w98KqmvC7P3Uvjj1/CoBskRaEuxK7j9uja4samzhNtBIiXu4Um6FUSxlAq3CMTBDWkFpLaH5lJZws4F/++esNP85UXgcSt6hGXB1A6DDQe4TlYgBDh0N47qkjC0RScHYyryAIWxeLo56g2+KLh+VKe6eYrYDFCZRzrMA0MS5Z2Ho02hJqhED2MqAV2O7c9jZWXTxzBcnQ4RCOHgrKFmlBuFuxeY3dfUkRL1sem5fipZAU8SKsKSuFzjWCAh1BSx4Dxe8B0AFXNxA4CGx7aNFKoWyRFoS7GLuvvni4hWndhlYropW5iHE+NXVaTDU1LlnYetzpaPLMhJH3Rah6kWJl20MUL+7gWpyiIAhbCaubnrhqGSjlmn02SyLipVGKGWDyLSB+beE6AEnbFdaJOx1NDtqKeK7/JIbK3+TfW08PEDgA9L6tpc14giA0CZNpU0zRyr9ejWK28R//cg5IRxb+fJOlEwqbg4H+doR89mVWJy7Nb+8bwyvveA1Dhf/Nd1FmK9DzANBzP+DuWutTFQRhq2D383MLX89EvDSKagH8ffw6EwFK2bk/b3SluCCsAtWk4PiThwAst/t5LgqAkEPDR4NXoabGgNw0q4K+bUDgENBzhKvtBUEQFqNWeSnnWjZtV8RLo+g6/Sy64WmJX5/rb7F6NkWfUNh81EaYg76VW0iUJDqO7x2FarYC4R9yhN9sB4KHge2DgMO/zmcsCMKmZhOk7cq0UaMUU0DyBgATRYpWBFJj9WpMrU9YSPLD6mzq6Qpbi8VGmOPZEj7z9/MyWdwqjh+KYsgZASZHgXwc0DWgbTcQvJcCRhAEYSXsXu45KiSYC9ViiHhpFLsPMDuASp65LqUMx8ns3rrfxe6ncCmmAEigl7C2LDbC/MThWYLGVsFA+RTUyBVANwET54BqBbA6gK6DwK73iqgWBKExWjxtt7XOptXxdPNzOQ84jItI4ibL8kA9bbecAyqljT8/4a6jJmg+cH8PBp3jULMRCpbxN4BiwvC67OB4dOfeZp+uIAibhVrarl5l2m6LIeJlNTja6B3QNcBk5tfVMpC6xZ+rZnpfgE2x2ErYQqQjQPIWzeSVAhAfpai2ODkavedxThsJgiA0Su0NeQv6XkS8rBa3UX3JTwM+w++Sj9enjGpmyHxio89MuFvRykD0LJCJAlUNCL/J1qWiA207aNJt29HssxQEYbPRwhEgIl4aRdeNi0MFUG38XM4BLmOTdOImLxy1P+xyVlpHwoagTV3FyasxvHBFw8mIDi0VZtXF5ga67wH2D3GfkSAIwmpo4bRdMew2SiHJ6SLFRMGSiQCZCRohC0lj+mic00dWN01OhQTgDjT7zIUtzPDrozjx4iWEcy4AuwHsRkg5gOOOv8aQLwvseo/8HRQE4fZo4Slaqbw0isNPP4teZcVFtbL6ko/Xx6VzU0AxXU8nlNaRsI4MvxnGsb86h/C8N0QRvQ3Hcv9PDFt+FNjzIxJIJwjC7dOiabsiXlaDbxsAhX4Cs4O3ZSZYaXF28vvEzVlTR9I6EtYHrarjxFffhA4d87N3deP7EzfvhWZr3ZX2giBsAuw+AApjQsp3tih2LVlX8RKLxfDhD38YXq8Xfr8fv/iLv4hMZvnFhe95z3ugKMqcj09+8pPreZqNY7HXS/DlHCeOqmXGr3t7uJxRK9LMa3XzOJk6EtaBkSuTCKfLWGppgA4F4SwwMhrb2BMTBGFrYVLr6wJaqPqyruLlwx/+MM6ePYuXXnoJf/d3f4dvfetb+MQnPrHi/T7+8Y8jHA7PfPyH//Af1vM0V4c7aLSMZl040hF+PbP7aIKLHAFpHQnrQjQabuy4dOu8UxIEYZPSgq2jdTPsnj9/HsPDw/j+97+Pt73tbQCAP/7jP8b73/9+/P7v/z56enqWvK/T6UQwGFyvU7szTCa2j2JXKWB08HN2kiF2dj+rLUVjcWOtdSQZG8JaUS4gUGlMvAQ8K+9DEgRBWBa7F0iipa5n61Z5OXnyJPx+/4xwAYDHH38cJpMJ3/ve95a971e+8hV0dnbi8OHDeOaZZ5DLtciIVmYSyE6xB1gbidY142cTHJX29hq7jwr15N0WUqvCFiB+FQO+JEL2MhToSx4W9Now0N++gScmCMKWRLXMskK0xvVs3cRLJBJBIDB3RNNsNqO9vR2RSGTJ+/38z/88nn/+eXzjG9/AM888g//+3/87nnrqqSWPLxaLSKVScz7WhXycSbqpMZqWvNsoUhSVSlTXjHaRla0lgEmn1ar4XoS1o5gGpi5DrZZxfNdF48bFBUy6UMFL55b+f00QBKFhWiywbtXi5bd+67cWGGrnf7z11lu3fUKf+MQn8MQTT+Dee+/Fhz/8Yfy3//bf8Ld/+7e4cuXKosc/++yz8Pl8Mx99fX23/dzL4mjjNaKYBhI3qETdQcP2onOEOjvJtFN3gKsDzDaOT5cyMnUkrA3Rt2gWz0xgyPoGPuE+ueSh2ZKGTz5/CsNnGmsxCYIgLEnN91JK17sKTWTVnpdPfepT+OhHP7rsMbt27UIwGEQ0Gp1ze6VSQSwWW5Wf5eGHHwYAXL58Gbt3717w82eeeQZPP/30zPepVGp9BEw+wVyX9ASFSyYKuLo4aQQApTxgNdG86+9j+yh2hdWXSpFq1d219ucl3D1kp4DkDQrh6SvQcgm8kPmxFe924sVzOHooCNUkeS+CINwmZit3pZVzvJ65Ola+z3qezmrv0NXVha6ulS/Cg4ODSCQSeO211/DQQw8BAL7+9a+jWq3OCJJGOH36NAAgFAot+nObzQabzdbw4902NZ+LqxNIjgGKmSYmbwiIXzN8LsbYtDvAn9n9gC1OoeNoE/Ei3D7VKjBxln/HYqNAPoaRaQci8K9413CygJHRGAZ3N/cfG0EQNjl2nyFeEk0XL+vmeTl48CCGhobw8Y9/HCMjI3j11Vfxy7/8y/i5n/u5mUmjsbExHDhwACMjIwCAK1eu4DOf+Qxee+01XLt2DV/96lfxkY98BO9617tw3333rdepNoaiAO39gLPDqLyE2T6y+2lkstiMAB8dSBtlem8v/7AreVZkWmw3hLCJSI3RU1VIAfHrQC6OaKnx9x4yMi0Iwh1Tax0V0xxQaSLrmvPyla98BQcOHMCP/MiP4P3vfz8ee+wxfPGLX5z5eblcxoULF2amiaxWK772ta/hR3/0R3HgwAF86lOfws/8zM/gxRdfXM/TbBzVQgHjCQHlPJC8SVHi7eXPzVbeno/zs9lKY6/VTT9MdrK55y9sTrQKqy5VDYheYM85G0MAjQfQyci0IAh3jMVOPyf0pht313UxY3t7O/78z/98yZ/v3LkTul6flOjr68M3v/nN9TylO8fqAtp3sXSWGgemLwO9D7Eik5sGcnHA4mD1pX0XW0iuAP0v01cAXx+zYgShUWJXWKZN3uTfsWwMKKcwYJpE0JRCpOpd9u4hn11GpgVBWBvsPiBToHhxNu/fFbmK3g7OdgoTm4ciZeqSMXlkorgppPgHW8qx3dS5l1Ubqb4Iq6VcAKLnKZbjN4BSEijEgUoZqmrB7+y7vuJDHH/ykJh1BUFYG2a3jvSlc6bWGxEvt4u3F2jfTXESHwVyMQoYs5XTRVUNyBgZGw4/4OkBoPNCJAiNEj3HFuTUFYqWXIr/aEAD2nZh6N2P4QtPHYHfaVlw1zanBV946giGDi9udhcEQVg1Vifg3wEEDjZ1Y/26to22NIoCdOxmjkvyFhA9A+x4lGV9u4+fTSqrL1Yn0H0ISFynoMlON92pLWwCCimuoUiOA/kYUMzw75uuAWYXsOs9QN/DGDJbcPRQEN+9Mo2TV6cAKBjc3YF37OqQiosgCGtPE9tFNUS83AmqBei+hwbd7BQweQlo30mPQrXKd8zpMEWO3cdqTWqM76b739nssxdancibrLKkblG8FFLcmaVrQO99wP6jgJkVF9Wk4NG9nXh0b2eTT1oQBGH9kbbRneJoA7oO0O8Su8SWkaONlZVM1PC+GEsauw5ynUBmAshMNfe8hdYmPUGD7vRVVlzKJVbtlCrf9ex8FOh5sNlnKQiC0BREvKwF7bvod9HKwPjrgLubE0eqjVWZtOF9cXVw+qha4ZRSk+fkhRZF11l1SYXpcynEgdxkfcVE3yDQ/xjbkoIgCHchIl7WApMK9D7I+fd8DJi+xBaRqzY+PcXqS80no1qB/JRMHgmLE79OH1XiBltF1SqreAr496r3QSDU5NBGQRCEJiLiZa2weYDgvfx68gIAHXC08/ZMlO+iAebBuDopZpJjLbHgSmghKmUg/EMadSt57sZKGOPQigrsfCew4x1SdREE4a5GxMta0r6L6btVDRh7DfD2AM5OThylxmi+tDjYYlJtbAfUxqkFAQAmzwOJaxy9zyeBcpGfq1Wgax/QtZceK0EQhLsYES9riaIwbVe18uITv8YN0w4/W0SJWzzO1cmN1IUkkJmkyVcQihlWXeLXWXGBCYhfZSKz1QFsfwew7WFOuQmCINzFiHhZa2xujk8DHIk2O1iN0atA8gaQT3Aaye6lyCml64schbub8GmukKgUOGafiQKlPAAdCD3IUMTO3c0+S0EQhKYj4mU96NzHdlG1wvaRfzsFSyHBd9UAvS/OToqZ2iJH4e4lHQHGTrFiV8rRnJu+xaqLo50G3W1vB8y2Zp+pIAhC0xHxshpqo6oroShA39tpsMxGGWDX1g/ARPNlPk7hYrHTeFkpcsmjcHdSrQI3RyhstQIABZgeBTQNMJn5d6ljN0WwIAiCIOKlYaoaMHURmLrcWJXE7uNKAACI/LBeaSnn+Diqhce4uozk1NrOGuGuI3YFGD8FaEVmBeXiQCFGEezrBTr3Az1HuDdLEARBEPHSMKUs20ClNDD5FpC4ufKYc+AQ20VaGZg4A3TtZ6UlNUYDr7PTMF8q9MSkxPty11EuAle/QcFSzvPvSuIGoIMm3dCDQMdewNfT7DMVBEFoGUS8NIrdyy2atXXguSkacjOTS68FVxRg29sAKBQsegVw9/ACFTkLWN0cmXb6jQj4LD0wwt3D2PeZC1QusM2YuMl8F5OFBt2OXUDwsEwYCYIgzELEy2ow24D2fqBjD6eIdI1L8ybfYutnMZwdPB4Axk8DgQO8EOWiFDSuLvoaFOOPIh1eWgwJW4tcHLj0kjEqX4WWmsTJpA8vFI/gpHIftMA9bBl5gs0+U0EQhJZCtkrfDjYPW0C5GJAe52hr7Ep9c/T8iZDQfYx7L+f4zrqtn76X8A+BvT/Kx7A4Ac0wBOemmQUjbG3OfZVZP+UChqe7ceL6exGu+vizNBBKaTje1o2hPfK/qSAIwmyk8nK7KAp3FwUOsXoChRei6HlODlWr9WNVC9DzAL+evgh4erkHqZQBpi7RF2MyAYpxkUpH5t5f2HqE36SRu5zHcGo7jo0OIlz1zjkkkldx7G9GMXxGvFCCIAizEfFyp5hUwLeNke02LwAdyEywlTR7eqhtB8v/ehWYeBMIGEF2k+cBi4tfKyYaNatljlgLW5NSATj3t0C1Ag0mnLi6H2wUKnMOqzUPT7x4DlpVWomCIAg1RLysFRY7szja+mm21IrA9GVOjlQ1HtP7EP0tuSl+72jnBNPUBRqBFdS9L5moLG3cqrz1ohFGl8VI3INwxY35wqWGDiCcLGBkNLahpygIgtDKiHhZaxx+TiU5Dc9KbpqtpHzc8MoYS/WiZ4Gug2w/JW7yMwCgyqkTXZOljVuR6cvAze8x8FCxIJpoLNsnmi6s84kJgiBsHkS8rAcmlQsZO/bS21Itc0nj1GWgbSdg89Hkmx4HfDsA6MDkRY5OA/XqS3ZKljZuJcp5aG++gJNxN16IBnAyoqOzOtXQXQMe+zqfnCAIwuZBxhjWE5ubo67ZKH0wpTQwnQE8Ae45Slxn9Ht6HMjHgHI371ctU/RUCjTvtu1o6ssQ1gBdx/DX/wknXt2JcKkuRIJKEn5TDsmqA/oSraOQz46B/vaNOlNBEISWRyov643JRKNuVy3gTmdlpVqhoXfyIis0QD1ZlXfkp3xMljZuAYa/9yaOfUNDuDR3jH5C9yJRdUAHoGBxU26+rOGlc9JCFARBqCHiZaMwWxlw176bVZWO3ay+TF6g/8HZwRUE+QQTeCt5wOzkfWVp46ZGK2RwYnh0iYkiBQoAv0WDz7b4/47JXBnHnj8lI9OCIAgGIl42GruXpt32XUDbblZVrn0TsHooagoJrgrQq6zaQDGWNmaafebC7VCtYuT730O4YMbSE0UKEmXzEj+VkWlBEIT5iHhpBorCVtK+HwXcXay0RM9TsJQyNOnmOUo7Y+JNy7vuTUl8FNGbFxs7tLi0MJGRaUEQhDoiXpqJ1Qkc+AmOVeemuNOoUgKSN41FjTkKHcVEUVNINvuMhdWQjwM3vodAdXLNHlJGpgVBEES83Dm6zhA6rczNwKUsW0GNBsy5A0DwHsDXA+STgMPHgLvkGPcl5eNGci+AlFRfNg2VIndXTV7AgOU6QmpqSUOuAqDD1djWaBmZFgRBkFHpxtHKzF2plvm1VubX1WVEimJi2q5qZQKvxckPs21WKB2AngdpylVU7jmCzsmjbAmongO2v4M/q+SZzOqUsdmWplqlEXviHJCLQY1fwvFOC45N/ARgzBXVqH31mQ/ci8/8/TlEkoVFJY4CICgj04IgCABEvDROdaXEW6O9Y1LpXalW+Fkr8qM0K0lVMXGfkc3N1F2LEwjdD9z6PistHXsAkxWIXaXX5eb3KHB0jbkvjra54kdoLZI3gekrQHyU1TPFBGgl+ExFJKpzKyd+uwnP/vR9GLovBJMJOPb8KSjAHAFT+5M+/uQhqCb5cxcEQRDx0iiqld4U1aikmMz82mRmVcQ0rwNXrRpVmpLRUsqxnVTOGcbcND/SYd7f5gFUG6sr2SmgbTsABYhfpWiavghYvdyHlJsGXJ1N+TUIK5CdBmKjXMwZuwbk4xgu3INjUx9ctKISL1Rn/u4MHQ7huaeO4MSL5xBO1r0tQZ8dx588hKHDoY15DYIgCC2Oouv6lpq9TKVS8Pl8SCaT8Hq9zT6dheg6/RClTH0EWjcWN+ZTwNgIRUzXQVZYEjeBzDgrOR37KG78fUDPQwsFk9BcSjkgeg4IvwFc+Sa0yUv4bmUP/tXkB5Co2rDYqHStHfTKb75vpqqiVXWMjMYQTRcQ8LBVJBUXQRC2Oqu5fkvlZaNRFMP/Ymf1RNdZjSmkmPPi7aVgiZ4DvD08zuZl26qQYNjd9FXA7AC675H2UaugVbi/KjUOhE9jeNyCE9P/L4S15f8HnD0CPbi7AwCgmpSZrwVBEISFiHhpNooCWF388IYATw9w9n8B+el6VaaUNVJ42wBHkHuSJs+zZdXeTwOw0FwS14FMFBg/jeGrZRyLLt4mWgoZgRYEQWgcES+thsMH7HoPcPMkvTJmB+AAEL8OpIwLnH8HBUzyJj01/u2Aw9/Ek966NNTCSYWBXBwIn4UWPoMTkx9cdBXAcsgItCAIQuOIeGlF2rZzUiUTYVXF1QUoZppAU4b/xddH/4tW5LGVEFN7hTVj+Ex4gXk2NN88W0jSdD1xBpg8i5GogrDma/g5ZARaEARh9YjjczWUsvSorDeKAvQe4TRTIcFR287dQPAwW0W5KVZiqlW2kwBeQGNXeZtwxwyfCePY86fmCBcAiCQL9SWJlSIni6avAlMXgYmziGruhp9DRqAFQRBuDxEvjaJVgKlLQORNCod8Yn2FQm2BIwCkxyma/Nu50NHmp8E3HwNSYwzCg8IqwNRFXlSF20ar6jjx4rlFPStzliRGLwHxG0DsMtN0tQKu6Y2PMwd9djz31BEZgRYEQVgl0jZqlEqBAXTVCkVDPsaKiM3LqSGbZ+2fs+sA1wTkY8x2cXYAnm4AOvciFZKsxCRv0gejldlKmrwAtO2kABJWzchobEHFZTYzE0JvXcGg/RYQOQPkpzFcug+fi78D81N05+N3WvCnHzqCd+zukIqLIAjCbSDipVFsbqD7MFtHhQSFg1Yyvk4wJdfVRRGjlVj90MpGwm557mPVli2qNgbema3G53lTQyYV6HkAGP1mfceRxWHsOjIeo1Lk8xfbmNoLE6BXmOzq6THEjrAaGp38iSZygPktIHkLGsw4MX3U+MnSgkQB8O9/+l48uldCBgVBEG4XES+rQVGMSH834NtGIZOKAOkxxvZPnGV6rqMNsPsoPlaDyQxY3RQnNjfFjDsAtO1mwm4mCvh6OVmkVzhGrWtM6M3FAK/NWFFgZoUoPQ6Us6zKrPZc7mIanfwJVMJA6iagFTGiH0a44lrxPr/6+D5pEwmCINwhIl5WS6XI/JVSmp+rZVZdtDLFTLXCSkg5b7R5QqzG1MLkaobfasVYHVCqV2pq9y0keIxqpRBq7wdSt2jUBQCbCygXQZ9LBjBbGHAHheJJr3I6qVqp+2Da+hl4J6zIQH87Qj77MksSdQTtFQwoZ4HcBGBxImra09Bj7+x0ru3JCoIg3IWIeGmUUpaTJdV5LSAorLJ4QvShaGW2eMo5/rgQZ3XE1cnjlkLX+RylDM24yVv0umglPmc+DWTCQDrK5F2zhc9jttHzkp2mAAocpO/FBAomXadfZ+oi0LZj+XMQADDh9viTh5ZYksjvjvdfhDp9BVCsgKcHgVK+oceWPBdBEIQ7R8RLo6g2Q7jUEnGN9pHFtXDHkDvAqkx20vCjpPhhtgOuAKsp8++jKGztVEqcIMpMApWsIWjyAHTuzklH+FidewB3N1DOQ/P0YOR6EtHxaQRCoxjY7oNayQF2D0PudAWAxlFqby/PT1iWmSWJXz2HcGrWkkSHjuN7b2Co+G2KUkcb4O7GQOYaQuaDiFRc0JfZYSR5LoIgCHeOLGZcDaUsxcBqFiJWShQxuen6AkaTmRuqXV2AaqYoSY0xqyU7yeqNauExFiefr1xgQN3YKVZW7D7A1YnhyQ6c+KEP4Vz9KUMuBcff6cFQVwxAFbD7KbhUCw9wtDPkThY7Lk+lBG3yEkbOXkI0W0HAqWDAEYF641VWuyxOoHMfRW1uGsPpXTh2/Z0AMEfA1L6SsWhBEISlWc31W8TLRlHVaKrNRtkKAjDjUSnl2CKq5CkyXAGgfTfgWmQ5361TwKV/BIpJDMdCOPbGrgVR9DMXy/e3YyiYYnvJZAZsPu5HMqmsGLXt5KSTsAAtn8bImfOIRicQsJUwEDRDLcSB668Ck5dYKWvbTgGaDlOkhu7DcOEQTrzuRDhTzwBakMorCIIgLEC2SrciJhVwd9H7UkgAiVtA/Ap34mSnKFQ691G0uLuXror0PADoFWgT53Diu22L7tCppYyc+FYSR3+xD6qu8zmqFXpwHO2AQwOmjDyY9cio2cQM/+AiTgxfMQSICYAdIUcVx3dEMFS5wUkvZ4Am6ORNChdfD9CxG0O+Lhx9wIuRbDeiuerS+5AEQRCE20bEy0ajKEYyb5UjzqUs4Gznh2qtm3aXCpgzmQBfH0bOXUW4sPQfnw4gnNEw8vrrGOw1c2R6aowVGLOdraSuvRQ0kgdDqlUMj5zBsf91c8GUUSSv4Nhbh/Fc5wUMtYWBroNAMc0/L6sTCN7HypbNA9XXh8HeRapmgiAIwpog4mWjyUwB0XMcfdYqjPy3OKk2krf4AcVYyBgAvEH+3GznRFHyBlBIIJrMA1i5YhKdnADsRYbbOfxscSRuULTcGqHh1NcH+EK8IHuCzJm529pJ5QK06VGc+NrYEmsBFCjQcSL+ozi66xWoFgczXqAwvNDmBzwBVrUWa/cJgiAIa4aIl/WmUuQepHKOOS1TlzgxZLYb49Pe+viy5qU/pZAEikVOFcVH6YXJJ+o7i3QNAWtjI88BxIGqCqhetq682zkplYkAhTQNwtkpIDEKTF6kmLJ5eV7uIODftvXbSrkYkLyFkZu5OV6V+ehQENa8GDHdh8HECAWgfwcDC70B/t58fRt44oIgCHcnIl7Wg2qVvpbcNFtAAE26sWtAhqFmaNsJdOymcFEtXK5Yy2WpVripePx1IHGd4qVSAmAy3t23YWAbfRiRvLLEaK6OoDWPgfYckNc5JeXrAzq6jW3VSZ5LJsocmHKBt02+BXh6+ZyZCeP7IP0drk5OR20VynlWuow/o2im0tDdopMTgKfAabDQvYDDxzZcW79McAmCIGwAW+hK1AJoZV7wc7H6WDTAyZ5iBoAC+HYAnbuBzv0LE291nZWXxA0gcQ2wOigcsjHA46SnwmwFvL1QbW4cf28Fx/4hDgX6vNFcI0jt0CRU/w7AYmPwHUxGRo2LlRWbm1+X8gCq/KxXKKK0MmD1ANUSBVTyFi/Q7f2sNGzmtN6qVh9LB7hSweJCwJlb/n4GASQoQLc9xN+DK8AKzN3WahMEQWgS6/Y28d/9u3+HRx55BE6nE36/v6H76LqOT3/60wiFQnA4HHj88cdx6dKl9TrFtaOqAakwvSzZSQoX1cbU3a5DFAPFJKCqTLnt2Dv34l/VgPQEdyONv86t0NUK2zud+4H9TwDBe4H2nUDgHo47u7ow9OAePPeEG0G7Nud0go4qnhtMY6jfwkpN+27A3UmfzeRbFEnuIAPrfNsYZqeDvhhnF829Womvw9PD16FagPw0MPYD4PJLwPgPaVjdTOg6fUO1PyeAgszXBxQSGHBOIOTQZsTffBToCFmyGPDEgNAR/r48IeN32EJj+YIgCFucdct5OX78OPx+P27duoX/+l//KxKJxIr3+exnP4tnn30Wf/Znf4b+/n789m//Nt58802cO3cOdntj7/Q3NOdF19kaSocpNgBWWTzB+sUsNQ6EjQu9fwfQfajuIalqvIhmotw+nY7Q1+LwA6qDAsdk4p4iV6dxfJRVFK1Ir4rdBw1mjFydQDSeQcABDLQloVqcFCsWB30s3fcCk+eZJ2O2A6H7ga4DnHBK3KCoKec4PePtZWhe1Vhr4OkBvCGgmAPSN40qEji55AkB3ffwnFuZQop/FhUjxt9s5+sE+NqTN4FcDMPXgWOvMY9lsWrWc/2vYGhfG4WkO8D2X3v/Br4QQRCErUlLhdR9+ctfxq/+6q+uKF50XUdPTw8+9alP4dd//dcBAMlkEt3d3fjyl7+Mn/u5n2vo+TZMvJQLvOiXs/xetfEC72ibe8z171BweHs4TuvwGyJkirdXKwypy1GIwOajZ6aU4oXW7KQRtJYTolWA+HVg4gyXQ8LEi6jNx6TXcpYTL/kEBU5slK0hby+9LKkbFCiqheIlcA9Hposp4PpJ/qyYYitEqwDZMNtH7iDg72MGTSkDTF+mENKNVBl/Hx/L0WK7k8oFCrFiit8rKgWXq5Men+g5tsRycaCSA6Bj+GIOJ67sQVirG5VD1hyO97yGoZ1mIHjIGDXfD7Tvqi/dFARBEG6bTRlSNzo6ikgkgscff3zmNp/Ph4cffhgnT55cUrwUi0UUi8WZ71Op1LqfKzKTQHrc2N4862I4/yI2dZGVFasLCByicMkneLGsLXisFA2RYqcptzQBFBP8mbubYqCqAcUCjbWZMC+0Dh+rO7pOz0bV2HZtUimGOnbx3Ox+YPoSUJimT8PdTdFVSAO3vg/ErwGRbVzouH2QrStFoXhSbUD7Xr7WxHVWZopptkl2vY9tpOj5+vh18hbg2w4E9s8Vcc2gXOBEVT5u3KDwz8gdpOk4F+NrTYX5OipFoKoDsVEMVS/gaN/LGLG8DVHffQhkL2DAdh2qpxvoPMhqVsceGnRFuAiCIGw4LSNeIpEIAKC7e25YWnd398zPFuPZZ5/FiRMn1vXcZqiU2F6ovYuvjcYuZtTMTrM6oShAxz5WVWJX+W4fMBY9akBunJUMq5u3FWMUI207WUGp5Hmc1UFRY7Kw/dS2g+/6zXZmv8Svs5oTv84U3bTZOL9tvNiWsoDTz8f09wHRtyhKUuPGJuwYj/XvoCjLTPBzMcW2USnDY4oZQ8SkeI673k0xN3GG7a/ENSA9ZrRTdm98O6litN/ysfptdh9fQ81nlJ0GIm/QZ5SbpN+nUgHiV/m7rGpQ/X0Y3LELmPguYEtS9HQd4J9Dx15OislkkSAIQlNYlXj5rd/6LXz2s59d9pjz58/jwIEDd3RSq+GZZ57B008/PfN9KpVCX986ZG0U02zB6BrFhbeX7+QXo6oB46doevUYraToeWMCSeHFNDXGD10HnB08ppThRd9ttGxKswyx2WnA4uZFuG0nE3lr1KoAmQnu2pm6SJHlrrDCo1f52CYz0LYbcLXzuOnLvE86ytc3fZVVnfZ+io7ELVYpTCp9OhY7BVLsKkVMKUfB4wkCu99bNx3PzrPxbWdWjN2/rlUKrVTAyPkriMYSCLhUDPRYoTp8/P1bnfUD0xMULtkpnp9qodDJRIDsBFAp0yPUewSInuXvxdkFdPRzOqutn1Uqk7pur0UQBEFYnlWJl0996lP46Ec/uuwxu3btuq0TCQaDAICJiQmEQvUFdhMTE3jggQeWvJ/NZoPNZrut51wVZgcvvmaXkYq7jIF48gKNvIqJQiU9xttNFgqIibNGtojCd/GeEC+cFuMiW6vOKCZWZAop7kVSVFZbbO6Fz2lS6atxdlBw2DwUMKqVz2lxstKiVYC+twGBA2whjZ/isemoUWnJAFOXmRLbtpMhecmbFFfuEODdxteWifI1lLI8X/92rhhwdbJ9NHWRLbLJ8/T2uAL8mbNjbUeKK0UMv3YRJ166NXcZoteG4z8ZwlDHLOESvw5MvAnkk/xdKGYK0koRyCVYgfL3UbxNXaRwcfh4m6OdgrXnQREugiAITWZV4qWrqwtdXV3rciL9/f0IBoN4+eWXZ8RKKpXC9773PRw7dmxdnnNVqGYKDbOtXkGoVmmKrRRZZakUeWEf/RZbK/Y2XjD1KgUEdF7IS3kKhp4HWUGJG+0kxczRZsCoxrTTS6KAwqdjN1tAy2G2ATseA9TvG883DThdPAerG8hGgPBpVhu2vR3Y+wTHs1U7202lHP0u1QrgLLFCkzWxNZSLA75eChmLg48Rv8oKUSljmIKDbGm5AwzlS93icaU0zcSZCNtZznaajG+n9VI12lmFBIbfDOOT/xBbcEgkVcSx50/huaeOYOieICeKoueMqaMwgCqQHDXG2FMUJJ4gYPXx55UcR8i9fYC3m7+H7YNbK6RPEARhk7Ju/xLfuHEDsVgMN27cgKZpOH36NABgz549cLtZOThw4ACeffZZ/NRP/RQURcGv/uqv4t/+23+LvXv3zoxK9/T04IMf/OB6nWbjaGUKDK1I70ulUDfdzubGd9mOMJkZSJc38l1MKoVEtcyLf8cefn3t2zxeMfPiaTKxuqLagOkrAKr8umM3hUkjmEwURqrFMA3HmA1TygN2E30uFjdw9RucEAreR7ExfZXiolZRSdykiHJ1AJqRwDt1mQLLbKcAKWXZeiqmKdhqVRirE+g+yMdN3TISfSd5u65TMNQqU3a/MVG1jJDRynyOfJznp1ehVXX81tfjix4+s1n7xXM46h2DGrsIJCNAfoq/6+wEBaFW5J9HpQhApciqlnlOzi7ulrK3ATvfKcJFEAShRVi3f40//elP48/+7M9mvn/wwQcBAN/4xjfwnve8BwBw4cIFJJPJmWN+4zd+A9lsFp/4xCeQSCTw2GOPYXh4uOGMl3WlWmGrYT6Kygu52QokxzjFYnUCwQcoHix2vrsvpDkdZHGxDWG2AzdG6L1QrWzhuAM8JjfNaki1wnZPx976PqRaKu5KmK1A514+ty1MgeHuokCx++lLcXfR15GPUzB17aXXpZhiy6eYomCIX2XLyOZjC2nyEoVWMcNzNzs43TN1kZWNUoatME+IwqfWwrJ5KELKeaOCVOVz5+P1FpnVzddodrBSUzDOoZbPUkO14U9ezyFRWHrSXwcQThYwcnoUg+ZLrD6pFlafrB5Wy9zBurm3WuR5ODv4O/IGKWz6382UYkEQBKElWPecl41m3XJeqlVOoqg2VkDMNn5dezeeTwCvf4UXbmcnTZ1WB8WNojJmHzBi5G3Aze+zyqGYgNB9QPseipVCyhAUCZYOfNuMltMsVBsvqo62lWP6M1Eag3PGwsfcNMeerR5epG1eQKnyIu7soECqGYWrhrjITrKqohn7lQCObAMUY7rOKobZzHO1eQxDcxfPvzZxlJ02TMqGcdnq5GvJJ1jBqRRZ0apVtcx2ihyL3RBuxhJLuw+aasdDn3kJifwi1a95fH7fG/hAMGk8boWvs5ThY+Wm67udzDY+h8PH83a2AzvfxaqVIAiCsK5sypyXlsdkjC8vRiYK3PgOlzFWSkD/AV507T5edDMTPM7Xx3f/t35A4WJSgW0D9IgA/L6Y4sXe1cXWkj7LV1PO8+dakffPRFiZsfuNqs4ifhh3oL6NWjUbIXkVZrMUVAokZ5exj6lqCA2Fx5hUmlc79hiheBkafnNTgM1vTDLpdd9IrshJK5OJpmVXgC0kXw/FkcnM80yNGVuyjRUENRGm6AA07lfSqxRLJgugVo1z0ni/fAIjN/MNCRcACDjA352qAq4g/SyOdoqy2msyWynEbLVAvxDQ+5AIF0EQhBZExMudoOs01GYiQPgs2xy9b2N7xdfLqkrsKo+tJdOmJyhmbG4g9ADf4ddI3GDVQzF8LzNVlVkTM7WN1fl43WdSzrGlpdooDuz+uRNJvm1G1QRs9QTvYzUoPcY2TeoWq0VaiULM1VVv7wA8Zu8TbB9NX66PF1fAthGMVks+xspRtcLnyU2yleTtZavM00NxZDF8L9lJI8V3krd5e5iJY3ODYqXMikw5x+qIVg8jjKYaW6LoN5cx4IqwqlJrt1m9/DMopQFNo0izOGnQ9W+nvyhwiG01QRAEoeUQ8XK7VEpMpy2m2ALSilwP0H2IlQqtxGRbgC2aQopiIBPlhb5t51zhMjtYrW3n3GyS2ZhMbGc423nhLyQpZoppY9/RJD9qrSVnOy/cbf318ykXeI5WB3067gAnjfIJVlpyU0ZCrhFW56xSuLTv4kfiJqeokjeNEW+jddS5l1NL+TgXUdb8LIlrNAn7+9hOCxzkyHX3YU435afru6Hy03xeZyfbN7UsHa1C34vR5QyEkgASK/4xfSx0HarVUV+7UM4DWh4oZlndqZZZjbG5Dd/PASNrR4SLIAhCqyLi5XbIJ1glKWaYg1LK0OfR9w7mp1RKrLjoRrujbFwoi2ljRNjNFtLM48XZxgF4u73B/UCqmYZYV8es8WFDzMxpLbn4vP4dQOwK72txAWUjuK6YocDRdeagtO00smFcPJfkLQqcqkbR07GLmS7JXgqY6FsUPOUMR43dAUOYKaxuxK5QtKXDQG4a2tQoRnAIUbUbgQ4/Bnbth1pK0bxcydOHkjPWGTjaWEkyWwHV2DVUKWGgr4KQx4JIurzEDmgdbeYyfnlfElC9nPrSivzdVxS2pvIpoHMXhU3gIAWeN8TXJgiCILQsIl5Wg66zglDb7JyP84Ku2oDOPUDPA/w+dtVoeeToeTGZ6N2wuvi1t7ce1FZb8AjUg9xuB5OJLRmHH6j2zWotpSieklkACs+nZk71hFhFsYEX8GKS/pX4NSDvZXXE6uLUTfIW2ze6xth/qwvo2sepI18fRU9ijJWYfIzeEVcXKyj7fpzVoMhpDF9I4sTJHoRLBQDXAVxHyAkcf18nhg6083dZyrBCUkgZe6A0/r7MTgA6oABqIYXjB8dxbKQTCuZugK599+zeS1DLGaBQYivOv5Niqhihx6dzN9t5PUfobXF1UbwIgiAILY1MGzVKrU1UzrJCUAuei12heXX7w/RL1PYX5WKsWqhmtonKRaMy4aHQAXhRnrpIP4fVQ6/FWkfoa2WKmFysPm5cKbIdZLbR86FrbHP5d7A6kk+wjaTrNNo62ugHyUzQK+PtYYtodoWonOdKgPAP+fqLxsSSzUsfjjeE4Qk/jr04AX0mhYUoRu3kubdPYWi/j0LCbKPIKiQN743Oj2LW2N+UBBQThqc7ceLaPQiX6lNXIUsWx/svYqhrCpoOjOR6EbXvQECLYkA7BbUQY4uocx/zcMzGqLq3Z21/94IgCELDrOb6LeKlUUpZYPJiPcbf6qL5tphi9WHHoxQ1qVv0rzg7abj1bqMgSd7ku/+uA/WwuZrQUa1A5/71D0Er5VgVyccpDJK3jE3VUXo8rEY7q5A0NjKngFKStzs6WNXRjKknVxeNv66Ouc9RzACRM3y9+QQ9LLoOzWTGY9/Yh3BBBbBQoCnQEbSV8Mojp6GqJnpnbC5WimDihFBynOKqUqRHxmwBoEDLpzCSCyGq+xBwmzHQnodqtmI4tRMnLvYhnKuH34XMGRzffxND93QDXQc5geTru/2KlyAIgrAmyKj0eqDa6mO9qo0XVV2j8GjfxQt64jrHgJ2dFDdtOxi2Nnmej+HpqQuX9ISxw0ihx2Qj0lutTn54e1kZcXUxMr9SpJBx+OuvydXJNk3RWMZYuk7R42jjtFFmArj+KgVM+876c9jcwI53ANm9xn6jGJCdwsi4hnBh6deoQ0G4aMNIphOD/iQrQbkCKy0Fo/2lacaqBCurPoaQUl3tGGxzAC6XMY4dwnCsB8dOO4wqT51IxYVjZw/gue1tGAoZG7o3evO1IAiCcEeIeGmUSp4XRsVKUTJ9lR4QVzcNpZNvsdpg9VAU1EadY6P1vUK1CZZCqp7W6+trLDF3LVEUY6Tay1bX5Hm2e1LjgK4AXftpwNXKFGpWrxH9nzBMvlbD4KsBt0boAaqtI6jh6gBsD/F34kkiGk8ByK54alG1G3BZKQIzk/UFliYbc2Bsbp53JQ9UbWzZOXz0qlicgNkBzeLBiZexoD0FUCQpAE58O42jA/dBdXjW7vcqCIIgbAgiXhrFZmSAWJysmOSnacL1hLjvJ36NFQv/DmNk2JjiKSR4/9pYdKXECg1Q3xvUTEwmoPseCrBbP+D55iaBzgNALkqvjM0NQDd2HhliwmxnG8fhoXcnM0nfz+z2i9lKH08hhUD7VTQiXgKZC8CY0WIzqRSDqmF2trgoWopJtpUcLiM7xsdjnF2A2YaR6xmEcwUs1p4CjLUBGQ0j4yUM7r7j36AgCIKwwYh4WQ3Odl6oa9NGzg5O0aTHAJhYsejcX18wmDKqK84Opt/qOoVLbWeRd9uST7Xh+HpZkbn2irEEMQn0DtDrE7/G1Qg2NwVZ4jpHxFUrhU7kDEVcbBToPQL0PkhhZ1JnqjwD99+H0P+eRCRdWnS0WYGOoL2CgZAKaD2sstSqPhYr20iFlFFl6TE2Pm9jG8sd4HOlo0B2AtHwLQCBFV/y185FMLi7yeJREARBWDUiXlZLdor+C4CG1HKWVYLAfppxa9NC+Xj9Zx5j/DZtbGxWVCNLZZktys3A2wP0PQzc/B5HqFUbx6G3DwDag4anZ5zVlXyMW69TYxRj4Te4TPLmdzm507aL26ctDkA1Qy0XcfyBKo5927JgtLk2bXR83w2ork5jQaWPbSm9aqwRqAKdDrar2vspXHSNbanaQsh8DMjFEDCZ0Yh4+dvTY/g/fvwQVNMaT3gJgiAI64qIl9VQ1WhUzRnju8U0zZ4de7lcsYauAykjdM4VYEujkOIED2BslW7RLcVtO9iamThrtLd0I/+k1wio22NE+k9RyKTGKB5qaxLSYX6eusAJJW+I1RKYMORW8NwRH06c60a4UPfHBB0ajt+fxVB/gGJPUTgFVVsRoCis5FgcrP4kbgKRN+vj2OWiEfVfBkwmDPRY0G6tIFZa/q93LFvGyGhMqi+CIAibDBEvqyE7yXHjxCgvlM42Vhh6j8w7boqTMCYLqxBaeZbPpdOI3m9hOvYClTLbYalxVooKSWNTdAf9PN4gP3CE00rZmGH8fZMtpdwUb0/c5OeO3YB/O4Z6PTg64MDItBXRogUBrxMD/W1Qq2VjJ1LaWJUQ5+9QM5Y/Wg2/S2qsfp5amY+tqhQ1VR0wmaBqZXxwZxlfurjyX+9ourB+v0dBEARhXRDx0ihVjd6PyXP0XygmI+Ts/rnBclWtXmHxBPmzmOFzMTsoAFodk2oE6Rkm3UKCFabkDWPXUTu3MtdSgs02wBfix87HKHii54HoGWbIaGX+7gpJwL8DatsODIbsgGrixuh8nNNM+QQrKLoRnFfVjCWTHmOnURWAUZmBEfFfTNN3o4PHmR1AJY+jezz40sXKii814LGveIwgCILQWoh4aZR0hK2RQooXysABmnPnt3/SEUOo2GnUzUTrm6Jb0eeyFBYHzzd2la9FtVJMaEW2htJhpuc62jgGPiNkrMx9ad8J9D/G9lP4DQq6QgoIvw5MnOG4s2rn70+1srWmKPywOLmuwOPgY5qsfFxFMbZVT3EKqmxslrZ56ZMxOxlm5w1iYEcfQq+eRzi5eGVFAdDttaGq63jh9BgCHjsG+tvF/yIIgrAJkITdRqlqHCW+OQK4O4Het3EkejaVEkPfoDPnxWShHwQ6R6id7Wt3PhtFdoqmWICZNIqJwqGUnnucyWKE4LmNPBzF8K+Y+LtLjrEaM32RLSatVDfkQmFbyOYxqidWVn9MKltWepWCsFI09jJZAYubrSKHD/D0cvoonzCmm/xAez+Gz4Rx7PlTADBnwkkxvvc7LUjkyjO3h3x2HH/yEIYOy34jQRCEjUbWA6yHeAGYKJu4yWrDnsd5cZ1N4ga3IVvdXF44dZE+DbuPYmazkhzjeDgUGnZtbgqJXIxtm3IOWGK38wK0MqtR2UmgmGMlZ6btZuwv0qv8UlEohEyqIYjMDP5zddFL5A5Q7EAB4sYWb5uXv2vjMYfPhHHixXNzKjDzRUuN2lk899QRETCCIAgbjKwHWA9ycSO3RWEk/nzhUruYAxyNTofrqby+7Rt+umuKt4cio5BkG6nD2CrtDQEIAdUqBUw5x1yYqoa6CDFEjdlqrFWwcaTc4qTxt6oZoX8Jelg0oxqja7yfycLjTBYjiK6DAqZGKcuR7Zpwaeuf40EaOhzC0UNBjIzGEE0X0Omy4VP/44cAFoqXWh7viRfP4eihoLSQBEEQWhQRL42iKPRhmK004s4nHQag8wIKGJUKMJV3I/YWrSeKAvh3coN2KUOxUBMwAH08NqONs1pMKttpt9NSK+UM4aIxibetf1FPkWpSZsahT16ZRiS19ISRDiCcLMgItSAIQguzSdyjLYDDD+x8FAg9MHe6CGDmSz7Or10Bto8AVgnsvo08y/XDZGIrzOqmWJi+wqpHsygkgenLhnBxGx6jlf86NzoaLSPUgiAIrYuIl9VgdS2+gThtBNLZfdyArBU5QbMZxqJXw4yA8TRXwKQjbF+tUrgAjY9Gywi1IAhC6yLi5U4p5VgFALg4MDfNr/3bF/pitgImE8XCbAFT8/qsN1WNoqUmFp2dNBCv4vc80N+OkM++xMpGel5CPo5NC4IgCK2JiJc7pXYhtXk5QQNwGsbmad45rTfzBUziOpcyaiuHwt02pZyxwygJQKEJ2t+3sIW3AqpJwfEnDwFYuHO69v3xJ2XfkSAIQisj4uVOKGaMJY2KkUVS5kSNp6fZZ7b+mEw07XpCABSm8E6+xSC6taRSZDrv1AXuOzJZmK/jun0z7dDhEJ576giCvrmtoaDPLmPSgiAIm4BNPgbTZDIT/KxaOIUDGO2iu0QTKgonr2wempQrBU4kOdqYw2Jx3P5jaxWm8manMJMh42ijj0i1LHvXRpg/Qi0Ju4IgCJsHES+3SynHqku1Cugl9hxcgdsbF97sWF1clZAeZ+ssH+dHLbZ/NS20Yoa+oULCSN8FH8cTYoLvGjJ7hFoQBEHYPIh4uV1qOS5awQhcsxktlLsUkwnwbWN1JBOl+Cim+GF2MFhONYLqVAvXBuhVzITZVUoULVqx/pgWJ3+n9jVOShYEQRA2NSJebodK0diAnGFkPXB3tYuWw+oC2vv5O8pEgXyMScOVfGP3V0wUQM6OegieIAiCIPzf7d1bSFT9HsbxZ6ZytDykYZY7J80giMgLy44XWtLhosNFXdZQESkaRBAdILyKIoKCiAqC8aaoKGyuoiI6XHQ+SCcKlMLU3daKdJqX3fTOrH0x5H7bu3xdk7bWX78fmAsnZ83Dj8F5+s+a9f8LyksyIp2Jk3P//VnKHDd0Py7qzXBf4ttAGeMTmzj+GU1sxhiLJvY3+nYxfo/3v5s4po5OFBdKIACgF5QXu2J/Jk4i7f5nYnVgeNrQ/rjo7wwbnigkAAD0E/6La9cf7xM3K55YbckuZKUAAIDfiHddO+LxxAXZ/viQ2Egwq+D7HY4BAMCAo7zY8flfUldr4kJpWQXJ7YQMAAB+CeWlryxLevckcbJpel7i20UAAOC3o7z0VVdL4sJr3uHS+JLBuekiAAAG4NtGfZXll/4RTazA8LVoAAAcQ3npK48nsSEgAABwFB8bAQAAo1BeAACAUSgvAADAKJQXAABgFMoLAAAwCuUFAAAYhfICAACMQnkBAABGobwAAACjUF4AAIBRKC8AAMAolBcAAGAUygsAADDKoNtV2rIsSVJ3d7fDSQAAQF99e9/+9j7em0FXXsLhsCSpoKDA4SQAAMCucDisrKysXn/HY/Wl4hgkHo+rvb1dGRkZ8ng8A/pc3d3dKigo0Nu3b5WZmTmgzzVYMLPkMDf7mFlymJt9zCw5/zs3y7IUDoeVn58vr7f3s1oG3cqL1+vVhAkTfutzZmZm8oK1iZklh7nZx8ySw9zsY2bJ+evc/m7F5RtO2AUAAEahvAAAAKNQXn6Bz+dTXV2dfD6f01GMwcySw9zsY2bJYW72MbPk/MrcBt0JuwAAYHBj5QUAABiF8gIAAIxCeQEAAEahvAAAAKNQXvrJ8uXL5ff7lZqaqvHjx2vNmjVqb293OparvXnzRhs2bFBRUZHS0tJUXFysuro6RaNRp6O52p49ezR37lyNHDlSo0ePdjqOax05ckSFhYVKTU3VrFmzdO/ePacjudrNmze1bNky5efny+Px6MKFC05Hcr29e/dq5syZysjI0NixY7Vy5Uq9evXK6ViudvToUU2fPr3nwnRz5szRxYsXbR+H8tJPKioqdPbsWb169Urnz59Xc3OzVq1a5XQsV3v58qXi8biOHz+u58+f6+DBgzp27Jh27drldDRXi0ajWr16taqrq52O4lpnzpzR1q1bVVdXp0ePHqmkpESLFy9WR0eH09FcKxKJqKSkREeOHHE6ijFu3Lihmpoa3blzR1euXNHXr1+1aNEiRSIRp6O51oQJE7Rv3z49fPhQDx480IIFC7RixQo9f/7c3oEsDIhQKGR5PB4rGo06HcUo+/fvt4qKipyOYYRgMGhlZWU5HcOVysrKrJqamp6fY7GYlZ+fb+3du9fBVOaQZDU0NDgdwzgdHR2WJOvGjRtORzFKdna2deLECVuPYeVlAHz8+FEnT57U3LlzNWLECKfjGKWrq0s5OTlOx4DBotGoHj58qMrKyp77vF6vKisrdfv2bQeTYbDr6uqSJP6G9VEsFtPp06cViUQ0Z84cW4+lvPSj7du3a9SoURozZoxaWloUCoWcjmSUpqYmHT58WJs2bXI6Cgz2/v17xWIx5eXlfXd/Xl6e3r1751AqDHbxeFxbtmzRvHnzNG3aNKfjuNrTp0+Vnp4un8+nqqoqNTQ0aOrUqbaOQXnpxY4dO+TxeHq9vXz5suf3t23bpsePH+vy5csaNmyY1q5dK2sIXsDY7twkqa2tTUuWLNHq1au1ceNGh5I7J5mZAXCPmpoaPXv2TKdPn3Y6iutNmTJFjY2Nunv3rqqrqxUIBPTixQtbx2B7gF50dnbqw4cPvf7OpEmTlJKS8n/3t7a2qqCgQLdu3bK9HGY6u3Nrb29XeXm5Zs+erfr6enm9Q69TJ/Naq6+v15YtW/Tp06cBTmeWaDSqkSNH6ty5c1q5cmXP/YFAQJ8+fWJFtA88Ho8aGhq+mx9+rra2VqFQSDdv3lRRUZHTcYxTWVmp4uJiHT9+vM+PGT6AeYyXm5ur3NzcpB4bj8clSV++fOnPSEawM7e2tjZVVFSotLRUwWBwSBYX6ddea/heSkqKSktLdfXq1Z4333g8rqtXr6q2ttbZcBhULMvS5s2b1dDQoOvXr1NckhSPx22/V1Je+sHdu3d1//59zZ8/X9nZ2Wpubtbu3btVXFw85FZd7Ghra1N5ebkmTpyoAwcOqLOzs+ffxo0b52Ayd2tpadHHjx/V0tKiWCymxsZGSdLkyZOVnp7ubDiX2Lp1qwKBgGbMmKGysjIdOnRIkUhE69atczqaa33+/FlNTU09P79+/VqNjY3KycmR3+93MJl71dTU6NSpUwqFQsrIyOg5pyorK0tpaWkOp3OnnTt3aunSpfL7/QqHwzp16pSuX7+uS5cu2TvQAHzrach58uSJVVFRYeXk5Fg+n88qLCy0qqqqrNbWVqejuVowGLQk/fCGnwsEAj+c2bVr15yO5iqHDx+2/H6/lZKSYpWVlVl37txxOpKrXbt27Yevq0Ag4HQ01/rZ369gMOh0NNdav369NXHiRCslJcXKzc21Fi5caF2+fNn2cTjnBQAAGGVonmAAAACMRXkBAABGobwAAACjUF4AAIBRKC8AAMAolBcAAGAUygsAADAK5QUAABiF8gIAAIxCeQEAAEahvAAAAKNQXgAAgFH+A/p3WqlVIvHRAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We define a function that plots the model's prediction (in the form of samples) together with the data.\n",
    "# Importantly, this function has no other argument than `fig: matplotlib.figure.Figure` and `ax: matplotlib.figure.Axes`.\n",
    "\n",
    "\n",
    "def plot_prediction(fig, ax):\n",
    "    Xnew = np.linspace(X.min() - 0.5, X.max() + 0.5, 100).reshape(-1, 1)\n",
    "    Ypred = model.predict_f_samples(Xnew, full_cov=True, num_samples=20)\n",
    "    ax.plot(Xnew.flatten(), np.squeeze(Ypred).T, \"C1\", alpha=0.2)\n",
    "    ax.plot(X, Y, \"o\")\n",
    "\n",
    "\n",
    "# Let's check if the function does the desired plotting\n",
    "fig = plt.figure()\n",
    "ax = fig.subplots()\n",
    "plot_prediction(fig, ax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "561352b2",
   "metadata": {},
   "source": [
    "## Set up monitoring tasks\n",
    "\n",
    "We now define the `MonitorTask`s that will be executed during the optimisation.\n",
    "For this tutorial we set up three tasks:\n",
    "- `ModelToTensorBoard`: writes the models hyper-parameters such as `likelihood.variance` and `kernel.lengthscales` to a TensorBoard.\n",
    "- `ImageToTensorBoard`: writes custom matplotlib images to a TensorBoard.\n",
    "- `ScalarToTensorBoard`: writes any scalar value to a TensorBoard. Here, we use it to write the model's training objective."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2713fd4b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T08:50:27.105397Z",
     "iopub.status.busy": "2022-09-16T08:50:27.105011Z",
     "iopub.status.idle": "2022-09-16T08:50:27.126037Z",
     "shell.execute_reply": "2022-09-16T08:50:27.125159Z"
    }
   },
   "outputs": [],
   "source": [
    "log_dir = \"logs\"  # Directory where TensorBoard files will be written.\n",
    "model_task = ModelToTensorBoard(log_dir, model)\n",
    "image_task = ImageToTensorBoard(log_dir, plot_prediction, \"image_samples\")\n",
    "lml_task = ScalarToTensorBoard(log_dir, lambda: model.training_loss(), \"training_objective\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5c47d45",
   "metadata": {},
   "source": [
    "We now group the tasks in a set of fast and slow tasks and pass them to the monitor.\n",
    "This allows us to execute the groups at a different frequency."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "29eb4b35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T08:50:27.180198Z",
     "iopub.status.busy": "2022-09-16T08:50:27.179767Z",
     "iopub.status.idle": "2022-09-16T08:50:27.184695Z",
     "shell.execute_reply": "2022-09-16T08:50:27.183755Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# Plotting tasks can be quite slow. We want to run them less frequently.\n",
    "# We group them in a `MonitorTaskGroup` and set the period to 5.\n",
    "slow_tasks = MonitorTaskGroup(image_task, period=5)\n",
    "\n",
    "# The other tasks are fast. We run them at each iteration of the optimisation.\n",
    "fast_tasks = MonitorTaskGroup([model_task, lml_task], period=1)\n",
    "\n",
    "# Both groups are passed to the monitor.\n",
    "# `slow_tasks` will be run five times less frequently than `fast_tasks`.\n",
    "monitor = Monitor(fast_tasks, slow_tasks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f72a9b76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T08:50:27.189189Z",
     "iopub.status.busy": "2022-09-16T08:50:27.188695Z",
     "iopub.status.idle": "2022-09-16T08:50:36.904000Z",
     "shell.execute_reply": "2022-09-16T08:50:36.903126Z"
    }
   },
   "outputs": [],
   "source": [
    "training_loss = model.training_loss_closure(\n",
    "    compile=True\n",
    ")  # compile=True (default): compiles using tf.function\n",
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "for step in range(optimisation_steps):\n",
    "    opt.minimize(training_loss, model.trainable_variables)\n",
    "    monitor(step)  # <-- run the monitoring"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bceaf4a2",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "TensorBoard is accessible through the browser, after launching the server by running `tensorboard --logdir ${logdir}`.\n",
    "See the [TensorFlow documentation on TensorBoard](https://www.tensorflow.org/tensorboard/get_started) for more information."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9727ee55",
   "metadata": {},
   "source": [
    "### For optimal performance, we can also wrap the monitor call inside `tf.function`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "978b20a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T08:50:36.908387Z",
     "iopub.status.busy": "2022-09-16T08:50:36.907969Z",
     "iopub.status.idle": "2022-09-16T08:50:36.914348Z",
     "shell.execute_reply": "2022-09-16T08:50:36.913525Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "opt = tf.optimizers.Adam()\n",
    "\n",
    "log_dir_compiled = f\"{log_dir}/compiled\"\n",
    "model_task = ModelToTensorBoard(log_dir_compiled, model)\n",
    "lml_task = ScalarToTensorBoard(\n",
    "    log_dir_compiled, lambda: model.training_loss(), \"training_objective\"\n",
    ")\n",
    "# Note that the `ImageToTensorBoard` task cannot be compiled, and is omitted from the monitoring\n",
    "monitor = Monitor(MonitorTaskGroup([model_task, lml_task]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd73ad05",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "In the optimisation loop below we use `tf.range` (rather than Python's built-in range) to avoid re-tracing the `step` function each time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ac97b129",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T08:50:36.918433Z",
     "iopub.status.busy": "2022-09-16T08:50:36.918082Z",
     "iopub.status.idle": "2022-09-16T08:50:39.376729Z",
     "shell.execute_reply": "2022-09-16T08:50:39.375855Z"
    }
   },
   "outputs": [],
   "source": [
    "@tf.function\n",
    "def step(i):\n",
    "    opt.minimize(model.training_loss, model.trainable_variables)\n",
    "    monitor(i)\n",
    "\n",
    "\n",
    "# Notice the tf.range\n",
    "for i in tf.range(optimisation_steps):\n",
    "    step(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e39e532",
   "metadata": {},
   "source": [
    "When opening TensorBoard, you may need to use the command `tensorboard --logdir . --reload_multifile=true`, as multiple `FileWriter` objects are used."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6cf2719",
   "metadata": {},
   "source": [
    "### Scipy Optimization monitoring\n",
    "\n",
    "Note that if you want to use the `Scipy` optimizer provided by GPflow, and want to monitor the training progress, then you need to simply replace\n",
    "the optimization loop with a single call to its `minimize` method and pass in the monitor as a `step_callback` keyword argument:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2e7ca376",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T08:50:39.381754Z",
     "iopub.status.busy": "2022-09-16T08:50:39.381183Z",
     "iopub.status.idle": "2022-09-16T08:50:39.403244Z",
     "shell.execute_reply": "2022-09-16T08:50:39.402438Z"
    }
   },
   "outputs": [],
   "source": [
    "opt = gpflow.optimizers.Scipy()\n",
    "\n",
    "log_dir_scipy = f\"{log_dir}/scipy\"\n",
    "model_task = ModelToTensorBoard(log_dir_scipy, model)\n",
    "lml_task = ScalarToTensorBoard(log_dir_scipy, lambda: model.training_loss(), \"training_objective\")\n",
    "image_task = ImageToTensorBoard(log_dir_scipy, plot_prediction, \"image_samples\")\n",
    "\n",
    "monitor = Monitor(\n",
    "    MonitorTaskGroup([model_task, lml_task], period=1), MonitorTaskGroup(image_task, period=5)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "85a935b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-09-16T08:50:39.407892Z",
     "iopub.status.busy": "2022-09-16T08:50:39.407212Z",
     "iopub.status.idle": "2022-09-16T08:50:42.436809Z",
     "shell.execute_reply": "2022-09-16T08:50:42.435938Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "      fun: -69.68099880889758\n",
       " hess_inv: <5x5 LbfgsInvHessProduct with dtype=float64>\n",
       "      jac: array([-2.96735859e-04, -4.30340709e-04,  3.97830747e-04,  2.26009893e-06,\n",
       "        4.29147212e-04])\n",
       "  message: 'CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH'\n",
       "     nfev: 37\n",
       "      nit: 28\n",
       "     njev: 37\n",
       "   status: 0\n",
       "  success: True\n",
       "        x: array([  2.07005976,   1.74612938,   0.18194306, -15.21875416,\n",
       "        -4.53840856])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opt.minimize(training_loss, model.trainable_variables, step_callback=monitor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3ed49c8e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
