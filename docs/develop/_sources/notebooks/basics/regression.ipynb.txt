{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "57bd1c5c",
   "metadata": {},
   "source": [
    "# Basic (Gaussian likelihood) GP regression model\n",
    "\n",
    "\n",
    "This notebook shows the different steps for creating and using a standard GP regression model, including:\n",
    "  - reading and formatting data\n",
    "  - choosing a kernel function\n",
    "  - choosing a mean function (optional)\n",
    "  - creating the model\n",
    "  - viewing, getting, and setting model parameters\n",
    "  - optimizing the model parameters\n",
    "  - making predictions\n",
    "\n",
    "We focus here on the implementation of the models in GPflow; for more intuition on these models, see [A Practical Guide to Gaussian Processes](https://drafts.distill.pub/gp/) and [A Visual Exploration of Gaussian Processes](https://distill.pub/2019/visual-exploration-gaussian-processes/).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "34e9e247",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-22T15:03:48.893172Z",
     "iopub.status.busy": "2022-07-22T15:03:48.892728Z",
     "iopub.status.idle": "2022-07-22T15:03:53.184842Z",
     "shell.execute_reply": "2022-07-22T15:03:53.184078Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-07-22 15:03:49.087771: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-07-22 15:03:49.087799: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.decorator.check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.inheritance.inherit_check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "import gpflow\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "from gpflow.utilities import print_summary\n",
    "\n",
    "# The lines below are specific to the notebook format\n",
    "%matplotlib inline\n",
    "plt.rcParams[\"figure.figsize\"] = (12, 6)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f985d2b8",
   "metadata": {},
   "source": [
    "`X` and `Y` denote the input and output values. **NOTE:** `X` and `Y` must be two-dimensional NumPy arrays, $N \\times 1$ or $N \\times D$, where $D$ is the number of input dimensions/features, with the same number of rows as $N$ (one for each data point):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c7f9af21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-22T15:03:53.189298Z",
     "iopub.status.busy": "2022-07-22T15:03:53.188740Z",
     "iopub.status.idle": "2022-07-22T15:03:53.322662Z",
     "shell.execute_reply": "2022-07-22T15:03:53.321844Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data = np.genfromtxt(\"data/regression_1D.csv\", delimiter=\",\")\n",
    "X = data[:, 0].reshape(-1, 1)\n",
    "Y = data[:, 1].reshape(-1, 1)\n",
    "\n",
    "_ = plt.plot(X, Y, \"kx\", mew=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c316ee6",
   "metadata": {},
   "source": [
    "We will consider the following probabilistic model:\n",
    "\\begin{equation}\n",
    "Y_i = f(X_i) + \\varepsilon_i\\,,\n",
    "\\end{equation}\n",
    "where $f \\sim \\mathcal{GP}(\\mu(\\cdot), k(\\cdot, \\cdot'))$, and $\\varepsilon \\sim \\mathcal{N}(0, \\tau^2 I)$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f3067cb",
   "metadata": {},
   "source": [
    "## Choose a kernel\n",
    "Several kernels (covariance functions) are implemented in GPflow. You can easily combine them to create new ones (see [Manipulating kernels](../advanced/kernels.ipynb)). You can also implement new covariance functions, as shown in the [Kernel design](../tailor/kernel_design.ipynb) notebook. Here, we will use a simple one:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b523603f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-22T15:03:53.326343Z",
     "iopub.status.busy": "2022-07-22T15:03:53.326002Z",
     "iopub.status.idle": "2022-07-22T15:03:53.347526Z",
     "shell.execute_reply": "2022-07-22T15:03:53.346776Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.checker.ShapeChecker.__init__ which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "2022-07-22 15:03:53.328302: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-07-22 15:03:53.328332: W tensorflow/stream_executor/cuda/cuda_driver.cc:269] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-07-22 15:03:53.328355: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (0931c1205a12): /proc/driver/nvidia/version does not exist\n",
      "2022-07-22 15:03:53.328603: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "k = gpflow.kernels.Matern52()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6990645",
   "metadata": {},
   "source": [
    "For more advanced kernels see the [advanced kernel notebook](../advanced/kernels.ipynb) (including kernels defined on subspaces). A summary of the kernel can be obtained by"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3a3b5219",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-22T15:03:53.350951Z",
     "iopub.status.busy": "2022-07-22T15:03:53.350624Z",
     "iopub.status.idle": "2022-07-22T15:03:53.357434Z",
     "shell.execute_reply": "2022-07-22T15:03:53.356852Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "╒═══════════════════════╤═══════════╤═════════════╤═════════╤═════════════╤═════════╤═════════╤═════════╕\n",
      "│ name                  │ class     │ transform   │ prior   │ trainable   │ shape   │ dtype   │   value │\n",
      "╞═══════════════════════╪═══════════╪═════════════╪═════════╪═════════════╪═════════╪═════════╪═════════╡\n",
      "│ Matern52.variance     │ Parameter │ Softplus    │         │ True        │ ()      │ float64 │       1 │\n",
      "├───────────────────────┼───────────┼─────────────┼─────────┼─────────────┼─────────┼─────────┼─────────┤\n",
      "│ Matern52.lengthscales │ Parameter │ Softplus    │         │ True        │ ()      │ float64 │       1 │\n",
      "╘═══════════════════════╧═══════════╧═════════════╧═════════╧═════════════╧═════════╧═════════╧═════════╛\n"
     ]
    }
   ],
   "source": [
    "print_summary(k)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84bfdd90",
   "metadata": {},
   "source": [
    "The Matern 5/2 kernel has two parameters: `lengthscales`, which encodes the \"wiggliness\" of the GP, and `variance`, which tunes the amplitude. They are both set to 1.0 as the default value. For more details on the meaning of the other columns, see [Manipulating kernels](../advanced/kernels.ipynb)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d2b9256",
   "metadata": {},
   "source": [
    "## Choose a mean function (optional)\n",
    "It is common to choose $\\mu = 0$, which is the GPflow default.\n",
    "\n",
    "However, if there is a clear pattern (such as a mean value of `Y` that is far away from 0, or a linear trend in the data), mean functions can  be beneficial. Some simple ones are provided in the `gpflow.mean_functions` module.\n",
    "\n",
    "Here's how to define a linear mean function:\n",
    "\n",
    "`meanf = gpflow.mean_functions.Linear()`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00169246",
   "metadata": {},
   "source": [
    "## Construct a model\n",
    "A GPflow model is created by instantiating one of the GPflow model classes, in this case GPR. We'll make a kernel `k` and instantiate a GPR object using the generated data and the kernel. We'll also set the variance of the likelihood to a sensible initial guess."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "95edb564",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-22T15:03:53.408378Z",
     "iopub.status.busy": "2022-07-22T15:03:53.408012Z",
     "iopub.status.idle": "2022-07-22T15:03:53.427452Z",
     "shell.execute_reply": "2022-07-22T15:03:53.426817Z"
    }
   },
   "outputs": [],
   "source": [
    "m = gpflow.models.GPR(data=(X, Y), kernel=k, mean_function=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aefdd04c",
   "metadata": {},
   "source": [
    "A summary of the model can be obtained by"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a2d4548a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-22T15:03:53.431295Z",
     "iopub.status.busy": "2022-07-22T15:03:53.430976Z",
     "iopub.status.idle": "2022-07-22T15:03:53.439691Z",
     "shell.execute_reply": "2022-07-22T15:03:53.439064Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "╒═════════════════════════╤═══════════╤══════════════════╤═════════╤═════════════╤═════════╤═════════╤═════════╕\n",
      "│ name                    │ class     │ transform        │ prior   │ trainable   │ shape   │ dtype   │   value │\n",
      "╞═════════════════════════╪═══════════╪══════════════════╪═════════╪═════════════╪═════════╪═════════╪═════════╡\n",
      "│ GPR.kernel.variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │       1 │\n",
      "├─────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼─────────┤\n",
      "│ GPR.kernel.lengthscales │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │       1 │\n",
      "├─────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼─────────┤\n",
      "│ GPR.likelihood.variance │ Parameter │ Softplus + Shift │         │ True        │ ()      │ float64 │       1 │\n",
      "╘═════════════════════════╧═══════════╧══════════════════╧═════════╧═════════════╧═════════╧═════════╧═════════╛\n"
     ]
    }
   ],
   "source": [
    "print_summary(m)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44db2539",
   "metadata": {},
   "source": [
    "The first two lines correspond to the kernel parameters, and the third one gives the likelihood parameter (the noise variance $\\tau^2$ in our model).\n",
    "\n",
    "You can access those values and manually set them to sensible initial guesses. For example:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4c701753",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-22T15:03:53.442386Z",
     "iopub.status.busy": "2022-07-22T15:03:53.442056Z",
     "iopub.status.idle": "2022-07-22T15:03:53.450382Z",
     "shell.execute_reply": "2022-07-22T15:03:53.449756Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Variable 'UnreadVariable' shape=() dtype=float64, numpy=-1.0502256128148466>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.likelihood.variance.assign(0.01)\n",
    "m.kernel.lengthscales.assign(0.3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4199bcb8",
   "metadata": {},
   "source": [
    "## Optimize the model parameters\n",
    "\n",
    "To obtain meaningful predictions, you need to tune the model parameters (that is, the parameters of the kernel, the likelihood, and the mean function if applicable) to the data at hand.\n",
    "\n",
    "There are several optimizers available in GPflow. Here we use the `Scipy` optimizer, which by default implements the L-BFGS-B algorithm. (You can select other algorithms by using the `method=` keyword argument to its `minimize` method; see [the SciPy documentation](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html) for details of available options.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "bbf39805",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-22T15:03:53.452976Z",
     "iopub.status.busy": "2022-07-22T15:03:53.452689Z",
     "iopub.status.idle": "2022-07-22T15:03:53.455912Z",
     "shell.execute_reply": "2022-07-22T15:03:53.455336Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "opt = gpflow.optimizers.Scipy()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c6aa39c",
   "metadata": {},
   "source": [
    "In order to train the model, we need to maximize the log marginal likelihood.\n",
    "GPflow models define a `training_loss` that can be passed to the `minimize`\n",
    "method of an optimizer; in this case it is simply the negative log marginal\n",
    "likelihood. We also need to specify the variables to train with\n",
    "`m.trainable_variables`, and the number of iterations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bb4fd892",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-22T15:03:53.458405Z",
     "iopub.status.busy": "2022-07-22T15:03:53.458115Z",
     "iopub.status.idle": "2022-07-22T15:03:55.690800Z",
     "shell.execute_reply": "2022-07-22T15:03:55.690053Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "╒═════════════════════════╤═══════════╤══════════════════╤═════════╤═════════════╤═════════╤═════════╤═════════╕\n",
      "│ name                    │ class     │ transform        │ prior   │ trainable   │ shape   │ dtype   │   value │\n",
      "╞═════════════════════════╪═══════════╪══════════════════╪═════════╪═════════════╪═════════╪═════════╪═════════╡\n",
      "│ GPR.kernel.variance     │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 7.96581 │\n",
      "├─────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼─────────┤\n",
      "│ GPR.kernel.lengthscales │ Parameter │ Softplus         │         │ True        │ ()      │ float64 │ 0.21242 │\n",
      "├─────────────────────────┼───────────┼──────────────────┼─────────┼─────────────┼─────────┼─────────┼─────────┤\n",
      "│ GPR.likelihood.variance │ Parameter │ Softplus + Shift │         │ True        │ ()      │ float64 │ 0.00576 │\n",
      "╘═════════════════════════╧═══════════╧══════════════════╧═════════╧═════════════╧═════════╧═════════╧═════════╛\n"
     ]
    }
   ],
   "source": [
    "opt_logs = opt.minimize(m.training_loss, m.trainable_variables, options=dict(maxiter=100))\n",
    "print_summary(m)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a270bd72",
   "metadata": {},
   "source": [
    "Notice how the value column has changed.\n",
    "\n",
    "The local optimum found by Maximum Likelihood might not be the one you want (for example, it might be overfitting or oversmooth). This depends on the initial values of the hyperparameters, and is specific to each dataset. As an alternative to Maximum Likelihood, [Markov Chain Monte Carlo (MCMC)](../advanced/mcmc.ipynb) is also available.\n",
    "\n",
    "## Make predictions\n",
    "\n",
    "We can now use the model to make some predictions at the new points `Xnew`. You might be interested in predicting two different quantities: the latent function values `f(Xnew)` (the denoised signal), or the values of new observations `y(Xnew)` (signal + noise). Because we are dealing with Gaussian probabilistic models, the predictions typically produce a mean and variance as output. Alternatively, you can obtain samples of `f(Xnew)` or the log density of the new data points `(Xnew, Ynew)`.\n",
    "\n",
    "GPflow models have several prediction methods:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ed702a8",
   "metadata": {},
   "source": [
    " - `m.predict_f` returns the mean and marginal variance of $f$ at the points `Xnew`.\n",
    "\n",
    " - `m.predict_f` with argument `full_cov=True` returns the mean and the full covariance matrix of $f$ at the points `Xnew`.\n",
    "\n",
    " - `m.predict_f_samples` returns samples of the latent function.\n",
    "\n",
    " - `m.predict_y` returns the mean and variance of a new data point (that is, it includes the noise variance).\n",
    "\n",
    " - `m.predict_log_density` returns the log density of the observations `Ynew` at `Xnew`.\n",
    "\n",
    "We use `predict_f` and `predict_f_samples` to plot 95% confidence intervals and samples from the posterior distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3be01781",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-22T15:03:55.693738Z",
     "iopub.status.busy": "2022-07-22T15:03:55.693424Z",
     "iopub.status.idle": "2022-07-22T15:03:55.884575Z",
     "shell.execute_reply": "2022-07-22T15:03:55.883724Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## generate test points for prediction\n",
    "xx = np.linspace(-0.1, 1.1, 100).reshape(100, 1)  # test points must be of shape (N, D)\n",
    "\n",
    "## predict mean and variance of latent GP at test points\n",
    "mean, var = m.predict_f(xx)\n",
    "\n",
    "## generate 10 samples from posterior\n",
    "tf.random.set_seed(1)  # for reproducibility\n",
    "samples = m.predict_f_samples(xx, 10)  # shape (10, 100, 1)\n",
    "\n",
    "## plot\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(X, Y, \"kx\", mew=2)\n",
    "plt.plot(xx, mean, \"C0\", lw=2)\n",
    "plt.fill_between(\n",
    "    xx[:, 0],\n",
    "    mean[:, 0] - 1.96 * np.sqrt(var[:, 0]),\n",
    "    mean[:, 0] + 1.96 * np.sqrt(var[:, 0]),\n",
    "    color=\"C0\",\n",
    "    alpha=0.2,\n",
    ")\n",
    "\n",
    "plt.plot(xx, samples[:, :, 0].numpy().T, \"C0\", linewidth=0.5)\n",
    "_ = plt.xlim(-0.1, 1.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f3e18db",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "## GP regression in higher dimensions\n",
    "\n",
    "Very little changes when the input space has more than one dimension. By default, the `lengthscales` is an isotropic (scalar) parameter. It is generally recommended that you allow to tune a different lengthscale for each dimension (Automatic Relevance Determination, ARD): simply initialize `lengthscales` with an array of length $D$ corresponding to the input dimension of `X`.  See [Manipulating kernels](../advanced/kernels.ipynb) for further information."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "584ffaa3",
   "metadata": {},
   "source": [
    "## Further reading\n",
    "\n",
    "  - [Stochastic Variational Inference for scalability with SVGP](../advanced/gps_for_big_data.ipynb) for cases where there are a large number of observations.\n",
    "  - [Ordinal regression](../advanced/ordinal_regression.ipynb) if the data is ordinal.\n",
    "  - [Multi-output models and coregionalisation](../advanced/coregionalisation.ipynb) if `Y` is multidimensional."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
