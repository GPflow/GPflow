{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "510d1a75",
   "metadata": {},
   "source": [
    "# Manipulating GPflow models\n",
    "\n",
    "One of the key ingredients in GPflow is the model class, which enables you to carefully control parameters. This notebook shows how some of these parameter control features work, and how to build your own model with GPflow. First we'll look at:\n",
    "\n",
    " - how to view models and parameters\n",
    " - how to set parameter values\n",
    " - how to constrain parameters (for example, variance > 0)\n",
    " - how to fix model parameters\n",
    " - how to apply priors to parameters\n",
    " - how to optimize models\n",
    "\n",
    "Then we'll show how to build a simple logistic regression model, demonstrating the ease of the parameter framework.\n",
    "\n",
    "GPy users should feel right at home, but there are some small differences.\n",
    "\n",
    "First, let's deal with the usual notebook boilerplate and make a simple GP regression model. See [Basic (Gaussian likelihood) GP regression model](../basics/regression.ipynb) for specifics of the model; we just want some parameters to play with."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f03be8fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:08.002072Z",
     "iopub.status.busy": "2022-10-13T08:59:08.001588Z",
     "iopub.status.idle": "2022-10-13T08:59:11.585011Z",
     "shell.execute_reply": "2022-10-13T08:59:11.584387Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-10-13 08:59:08.297206: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2022-10-13 08:59:08.421420: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-10-13 08:59:08.421458: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n",
      "2022-10-13 08:59:08.450686: E tensorflow/stream_executor/cuda/cuda_blas.cc:2981] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-10-13 08:59:09.023057: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory\n",
      "2022-10-13 08:59:09.023159: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory\n",
      "2022-10-13 08:59:09.023169: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.decorator.check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.inheritance.inherit_check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import tensorflow_probability as tfp\n",
    "\n",
    "import gpflow\n",
    "from gpflow.utilities import print_summary, set_trainable, to_default_float"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ac4972e",
   "metadata": {},
   "source": [
    "We begin by creating a very simple GP regression model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a186bb09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.588388Z",
     "iopub.status.busy": "2022-10-13T08:59:11.587964Z",
     "iopub.status.idle": "2022-10-13T08:59:11.659326Z",
     "shell.execute_reply": "2022-10-13T08:59:11.658730Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.checker.ShapeChecker.__init__ which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "2022-10-13 08:59:11.591263: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-10-13 08:59:11.591288: W tensorflow/stream_executor/cuda/cuda_driver.cc:263] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-10-13 08:59:11.591308: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (2163c186b2a0): /proc/driver/nvidia/version does not exist\n",
      "2022-10-13 08:59:11.591547: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "# generate toy data\n",
    "np.random.seed(1)\n",
    "X = np.random.rand(20, 1)\n",
    "Y = np.sin(12 * X) + 0.66 * np.cos(25 * X) + np.random.randn(20, 1) * 0.01\n",
    "\n",
    "m = gpflow.models.GPR(\n",
    "    (X, Y), kernel=gpflow.kernels.Matern32() + gpflow.kernels.Linear()\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bb8946a",
   "metadata": {},
   "source": [
    "## Viewing, getting, and setting parameters\n",
    "You can display the state of the model in a terminal by using `print_summary(m)`. You can change the display format using the `fmt` keyword argument, e.g. `'html'`. In a notebook, you can also use `fmt='notebook'` or set the default printing format as `notebook`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "72592c56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.661987Z",
     "iopub.status.busy": "2022-10-13T08:59:11.661722Z",
     "iopub.status.idle": "2022-10-13T08:59:11.676678Z",
     "shell.execute_reply": "2022-10-13T08:59:11.676184Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print_summary(m, fmt=\"notebook\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "04b05742",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.679070Z",
     "iopub.status.busy": "2022-10-13T08:59:11.678822Z",
     "iopub.status.idle": "2022-10-13T08:59:11.681642Z",
     "shell.execute_reply": "2022-10-13T08:59:11.681146Z"
    }
   },
   "outputs": [],
   "source": [
    "gpflow.config.set_default_summary_fmt(\"notebook\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01f32854",
   "metadata": {},
   "source": [
    "This model has four parameters. The kernel is made of the sum of two parts. The first (counting from zero) is a Matern32 kernel that has a variance parameter and a lengthscales parameter; the second is a linear kernel that has only a variance parameter. There is also a parameter that controls the variance of the noise, as part of the likelihood.\n",
    "\n",
    "All the model variables have been initialized at `1.0`. You can access individual parameters in the same way that you display the state of the model in a terminal; for example, to see all the parameters that are part of the likelihood, run:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "06a9fc76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.683858Z",
     "iopub.status.busy": "2022-10-13T08:59:11.683627Z",
     "iopub.status.idle": "2022-10-13T08:59:11.689549Z",
     "shell.execute_reply": "2022-10-13T08:59:11.689062Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name             </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>Gaussian.variance</td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print_summary(m.likelihood)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f922f7e",
   "metadata": {},
   "source": [
    "This gets more useful with more complex models!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9615fb12",
   "metadata": {},
   "source": [
    "To set the value of a parameter, just use `assign()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "eb452afd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.691914Z",
     "iopub.status.busy": "2022-10-13T08:59:11.691677Z",
     "iopub.status.idle": "2022-10-13T08:59:11.704802Z",
     "shell.execute_reply": "2022-10-13T08:59:11.704326Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.5 </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.01</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "m.kernel.kernels[0].lengthscales.assign(0.5)\n",
    "m.likelihood.variance.assign(0.01)\n",
    "print_summary(m, fmt=\"notebook\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1a9d5e9",
   "metadata": {},
   "source": [
    "## Constraints and trainable variables\n",
    "\n",
    "GPflow helpfully creates an unconstrained representation of all the variables. In the previous example, all the variables are constrained positively (see the **transform** column in the table); the unconstrained representation is given by $\\alpha = \\log(\\exp(\\theta)-1)$. The `trainable_parameters` property returns the constrained values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "881b0690",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.707304Z",
     "iopub.status.busy": "2022-10-13T08:59:11.707036Z",
     "iopub.status.idle": "2022-10-13T08:59:11.717335Z",
     "shell.execute_reply": "2022-10-13T08:59:11.716857Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=0.5>,\n",
       " <Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=1.0>,\n",
       " <Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=1.0>,\n",
       " <Parameter: name=chain_of_shift_of_softplus, dtype=float64, shape=[], fn=\"chain_of_shift_of_softplus\", numpy=0.010000000000000002>)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.trainable_parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74326d85",
   "metadata": {},
   "source": [
    "Each parameter has an `unconstrained_variable` attribute that enables you to access the unconstrained value as a TensorFlow `Variable`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "34fcb36a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.740990Z",
     "iopub.status.busy": "2022-10-13T08:59:11.740696Z",
     "iopub.status.idle": "2022-10-13T08:59:11.745372Z",
     "shell.execute_reply": "2022-10-13T08:59:11.744900Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Variable 'softplus:0' shape=() dtype=float64, numpy=-0.43275212956718856>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p = m.kernel.kernels[0].lengthscales\n",
    "p.unconstrained_variable"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee685d45",
   "metadata": {},
   "source": [
    "You can also check the unconstrained value as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fb2d7eff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.747747Z",
     "iopub.status.busy": "2022-10-13T08:59:11.747501Z",
     "iopub.status.idle": "2022-10-13T08:59:11.752047Z",
     "shell.execute_reply": "2022-10-13T08:59:11.751571Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: shape=(), dtype=float64, numpy=-0.43275212956718856>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p.transform.inverse(p)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9999e2c0",
   "metadata": {},
   "source": [
    "Constraints are handled by the Bijector classes from the `tensorflow_probability` package. You might prefer to use the constraint $\\alpha = \\log(\\theta)$; this is easily done by replacing the parameter with one that has a different `transform` attribute (here we make sure to copy all other attributes across from the old parameter; this is not necessary when there is no `prior` and the `trainable` state is still the default of `True`):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b520f450",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.754451Z",
     "iopub.status.busy": "2022-10-13T08:59:11.754208Z",
     "iopub.status.idle": "2022-10-13T08:59:11.761415Z",
     "shell.execute_reply": "2022-10-13T08:59:11.760895Z"
    }
   },
   "outputs": [],
   "source": [
    "old_parameter = m.kernel.kernels[0].lengthscales\n",
    "new_parameter = gpflow.Parameter(\n",
    "    old_parameter,\n",
    "    trainable=old_parameter.trainable,\n",
    "    prior=old_parameter.prior,\n",
    "    name=old_parameter.name.split(\":\")[\n",
    "        0\n",
    "    ],  # tensorflow is weird and adds ':0' to the name\n",
    "    transform=tfp.bijectors.Exp(),\n",
    ")\n",
    "m.kernel.kernels[0].lengthscales = new_parameter"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db578a31",
   "metadata": {},
   "source": [
    "Though the lengthscale itself remains the same, the unconstrained lengthscale has changed:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f5015cd4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.763918Z",
     "iopub.status.busy": "2022-10-13T08:59:11.763671Z",
     "iopub.status.idle": "2022-10-13T08:59:11.768226Z",
     "shell.execute_reply": "2022-10-13T08:59:11.767748Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: shape=(), dtype=float64, numpy=-0.43275212956718856>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p.transform.inverse(p)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccfa2130",
   "metadata": {},
   "source": [
    "To replace the `transform` of a parameter you need to recreate the parameter with updated transform:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d6495a17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.770519Z",
     "iopub.status.busy": "2022-10-13T08:59:11.770286Z",
     "iopub.status.idle": "2022-10-13T08:59:11.775622Z",
     "shell.execute_reply": "2022-10-13T08:59:11.775133Z"
    }
   },
   "outputs": [],
   "source": [
    "p = m.kernel.kernels[0].variance\n",
    "m.kernel.kernels[0].variance = gpflow.Parameter(\n",
    "    p.numpy(), transform=tfp.bijectors.Exp()\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1055038c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.777974Z",
     "iopub.status.busy": "2022-10-13T08:59:11.777732Z",
     "iopub.status.idle": "2022-10-13T08:59:11.785865Z",
     "shell.execute_reply": "2022-10-13T08:59:11.785372Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Exp             </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Exp             </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.5 </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.01</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print_summary(m, fmt=\"notebook\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4047ad7",
   "metadata": {},
   "source": [
    "## Changing whether a parameter will be trained in optimization\n",
    "\n",
    "Another helpful feature is the ability to fix parameters. To do this, simply set the `trainable` attribute to `False`; this is shown in the **trainable** column of the representation, and the corresponding variable is removed from the free state."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "bcdb302d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.788118Z",
     "iopub.status.busy": "2022-10-13T08:59:11.787878Z",
     "iopub.status.idle": "2022-10-13T08:59:11.807373Z",
     "shell.execute_reply": "2022-10-13T08:59:11.806849Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Exp             </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Exp             </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.5 </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>False      </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.01</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "set_trainable(m.kernel.kernels[1].variance, False)\n",
    "print_summary(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "aa5f621d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.809695Z",
     "iopub.status.busy": "2022-10-13T08:59:11.809446Z",
     "iopub.status.idle": "2022-10-13T08:59:11.816861Z",
     "shell.execute_reply": "2022-10-13T08:59:11.816393Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<Parameter: name=softplus, dtype=float64, shape=[], fn=\"exp\", numpy=0.5>,\n",
       " <Parameter: name=exp, dtype=float64, shape=[], fn=\"exp\", numpy=1.0>,\n",
       " <Parameter: name=chain_of_shift_of_softplus, dtype=float64, shape=[], fn=\"chain_of_shift_of_softplus\", numpy=0.010000000000000002>)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.trainable_parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "921a97fb",
   "metadata": {},
   "source": [
    "To unfix a parameter, just set the `trainable` attribute to `True` again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "235d3dab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.819428Z",
     "iopub.status.busy": "2022-10-13T08:59:11.819183Z",
     "iopub.status.idle": "2022-10-13T08:59:11.827691Z",
     "shell.execute_reply": "2022-10-13T08:59:11.827215Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Exp             </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Exp             </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.5 </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.01</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "set_trainable(m.kernel.kernels[1].variance, True)\n",
    "print_summary(m)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7f1d2d3",
   "metadata": {},
   "source": [
    "**NOTE:** If you want to recursively change the `trainable` status of an object that *contains* parameters, you **must** use the `set_trainable()` utility function.\n",
    "\n",
    "A module (e.g. a model, kernel, likelihood, ... instance) does not have a `trainable` attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1b8ca126",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.830016Z",
     "iopub.status.busy": "2022-10-13T08:59:11.829774Z",
     "iopub.status.idle": "2022-10-13T08:59:11.832973Z",
     "shell.execute_reply": "2022-10-13T08:59:11.832484Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum does not have a trainable attribute\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    m.kernel.trainable\n",
    "except AttributeError:\n",
    "    print(f\"{m.kernel.__class__.__name__} does not have a trainable attribute\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7e4e6040",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.835307Z",
     "iopub.status.busy": "2022-10-13T08:59:11.834914Z",
     "iopub.status.idle": "2022-10-13T08:59:11.849535Z",
     "shell.execute_reply": "2022-10-13T08:59:11.849040Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Exp             </td><td>       </td><td>False      </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Exp             </td><td>       </td><td>False      </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.5 </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>False      </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.01</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "set_trainable(m.kernel, False)\n",
    "print_summary(m)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48ec89f4",
   "metadata": {},
   "source": [
    "## Priors\n",
    "\n",
    "You can set priors in the same way as transforms and trainability, by using `tensorflow_probability` distribution objects. Let's set a Gamma prior on the variance of the Matern32 kernel."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b2145ad2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.851803Z",
     "iopub.status.busy": "2022-10-13T08:59:11.851559Z",
     "iopub.status.idle": "2022-10-13T08:59:11.865245Z",
     "shell.execute_reply": "2022-10-13T08:59:11.864771Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                 </th><th>class    </th><th>transform  </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>Matern32.variance    </td><td>Parameter</td><td>Softplus   </td><td>Gamma  </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "<tr><td>Matern32.lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "k = gpflow.kernels.Matern32()\n",
    "k.variance.prior = tfp.distributions.Gamma(\n",
    "    to_default_float(2), to_default_float(3)\n",
    ")\n",
    "\n",
    "print_summary(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "25cb7a05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.867596Z",
     "iopub.status.busy": "2022-10-13T08:59:11.867351Z",
     "iopub.status.idle": "2022-10-13T08:59:11.876282Z",
     "shell.execute_reply": "2022-10-13T08:59:11.875803Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Exp             </td><td>Gamma  </td><td>False      </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Exp             </td><td>       </td><td>False      </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.5 </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>False      </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.01</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "m.kernel.kernels[0].variance.prior = tfp.distributions.Gamma(\n",
    "    to_default_float(2), to_default_float(3)\n",
    ")\n",
    "print_summary(m)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2134b49c",
   "metadata": {},
   "source": [
    "## Optimization\n",
    "\n",
    "To optimize your model, first create an instance of an optimizer (in this case, `gpflow.optimizers.Scipy`), which has optional arguments that are passed to `scipy.optimize.minimize` (we minimize the negative log likelihood). Then, call the `minimize` method of that optimizer, with your model as the optimization target. Variables that have priors are maximum a priori (MAP) estimated, that is, we add the log prior to the log likelihood, and otherwise use Maximum Likelihood."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a52b8dc2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:11.878707Z",
     "iopub.status.busy": "2022-10-13T08:59:11.878466Z",
     "iopub.status.idle": "2022-10-13T08:59:13.779230Z",
     "shell.execute_reply": "2022-10-13T08:59:13.778656Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "      fun: 27.184339014098025\n",
       " hess_inv: <1x1 LbfgsInvHessProduct with dtype=float64>\n",
       "      jac: array([-1.02640284e-06])\n",
       "  message: 'CONVERGENCE: NORM_OF_PROJECTED_GRADIENT_<=_PGTOL'\n",
       "     nfev: 8\n",
       "      nit: 7\n",
       "     njev: 8\n",
       "   status: 0\n",
       "  success: True\n",
       "        x: array([-0.36990459])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opt = gpflow.optimizers.Scipy()\n",
    "opt.minimize(m.training_loss, variables=m.trainable_variables)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34a0e52e",
   "metadata": {},
   "source": [
    "## Building new models\n",
    "\n",
    "To build new models, you'll need to inherit from `gpflow.models.BayesianModel`.\n",
    "Parameters are instantiated with `gpflow.Parameter`.\n",
    "You might also be interested in `gpflow.Module` (a subclass of `tf.Module`), which acts as a 'container' for `Parameter`s (for example, kernels are `gpflow.Module`s).\n",
    "\n",
    "In this very simple demo, we'll implement linear multiclass classification.\n",
    "\n",
    "There are two parameters: a weight matrix and a bias (offset). You can use\n",
    "Parameter objects directly, like any TensorFlow tensor.\n",
    "\n",
    "The training objective depends on the type of model; it may be possible to\n",
    "implement the exact (log)marginal likelihood, or only a lower bound to the\n",
    "log marginal likelihood (ELBO). You need to implement this as the\n",
    "`maximum_log_likelihood_objective` method. The `BayesianModel` parent class\n",
    "provides a `log_posterior_density` method that returns the\n",
    "`maximum_log_likelihood_objective` plus the sum of the log-density of any priors\n",
    "on hyperparameters, which can be used for MCMC.\n",
    "GPflow provides mixin classes that define a `training_loss` method\n",
    "that returns the negative of (maximum likelihood objective + log prior\n",
    "density) for MLE/MAP estimation to be passed to optimizer's `minimize`\n",
    "method. Models that derive from `InternalDataTrainingLossMixin` are expected to store the data internally, and their `training_loss` does not take any arguments and can be passed directly to `minimize`.\n",
    "Models that take data as an argument to their `maximum_log_likelihood_objective` method derive from `ExternalDataTrainingLossMixin`, which provides a `training_loss_closure` to take the data and return the appropriate closure for `optimizer.minimize`.\n",
    "This is also discussed in the [GPflow with TensorFlow 2 notebook](../intro_to_gpflow2.ipynb)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b89aa847",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:13.782058Z",
     "iopub.status.busy": "2022-10-13T08:59:13.781783Z",
     "iopub.status.idle": "2022-10-13T08:59:13.787189Z",
     "shell.execute_reply": "2022-10-13T08:59:13.786671Z"
    }
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "\n",
    "\n",
    "class LinearMulticlass(\n",
    "    gpflow.models.BayesianModel, gpflow.models.InternalDataTrainingLossMixin\n",
    "):\n",
    "    # The InternalDataTrainingLossMixin provides the training_loss method.\n",
    "    # (There is also an ExternalDataTrainingLossMixin for models that do not encapsulate data.)\n",
    "\n",
    "    def __init__(self, X, Y, name=None):\n",
    "        super().__init__(name=name)  # always call the parent constructor\n",
    "\n",
    "        self.X = X.copy()  # X is a NumPy array of inputs\n",
    "        self.Y = (\n",
    "            Y.copy()\n",
    "        )  # Y is a 1-of-k (one-hot) representation of the labels\n",
    "\n",
    "        self.num_data, self.input_dim = X.shape\n",
    "        _, self.num_classes = Y.shape\n",
    "\n",
    "        # make some parameters\n",
    "        self.W = gpflow.Parameter(\n",
    "            np.random.randn(self.input_dim, self.num_classes)\n",
    "        )\n",
    "        self.b = gpflow.Parameter(np.random.randn(self.num_classes))\n",
    "\n",
    "        # ^^ You must make the parameters attributes of the class for\n",
    "        # them to be picked up by the model. i.e. this won't work:\n",
    "        #\n",
    "        # W = gpflow.Parameter(...    <-- must be self.W\n",
    "\n",
    "    def maximum_log_likelihood_objective(self):\n",
    "        p = tf.nn.softmax(\n",
    "            tf.matmul(self.X, self.W) + self.b\n",
    "        )  # Parameters can be used like a tf.Tensor\n",
    "        return tf.reduce_sum(\n",
    "            tf.math.log(p) * self.Y\n",
    "        )  # be sure to return a scalar"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8419432",
   "metadata": {},
   "source": [
    "...and that's it. Let's build a really simple demo to show that it works."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "43fe26d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:13.789572Z",
     "iopub.status.busy": "2022-10-13T08:59:13.789324Z",
     "iopub.status.idle": "2022-10-13T08:59:14.246028Z",
     "shell.execute_reply": "2022-10-13T08:59:14.245485Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "np.random.seed(123)\n",
    "X = np.vstack(\n",
    "    [\n",
    "        np.random.randn(10, 2) + [2, 2],\n",
    "        np.random.randn(10, 2) + [-2, 2],\n",
    "        np.random.randn(10, 2) + [2, -2],\n",
    "    ]\n",
    ")\n",
    "Y = np.repeat(np.eye(3), 10, 0)\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.style.use(\"ggplot\")\n",
    "%matplotlib inline\n",
    "\n",
    "plt.rcParams[\"figure.figsize\"] = (12, 6)\n",
    "_ = plt.scatter(\n",
    "    X[:, 0], X[:, 1], 100, np.argmax(Y, 1), lw=2, cmap=plt.cm.viridis\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "71c70eda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:14.249298Z",
     "iopub.status.busy": "2022-10-13T08:59:14.248889Z",
     "iopub.status.idle": "2022-10-13T08:59:14.266681Z",
     "shell.execute_reply": "2022-10-13T08:59:14.266183Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "&lt;__main__.LinearMulticlass object at 0x7f948c1e17b0&gt;\n",
       "<table>\n",
       "<thead>\n",
       "<tr><th>name              </th><th>class    </th><th>transform  </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th>value                          </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>LinearMulticlass.W</td><td>Parameter</td><td>Identity   </td><td>       </td><td>True       </td><td>(2, 3) </td><td>float64</td><td>[[-0.77271, 0.79486, 0.31427...</td></tr>\n",
       "<tr><td>LinearMulticlass.b</td><td>Parameter</td><td>Identity   </td><td>       </td><td>True       </td><td>(3,)   </td><td>float64</td><td>[ 0.04549 -0.23309 -1.1983 ]   </td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<__main__.LinearMulticlass object at 0x7f948c1e17b0>\n",
       "name                class      transform    prior    trainable    shape    dtype    value\n",
       "------------------  ---------  -----------  -------  -----------  -------  -------  -------------------------------\n",
       "LinearMulticlass.W  Parameter  Identity              True         (2, 3)   float64  [[-0.77271, 0.79486, 0.31427...\n",
       "LinearMulticlass.b  Parameter  Identity              True         (3,)     float64  [ 0.04549 -0.23309 -1.1983 ]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m = LinearMulticlass(X, Y)\n",
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "a0218c30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:14.269229Z",
     "iopub.status.busy": "2022-10-13T08:59:14.268974Z",
     "iopub.status.idle": "2022-10-13T08:59:14.402781Z",
     "shell.execute_reply": "2022-10-13T08:59:14.402263Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "      fun: 1.2560984620758726e-05\n",
       " hess_inv: <9x9 LbfgsInvHessProduct with dtype=float64>\n",
       "      jac: array([ 4.28392990e-06,  1.15665823e-06, -5.44058813e-06, -2.77570188e-06,\n",
       "        2.97110223e-06, -1.95400347e-07, -8.81900274e-07,  2.52856127e-06,\n",
       "       -1.64666099e-06])\n",
       "  message: 'CONVERGENCE: NORM_OF_PROJECTED_GRADIENT_<=_PGTOL'\n",
       "     nfev: 27\n",
       "      nit: 26\n",
       "     njev: 27\n",
       "   status: 0\n",
       "  success: True\n",
       "        x: array([  8.55849743, -30.63655328,  22.4144818 ,  23.79332963,\n",
       "        21.27896803, -44.17402754,  11.85784428, -12.94743432,\n",
       "        -0.29631308])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opt = gpflow.optimizers.Scipy()\n",
    "opt.minimize(m.training_loss, variables=m.trainable_variables)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a04b43e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:14.405334Z",
     "iopub.status.busy": "2022-10-13T08:59:14.405066Z",
     "iopub.status.idle": "2022-10-13T08:59:14.414023Z",
     "shell.execute_reply": "2022-10-13T08:59:14.413013Z"
    }
   },
   "outputs": [],
   "source": [
    "xx, yy = np.mgrid[-4:4:200j, -4:4:200j]\n",
    "X_test = np.vstack([xx.flatten(), yy.flatten()]).T\n",
    "f_test = np.dot(X_test, m.W.numpy()) + m.b.numpy()\n",
    "p_test = np.exp(f_test)\n",
    "p_test /= p_test.sum(1)[:, None]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "7a87b6d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-13T08:59:14.416452Z",
     "iopub.status.busy": "2022-10-13T08:59:14.416202Z",
     "iopub.status.idle": "2022-10-13T08:59:14.596058Z",
     "shell.execute_reply": "2022-10-13T08:59:14.595541Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12, 6))\n",
    "for i in range(3):\n",
    "    plt.contour(\n",
    "        xx, yy, p_test[:, i].reshape(200, 200), [0.5], colors=\"k\", linewidths=1\n",
    "    )\n",
    "_ = plt.scatter(\n",
    "    X[:, 0], X[:, 1], 100, np.argmax(Y, 1), lw=2, cmap=plt.cm.viridis\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2f2e135",
   "metadata": {},
   "source": [
    "That concludes the new model example and this notebook. You might want to see for yourself that the `LinearMulticlass` model and its parameters have all the functionality demonstrated here. You could also add some priors and run Hamiltonian Monte Carlo using the HMC optimizer `gpflow.train.HMC` and its `sample` method. See [Markov Chain Monte Carlo (MCMC)](../advanced/mcmc.ipynb) for more information on running the sampler."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
