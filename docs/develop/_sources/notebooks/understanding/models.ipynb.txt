{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6d81c3f3",
   "metadata": {},
   "source": [
    "# Manipulating GPflow models\n",
    "\n",
    "One of the key ingredients in GPflow is the model class, which enables you to carefully control parameters. This notebook shows how some of these parameter control features work, and how to build your own model with GPflow. First we'll look at:\n",
    "\n",
    " - how to view models and parameters\n",
    " - how to set parameter values\n",
    " - how to constrain parameters (for example, variance > 0)\n",
    " - how to fix model parameters\n",
    " - how to apply priors to parameters\n",
    " - how to optimize models\n",
    "\n",
    "Then we'll show how to build a simple logistic regression model, demonstrating the ease of the parameter framework.\n",
    "\n",
    "GPy users should feel right at home, but there are some small differences.\n",
    "\n",
    "First, let's deal with the usual notebook boilerplate and make a simple GP regression model. See [Basic (Gaussian likelihood) GP regression model](../basics/regression.ipynb) for specifics of the model; we just want some parameters to play with."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fc2548df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:08.486224Z",
     "iopub.status.busy": "2022-07-21T11:45:08.485810Z",
     "iopub.status.idle": "2022-07-21T11:45:11.726462Z",
     "shell.execute_reply": "2022-07-21T11:45:11.725888Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-07-21 11:45:08.861336: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-07-21 11:45:08.861362: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.decorator.check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.inheritance.inherit_check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import gpflow\n",
    "import tensorflow_probability as tfp\n",
    "from gpflow.utilities import print_summary, set_trainable, to_default_float"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "931ba0cc",
   "metadata": {},
   "source": [
    "We begin by creating a very simple GP regression model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "530d9f01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:11.729817Z",
     "iopub.status.busy": "2022-07-21T11:45:11.729418Z",
     "iopub.status.idle": "2022-07-21T11:45:11.766084Z",
     "shell.execute_reply": "2022-07-21T11:45:11.765549Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.checker.ShapeChecker.__init__ which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "2022-07-21 11:45:11.732695: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-07-21 11:45:11.732719: W tensorflow/stream_executor/cuda/cuda_driver.cc:269] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-07-21 11:45:11.732738: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (ec81a0fa4f1a): /proc/driver/nvidia/version does not exist\n",
      "2022-07-21 11:45:11.732968: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "# generate toy data\n",
    "np.random.seed(1)\n",
    "X = np.random.rand(20, 1)\n",
    "Y = np.sin(12 * X) + 0.66 * np.cos(25 * X) + np.random.randn(20, 1) * 0.01\n",
    "\n",
    "m = gpflow.models.GPR((X, Y), kernel=gpflow.kernels.Matern32() + gpflow.kernels.Linear())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4932d71",
   "metadata": {},
   "source": [
    "## Viewing, getting, and setting parameters\n",
    "You can display the state of the model in a terminal by using `print_summary(m)`. You can change the display format using the `fmt` keyword argument, e.g. `'html'`. In a notebook, you can also use `fmt='notebook'` or set the default printing format as `notebook`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3e86d5e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:11.768722Z",
     "iopub.status.busy": "2022-07-21T11:45:11.768473Z",
     "iopub.status.idle": "2022-07-21T11:45:11.782276Z",
     "shell.execute_reply": "2022-07-21T11:45:11.781804Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print_summary(m, fmt=\"notebook\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d46a7176",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:11.784603Z",
     "iopub.status.busy": "2022-07-21T11:45:11.784363Z",
     "iopub.status.idle": "2022-07-21T11:45:11.787036Z",
     "shell.execute_reply": "2022-07-21T11:45:11.786569Z"
    }
   },
   "outputs": [],
   "source": [
    "gpflow.config.set_default_summary_fmt(\"notebook\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4664a202",
   "metadata": {},
   "source": [
    "This model has four parameters. The kernel is made of the sum of two parts. The first (counting from zero) is a Matern32 kernel that has a variance parameter and a lengthscales parameter; the second is a linear kernel that has only a variance parameter. There is also a parameter that controls the variance of the noise, as part of the likelihood.\n",
    "\n",
    "All the model variables have been initialized at `1.0`. You can access individual parameters in the same way that you display the state of the model in a terminal; for example, to see all the parameters that are part of the likelihood, run:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6ac34c1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:11.789435Z",
     "iopub.status.busy": "2022-07-21T11:45:11.789196Z",
     "iopub.status.idle": "2022-07-21T11:45:11.795006Z",
     "shell.execute_reply": "2022-07-21T11:45:11.794548Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name             </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>Gaussian.variance</td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print_summary(m.likelihood)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ecaed13",
   "metadata": {},
   "source": [
    "This gets more useful with more complex models!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba9241fd",
   "metadata": {},
   "source": [
    "To set the value of a parameter, just use `assign()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ce3e5fc9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:11.817302Z",
     "iopub.status.busy": "2022-07-21T11:45:11.817042Z",
     "iopub.status.idle": "2022-07-21T11:45:11.828578Z",
     "shell.execute_reply": "2022-07-21T11:45:11.828109Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.5 </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.01</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "m.kernel.kernels[0].lengthscales.assign(0.5)\n",
    "m.likelihood.variance.assign(0.01)\n",
    "print_summary(m, fmt=\"notebook\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95f50ce5",
   "metadata": {},
   "source": [
    "## Constraints and trainable variables\n",
    "\n",
    "GPflow helpfully creates an unconstrained representation of all the variables. In the previous example, all the variables are constrained positively (see the **transform** column in the table); the unconstrained representation is given by $\\alpha = \\log(\\exp(\\theta)-1)$. The `trainable_parameters` property returns the constrained values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6596bf1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:11.831006Z",
     "iopub.status.busy": "2022-07-21T11:45:11.830765Z",
     "iopub.status.idle": "2022-07-21T11:45:11.840796Z",
     "shell.execute_reply": "2022-07-21T11:45:11.840331Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=0.5>,\n",
       " <Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=1.0>,\n",
       " <Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=1.0>,\n",
       " <Parameter: name=chain_of_shift_of_softplus, dtype=float64, shape=[], fn=\"chain_of_shift_of_softplus\", numpy=0.009999999999999998>)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.trainable_parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ced2140c",
   "metadata": {},
   "source": [
    "Each parameter has an `unconstrained_variable` attribute that enables you to access the unconstrained value as a TensorFlow `Variable`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4e2b18d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:11.843237Z",
     "iopub.status.busy": "2022-07-21T11:45:11.842997Z",
     "iopub.status.idle": "2022-07-21T11:45:11.847520Z",
     "shell.execute_reply": "2022-07-21T11:45:11.847043Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Variable 'softplus:0' shape=() dtype=float64, numpy=-0.43275212956718856>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p = m.kernel.kernels[0].lengthscales\n",
    "p.unconstrained_variable"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4781ad4",
   "metadata": {},
   "source": [
    "You can also check the unconstrained value as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "590b6ad7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:11.849911Z",
     "iopub.status.busy": "2022-07-21T11:45:11.849584Z",
     "iopub.status.idle": "2022-07-21T11:45:11.853962Z",
     "shell.execute_reply": "2022-07-21T11:45:11.853500Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: shape=(), dtype=float64, numpy=-0.43275212956718856>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p.transform.inverse(p)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a858cbf",
   "metadata": {},
   "source": [
    "Constraints are handled by the Bijector classes from the `tensorflow_probability` package. You might prefer to use the constraint $\\alpha = \\log(\\theta)$; this is easily done by replacing the parameter with one that has a different `transform` attribute (here we make sure to copy all other attributes across from the old parameter; this is not necessary when there is no `prior` and the `trainable` state is still the default of `True`):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1be56753",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:11.856387Z",
     "iopub.status.busy": "2022-07-21T11:45:11.856150Z",
     "iopub.status.idle": "2022-07-21T11:45:11.862536Z",
     "shell.execute_reply": "2022-07-21T11:45:11.862061Z"
    }
   },
   "outputs": [],
   "source": [
    "old_parameter = m.kernel.kernels[0].lengthscales\n",
    "new_parameter = gpflow.Parameter(\n",
    "    old_parameter,\n",
    "    trainable=old_parameter.trainable,\n",
    "    prior=old_parameter.prior,\n",
    "    name=old_parameter.name.split(\":\")[0],  # tensorflow is weird and adds ':0' to the name\n",
    "    transform=tfp.bijectors.Exp(),\n",
    ")\n",
    "m.kernel.kernels[0].lengthscales = new_parameter"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6af0335",
   "metadata": {},
   "source": [
    "Though the lengthscale itself remains the same, the unconstrained lengthscale has changed:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b45f5997",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:11.865065Z",
     "iopub.status.busy": "2022-07-21T11:45:11.864817Z",
     "iopub.status.idle": "2022-07-21T11:45:11.869269Z",
     "shell.execute_reply": "2022-07-21T11:45:11.868803Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: shape=(), dtype=float64, numpy=-0.43275212956718856>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p.transform.inverse(p)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65d4e1c2",
   "metadata": {},
   "source": [
    "To replace the `transform` of a parameter you need to recreate the parameter with updated transform:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "606aeee5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:11.871660Z",
     "iopub.status.busy": "2022-07-21T11:45:11.871295Z",
     "iopub.status.idle": "2022-07-21T11:45:11.876311Z",
     "shell.execute_reply": "2022-07-21T11:45:11.875836Z"
    }
   },
   "outputs": [],
   "source": [
    "p = m.kernel.kernels[0].variance\n",
    "m.kernel.kernels[0].variance = gpflow.Parameter(p.numpy(), transform=tfp.bijectors.Exp())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29601409",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:11.878543Z",
     "iopub.status.busy": "2022-07-21T11:45:11.878305Z",
     "iopub.status.idle": "2022-07-21T11:45:11.886069Z",
     "shell.execute_reply": "2022-07-21T11:45:11.885604Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Exp             </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Exp             </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.5 </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.01</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print_summary(m, fmt=\"notebook\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f299a9fa",
   "metadata": {},
   "source": [
    "## Changing whether a parameter will be trained in optimization\n",
    "\n",
    "Another helpful feature is the ability to fix parameters. To do this, simply set the `trainable` attribute to `False`; this is shown in the **trainable** column of the representation, and the corresponding variable is removed from the free state."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "59c20924",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:11.888432Z",
     "iopub.status.busy": "2022-07-21T11:45:11.888195Z",
     "iopub.status.idle": "2022-07-21T11:45:12.029688Z",
     "shell.execute_reply": "2022-07-21T11:45:12.029162Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Exp             </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Exp             </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.5 </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>False      </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.01</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "set_trainable(m.kernel.kernels[1].variance, False)\n",
    "print_summary(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "66d4cfff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:12.032213Z",
     "iopub.status.busy": "2022-07-21T11:45:12.031948Z",
     "iopub.status.idle": "2022-07-21T11:45:12.039250Z",
     "shell.execute_reply": "2022-07-21T11:45:12.038777Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<Parameter: name=softplus, dtype=float64, shape=[], fn=\"exp\", numpy=0.5>,\n",
       " <Parameter: name=exp, dtype=float64, shape=[], fn=\"exp\", numpy=1.0>,\n",
       " <Parameter: name=chain_of_shift_of_softplus, dtype=float64, shape=[], fn=\"chain_of_shift_of_softplus\", numpy=0.009999999999999998>)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.trainable_parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29ead556",
   "metadata": {},
   "source": [
    "To unfix a parameter, just set the `trainable` attribute to `True` again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b369798f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:12.041716Z",
     "iopub.status.busy": "2022-07-21T11:45:12.041476Z",
     "iopub.status.idle": "2022-07-21T11:45:12.049733Z",
     "shell.execute_reply": "2022-07-21T11:45:12.049268Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Exp             </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Exp             </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.5 </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.01</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "set_trainable(m.kernel.kernels[1].variance, True)\n",
    "print_summary(m)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1f537bd",
   "metadata": {},
   "source": [
    "**NOTE:** If you want to recursively change the `trainable` status of an object that *contains* parameters, you **must** use the `set_trainable()` utility function.\n",
    "\n",
    "A module (e.g. a model, kernel, likelihood, ... instance) does not have a `trainable` attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e6f56755",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:12.052087Z",
     "iopub.status.busy": "2022-07-21T11:45:12.051845Z",
     "iopub.status.idle": "2022-07-21T11:45:12.054946Z",
     "shell.execute_reply": "2022-07-21T11:45:12.054466Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum does not have a trainable attribute\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    m.kernel.trainable\n",
    "except AttributeError:\n",
    "    print(f\"{m.kernel.__class__.__name__} does not have a trainable attribute\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c9814dd8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:12.057500Z",
     "iopub.status.busy": "2022-07-21T11:45:12.057077Z",
     "iopub.status.idle": "2022-07-21T11:45:12.070858Z",
     "shell.execute_reply": "2022-07-21T11:45:12.070390Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Exp             </td><td>       </td><td>False      </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Exp             </td><td>       </td><td>False      </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.5 </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>False      </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.01</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "set_trainable(m.kernel, False)\n",
    "print_summary(m)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e958899",
   "metadata": {},
   "source": [
    "## Priors\n",
    "\n",
    "You can set priors in the same way as transforms and trainability, by using `tensorflow_probability` distribution objects. Let's set a Gamma prior on the variance of the Matern32 kernel."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "febc1d0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:12.073183Z",
     "iopub.status.busy": "2022-07-21T11:45:12.072930Z",
     "iopub.status.idle": "2022-07-21T11:45:12.084684Z",
     "shell.execute_reply": "2022-07-21T11:45:12.084216Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                 </th><th>class    </th><th>transform  </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>Matern32.variance    </td><td>Parameter</td><td>Softplus   </td><td>Gamma  </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "<tr><td>Matern32.lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "k = gpflow.kernels.Matern32()\n",
    "k.variance.prior = tfp.distributions.Gamma(to_default_float(2), to_default_float(3))\n",
    "\n",
    "print_summary(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5043d142",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:12.087020Z",
     "iopub.status.busy": "2022-07-21T11:45:12.086783Z",
     "iopub.status.idle": "2022-07-21T11:45:12.095604Z",
     "shell.execute_reply": "2022-07-21T11:45:12.095121Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                              </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.kernels[0].variance    </td><td>Parameter</td><td>Exp             </td><td>Gamma  </td><td>False      </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Exp             </td><td>       </td><td>False      </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.5 </td></tr>\n",
       "<tr><td>GPR.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>False      </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   1   </td></tr>\n",
       "<tr><td>GPR.likelihood.variance           </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">   0.01</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "m.kernel.kernels[0].variance.prior = tfp.distributions.Gamma(\n",
    "    to_default_float(2), to_default_float(3)\n",
    ")\n",
    "print_summary(m)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad5057a8",
   "metadata": {},
   "source": [
    "## Optimization\n",
    "\n",
    "To optimize your model, first create an instance of an optimizer (in this case, `gpflow.optimizers.Scipy`), which has optional arguments that are passed to `scipy.optimize.minimize` (we minimize the negative log likelihood). Then, call the `minimize` method of that optimizer, with your model as the optimization target. Variables that have priors are maximum a priori (MAP) estimated, that is, we add the log prior to the log likelihood, and otherwise use Maximum Likelihood."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2fda7367",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:12.097876Z",
     "iopub.status.busy": "2022-07-21T11:45:12.097639Z",
     "iopub.status.idle": "2022-07-21T11:45:13.794363Z",
     "shell.execute_reply": "2022-07-21T11:45:13.793826Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "      fun: 27.184339014098022\n",
       " hess_inv: <1x1 LbfgsInvHessProduct with dtype=float64>\n",
       "      jac: array([-1.02640284e-06])\n",
       "  message: 'CONVERGENCE: NORM_OF_PROJECTED_GRADIENT_<=_PGTOL'\n",
       "     nfev: 8\n",
       "      nit: 7\n",
       "     njev: 8\n",
       "   status: 0\n",
       "  success: True\n",
       "        x: array([-0.36990459])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opt = gpflow.optimizers.Scipy()\n",
    "opt.minimize(m.training_loss, variables=m.trainable_variables)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5b13b3f",
   "metadata": {},
   "source": [
    "## Building new models\n",
    "\n",
    "To build new models, you'll need to inherit from `gpflow.models.BayesianModel`.\n",
    "Parameters are instantiated with `gpflow.Parameter`.\n",
    "You might also be interested in `gpflow.Module` (a subclass of `tf.Module`), which acts as a 'container' for `Parameter`s (for example, kernels are `gpflow.Module`s).\n",
    "\n",
    "In this very simple demo, we'll implement linear multiclass classification.\n",
    "\n",
    "There are two parameters: a weight matrix and a bias (offset). You can use\n",
    "Parameter objects directly, like any TensorFlow tensor.\n",
    "\n",
    "The training objective depends on the type of model; it may be possible to\n",
    "implement the exact (log)marginal likelihood, or only a lower bound to the\n",
    "log marginal likelihood (ELBO). You need to implement this as the\n",
    "`maximum_log_likelihood_objective` method. The `BayesianModel` parent class\n",
    "provides a `log_posterior_density` method that returns the\n",
    "`maximum_log_likelihood_objective` plus the sum of the log-density of any priors\n",
    "on hyperparameters, which can be used for MCMC.\n",
    "GPflow provides mixin classes that define a `training_loss` method\n",
    "that returns the negative of (maximum likelihood objective + log prior\n",
    "density) for MLE/MAP estimation to be passed to optimizer's `minimize`\n",
    "method. Models that derive from `InternalDataTrainingLossMixin` are expected to store the data internally, and their `training_loss` does not take any arguments and can be passed directly to `minimize`.\n",
    "Models that take data as an argument to their `maximum_log_likelihood_objective` method derive from `ExternalDataTrainingLossMixin`, which provides a `training_loss_closure` to take the data and return the appropriate closure for `optimizer.minimize`.\n",
    "This is also discussed in the [GPflow with TensorFlow 2 notebook](../intro_to_gpflow2.ipynb)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8686905e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:13.797113Z",
     "iopub.status.busy": "2022-07-21T11:45:13.796829Z",
     "iopub.status.idle": "2022-07-21T11:45:13.801994Z",
     "shell.execute_reply": "2022-07-21T11:45:13.801508Z"
    }
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "\n",
    "\n",
    "class LinearMulticlass(gpflow.models.BayesianModel, gpflow.models.InternalDataTrainingLossMixin):\n",
    "    # The InternalDataTrainingLossMixin provides the training_loss method.\n",
    "    # (There is also an ExternalDataTrainingLossMixin for models that do not encapsulate data.)\n",
    "\n",
    "    def __init__(self, X, Y, name=None):\n",
    "        super().__init__(name=name)  # always call the parent constructor\n",
    "\n",
    "        self.X = X.copy()  # X is a NumPy array of inputs\n",
    "        self.Y = Y.copy()  # Y is a 1-of-k (one-hot) representation of the labels\n",
    "\n",
    "        self.num_data, self.input_dim = X.shape\n",
    "        _, self.num_classes = Y.shape\n",
    "\n",
    "        # make some parameters\n",
    "        self.W = gpflow.Parameter(np.random.randn(self.input_dim, self.num_classes))\n",
    "        self.b = gpflow.Parameter(np.random.randn(self.num_classes))\n",
    "\n",
    "        # ^^ You must make the parameters attributes of the class for\n",
    "        # them to be picked up by the model. i.e. this won't work:\n",
    "        #\n",
    "        # W = gpflow.Parameter(...    <-- must be self.W\n",
    "\n",
    "    def maximum_log_likelihood_objective(self):\n",
    "        p = tf.nn.softmax(\n",
    "            tf.matmul(self.X, self.W) + self.b\n",
    "        )  # Parameters can be used like a tf.Tensor\n",
    "        return tf.reduce_sum(tf.math.log(p) * self.Y)  # be sure to return a scalar"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b3b4bca",
   "metadata": {},
   "source": [
    "...and that's it. Let's build a really simple demo to show that it works."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "4f894e44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:13.804374Z",
     "iopub.status.busy": "2022-07-21T11:45:13.804151Z",
     "iopub.status.idle": "2022-07-21T11:45:14.432566Z",
     "shell.execute_reply": "2022-07-21T11:45:14.432012Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "np.random.seed(123)\n",
    "X = np.vstack(\n",
    "    [\n",
    "        np.random.randn(10, 2) + [2, 2],\n",
    "        np.random.randn(10, 2) + [-2, 2],\n",
    "        np.random.randn(10, 2) + [2, -2],\n",
    "    ]\n",
    ")\n",
    "Y = np.repeat(np.eye(3), 10, 0)\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.style.use(\"ggplot\")\n",
    "%matplotlib inline\n",
    "\n",
    "plt.rcParams[\"figure.figsize\"] = (12, 6)\n",
    "_ = plt.scatter(X[:, 0], X[:, 1], 100, np.argmax(Y, 1), lw=2, cmap=plt.cm.viridis)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "3294ac2b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:14.435372Z",
     "iopub.status.busy": "2022-07-21T11:45:14.434987Z",
     "iopub.status.idle": "2022-07-21T11:45:14.447698Z",
     "shell.execute_reply": "2022-07-21T11:45:14.447195Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "&lt;__main__.LinearMulticlass object at 0x7f073818a2f0&gt;\n",
       "<table>\n",
       "<thead>\n",
       "<tr><th>name              </th><th>class    </th><th>transform  </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th>value                          </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>LinearMulticlass.W</td><td>Parameter</td><td>Identity   </td><td>       </td><td>True       </td><td>(2, 3) </td><td>float64</td><td>[[-0.77271, 0.79486, 0.31427...</td></tr>\n",
       "<tr><td>LinearMulticlass.b</td><td>Parameter</td><td>Identity   </td><td>       </td><td>True       </td><td>(3,)   </td><td>float64</td><td>[ 0.04549 -0.23309 -1.1983 ]   </td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<__main__.LinearMulticlass object at 0x7f073818a2f0>\n",
       "name                class      transform    prior    trainable    shape    dtype    value\n",
       "------------------  ---------  -----------  -------  -----------  -------  -------  -------------------------------\n",
       "LinearMulticlass.W  Parameter  Identity              True         (2, 3)   float64  [[-0.77271, 0.79486, 0.31427...\n",
       "LinearMulticlass.b  Parameter  Identity              True         (3,)     float64  [ 0.04549 -0.23309 -1.1983 ]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m = LinearMulticlass(X, Y)\n",
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "82fcefa6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:14.449857Z",
     "iopub.status.busy": "2022-07-21T11:45:14.449609Z",
     "iopub.status.idle": "2022-07-21T11:45:14.574468Z",
     "shell.execute_reply": "2022-07-21T11:45:14.573956Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "      fun: 1.2560984620758726e-05\n",
       " hess_inv: <9x9 LbfgsInvHessProduct with dtype=float64>\n",
       "      jac: array([ 4.28392990e-06,  1.15665823e-06, -5.44058813e-06, -2.77570188e-06,\n",
       "        2.97110223e-06, -1.95400347e-07, -8.81900274e-07,  2.52856127e-06,\n",
       "       -1.64666099e-06])\n",
       "  message: 'CONVERGENCE: NORM_OF_PROJECTED_GRADIENT_<=_PGTOL'\n",
       "     nfev: 27\n",
       "      nit: 26\n",
       "     njev: 27\n",
       "   status: 0\n",
       "  success: True\n",
       "        x: array([  8.55849743, -30.63655328,  22.4144818 ,  23.79332963,\n",
       "        21.27896803, -44.17402754,  11.85784428, -12.94743432,\n",
       "        -0.29631308])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opt = gpflow.optimizers.Scipy()\n",
    "opt.minimize(m.training_loss, variables=m.trainable_variables)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "68fc8aac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:14.576946Z",
     "iopub.status.busy": "2022-07-21T11:45:14.576692Z",
     "iopub.status.idle": "2022-07-21T11:45:14.585001Z",
     "shell.execute_reply": "2022-07-21T11:45:14.584510Z"
    }
   },
   "outputs": [],
   "source": [
    "xx, yy = np.mgrid[-4:4:200j, -4:4:200j]\n",
    "X_test = np.vstack([xx.flatten(), yy.flatten()]).T\n",
    "f_test = np.dot(X_test, m.W.numpy()) + m.b.numpy()\n",
    "p_test = np.exp(f_test)\n",
    "p_test /= p_test.sum(1)[:, None]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "9027b149",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T11:45:14.587466Z",
     "iopub.status.busy": "2022-07-21T11:45:14.587224Z",
     "iopub.status.idle": "2022-07-21T11:45:14.710723Z",
     "shell.execute_reply": "2022-07-21T11:45:14.710224Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12, 6))\n",
    "for i in range(3):\n",
    "    plt.contour(xx, yy, p_test[:, i].reshape(200, 200), [0.5], colors=\"k\", linewidths=1)\n",
    "_ = plt.scatter(X[:, 0], X[:, 1], 100, np.argmax(Y, 1), lw=2, cmap=plt.cm.viridis)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b4d2948",
   "metadata": {},
   "source": [
    "That concludes the new model example and this notebook. You might want to see for yourself that the `LinearMulticlass` model and its parameters have all the functionality demonstrated here. You could also add some priors and run Hamiltonian Monte Carlo using the HMC optimizer `gpflow.train.HMC` and its `sample` method. See [Markov Chain Monte Carlo (MCMC)](../advanced/mcmc.ipynb) for more information on running the sampler."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
