{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8ef04dd8",
   "metadata": {},
   "source": [
    "# Variational Fourier Features in the GPflow framework\n",
    "\n",
    "In this notebook we demonstrate how new types of inducing variables can easily be incorporated in the GPflow framework. As an example case, we use the variational Fourier features from [Hensman, Durrande, and Solin (JMLR 2018)](http://jmlr.csail.mit.edu/papers/v18/16-579). All equation and table references are to this paper.\n",
    "\n",
    "**Note:** This implementation is meant as an example, not as a feature-complete implementation. For more features, such as multi-dimensional inputs, use the [GPflow 2 version of the original VFF code](https://github.com/st--/VFF).\n",
    "\n",
    "We cannot directly use Fourier features within the multi-output framework without losing the computational advantages, as `Kuu` and `Kuf` for SharedIndependent and SeparateIndependent inducing variables assume that the sub-inducing variable's covariances are simply computed as dense Tensors. However, there is nothing preventing a dedicated implementation of multi-output Fourier features that is computationally more efficient - feel free to discuss this within [the GPflow community](https://github.com/GPflow/GPflow/#the-gpflow-community)!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8e7d4ccb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-20T13:19:27.538893Z",
     "iopub.status.busy": "2022-07-20T13:19:27.538283Z",
     "iopub.status.idle": "2022-07-20T13:19:31.452661Z",
     "shell.execute_reply": "2022-07-20T13:19:31.451767Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-07-20 13:19:27.736640: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-07-20 13:19:27.736679: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.decorator.check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.inheritance.inherit_check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import gpflow\n",
    "from gpflow.inducing_variables import InducingVariables\n",
    "from gpflow.base import TensorLike\n",
    "from gpflow.utilities import to_default_float\n",
    "from gpflow import covariances as cov\n",
    "from gpflow import kullback_leiblers as kl\n",
    "from gpflow.ci_utils import reduce_in_tests\n",
    "from gpflow.experimental.check_shapes import Shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f060b9c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-20T13:19:31.456069Z",
     "iopub.status.busy": "2022-07-20T13:19:31.455576Z",
     "iopub.status.idle": "2022-07-20T13:19:31.459615Z",
     "shell.execute_reply": "2022-07-20T13:19:31.458817Z"
    }
   },
   "outputs": [],
   "source": [
    "# VFF give structured covariance matrices that are computationally efficient.\n",
    "# We take advantage of this using TensorFlow's LinearOperators:\n",
    "BlockDiag = tf.linalg.LinearOperatorBlockDiag\n",
    "Diag = tf.linalg.LinearOperatorDiag\n",
    "LowRank = tf.linalg.LinearOperatorLowRankUpdate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fb06b475",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-20T13:19:31.462284Z",
     "iopub.status.busy": "2022-07-20T13:19:31.461987Z",
     "iopub.status.idle": "2022-07-20T13:19:32.218990Z",
     "shell.execute_reply": "2022-07-20T13:19:32.218293Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91eabf00",
   "metadata": {},
   "source": [
    "The VFF inducing variables are defined as a projection $u_m = \\mathcal{P}_{\\phi_m}(f)$ (eq. (59)) of the GP $f(\\cdot)$ onto a truncated Fourier basis, $\\phi_m = [1, \\cos(\\omega_1(x-a)),\\dots,\\cos(\\omega_M(x-a)),\\sin(\\omega_1(x-a)),\\dots,\\sin(\\omega_M(x-a))]$ (eq. (47)). To represent this we define a new inducing variables class that derives from the `InducingVariables` base class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c5300f43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-20T13:19:32.222323Z",
     "iopub.status.busy": "2022-07-20T13:19:32.221861Z",
     "iopub.status.idle": "2022-07-20T13:19:32.229396Z",
     "shell.execute_reply": "2022-07-20T13:19:32.228244Z"
    }
   },
   "outputs": [],
   "source": [
    "class FourierFeatures1D(InducingVariables):\n",
    "    def __init__(self, a, b, M):\n",
    "        \"\"\"\n",
    "        `a` and `b` define the interval [a, b] of the Fourier representation.\n",
    "        `M` specifies the number of frequencies to use.\n",
    "        \"\"\"\n",
    "        # [a, b] defining the interval of the Fourier representation:\n",
    "        self.a = gpflow.Parameter(a, dtype=gpflow.default_float())\n",
    "        self.b = gpflow.Parameter(b, dtype=gpflow.default_float())\n",
    "        self.M = M\n",
    "        # integer array defining the frequencies, ω_m = 2π (b - a)/m:\n",
    "        self.ms = np.arange(M)\n",
    "\n",
    "    @property\n",
    "    def num_inducing(self):\n",
    "        \"\"\" number of inducing variables (defines dimensionality of q(u)) \"\"\"\n",
    "        return 2 * self.M - 1  # `M` cosine and `M-1` sine components\n",
    "\n",
    "    @property\n",
    "    def shape(self) -> Shape:\n",
    "        M = 2 * self.M - 1\n",
    "        D = 1  # Input size.\n",
    "        P = 1  # Output size.\n",
    "        return (M, D, P)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9b7a9aa",
   "metadata": {},
   "source": [
    "Next, we need to define how to compute $\\mathrm{K}_\\mathbf{uu} = \\operatorname{cov}(u_m, u_{m'})$ (eq. (61)) and $\\mathrm{K}_\\mathbf{uf} = \\operatorname{cov}(u_m, f(x_n))$ (eq. (60))."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2096208c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-20T13:19:32.234997Z",
     "iopub.status.busy": "2022-07-20T13:19:32.234508Z",
     "iopub.status.idle": "2022-07-20T13:19:32.254010Z",
     "shell.execute_reply": "2022-07-20T13:19:32.253372Z"
    }
   },
   "outputs": [],
   "source": [
    "@cov.Kuu.register(FourierFeatures1D, gpflow.kernels.Matern12)\n",
    "def Kuu_matern12_fourierfeatures1d(inducing_variable, kernel, jitter=None):\n",
    "    a, b, ms = (lambda u: (u.a, u.b, u.ms))(inducing_variable)\n",
    "    omegas = 2.0 * np.pi * ms / (b - a)\n",
    "\n",
    "    # Cosine block:\n",
    "    lamb = 1.0 / kernel.lengthscales\n",
    "    two_or_four = to_default_float(tf.where(omegas == 0, 2.0, 4.0))\n",
    "    d_cos = (\n",
    "        (b - a) * (tf.square(lamb) + tf.square(omegas)) / lamb / kernel.variance / two_or_four\n",
    "    )  # eq. (111)\n",
    "    v_cos = tf.ones_like(d_cos) / tf.sqrt(kernel.variance)  # eq. (110)\n",
    "    cosine_block = LowRank(Diag(d_cos, is_positive_definite=True), v_cos[:, None])\n",
    "\n",
    "    # Sine block:\n",
    "    omegas = omegas[tf.not_equal(omegas, 0)]  # the sine block does not include omega=0\n",
    "    d_sin = (\n",
    "        (b - a) * (tf.square(lamb) + tf.square(omegas)) / lamb / kernel.variance / 4.0\n",
    "    )  # eq. (113)\n",
    "    sine_block = Diag(d_sin, is_positive_definite=True)\n",
    "\n",
    "    return BlockDiag([cosine_block, sine_block])\n",
    "\n",
    "\n",
    "@cov.Kuf.register(FourierFeatures1D, gpflow.kernels.Matern12, TensorLike)\n",
    "def Kuf_matern12_fourierfeatures1d(inducing_variable, kernel, X):\n",
    "    X = tf.squeeze(X, axis=1)\n",
    "    a, b, ms = (lambda u: (u.a, u.b, u.ms))(inducing_variable)\n",
    "\n",
    "    omegas = 2.0 * np.pi * ms / (b - a)\n",
    "    Kuf_cos = tf.cos(omegas[:, None] * (X[None, :] - a))\n",
    "    omegas_sin = omegas[tf.not_equal(omegas, 0)]  # don't compute zero frequency\n",
    "    Kuf_sin = tf.sin(omegas_sin[:, None] * (X[None, :] - a))\n",
    "\n",
    "    # correct Kuf outside [a, b] -- see Table 1\n",
    "    Kuf_sin = tf.where((X < a) | (X > b), tf.zeros_like(Kuf_sin), Kuf_sin)  # just zero\n",
    "\n",
    "    left_tail = tf.exp(-tf.abs(X - a) / kernel.lengthscales)[None, :]\n",
    "    right_tail = tf.exp(-tf.abs(X - b) / kernel.lengthscales)[None, :]\n",
    "    Kuf_cos = tf.where(X < a, left_tail, Kuf_cos)  # replace with left tail\n",
    "    Kuf_cos = tf.where(X > b, right_tail, Kuf_cos)  # replace with right tail\n",
    "\n",
    "    return tf.concat([Kuf_cos, Kuf_sin], axis=0)\n",
    "\n",
    "\n",
    "@cov.Kuu.register(FourierFeatures1D, gpflow.kernels.Matern32)\n",
    "def Kuu_matern32_fourierfeatures1d(inducing_variable, kernel, jitter=None):\n",
    "    a, b, ms = (lambda u: (u.a, u.b, u.ms))(inducing_variable)\n",
    "    omegas = 2.0 * np.pi * ms / (b - a)\n",
    "\n",
    "    # Cosine block: eq. (114)\n",
    "    lamb = np.sqrt(3.0) / kernel.lengthscales\n",
    "    four_or_eight = to_default_float(tf.where(omegas == 0, 4.0, 8.0))\n",
    "    d_cos = (\n",
    "        (b - a)\n",
    "        * tf.square(tf.square(lamb) + tf.square(omegas))\n",
    "        / tf.pow(lamb, 3)\n",
    "        / kernel.variance\n",
    "        / four_or_eight\n",
    "    )\n",
    "    v_cos = tf.ones_like(d_cos) / tf.sqrt(kernel.variance)\n",
    "    cosine_block = LowRank(Diag(d_cos, is_positive_definite=True), v_cos[:, None])\n",
    "\n",
    "    # Sine block: eq. (115)\n",
    "    omegas = omegas[tf.not_equal(omegas, 0)]  # don't compute omega=0\n",
    "    d_sin = (\n",
    "        (b - a)\n",
    "        * tf.square(tf.square(lamb) + tf.square(omegas))\n",
    "        / tf.pow(lamb, 3)\n",
    "        / kernel.variance\n",
    "        / 8.0\n",
    "    )\n",
    "    v_sin = omegas / lamb / tf.sqrt(kernel.variance)\n",
    "    sine_block = LowRank(Diag(d_sin, is_positive_definite=True), v_sin[:, None])\n",
    "\n",
    "    return BlockDiag([cosine_block, sine_block])  # eq. (116)\n",
    "\n",
    "\n",
    "@cov.Kuf.register(FourierFeatures1D, gpflow.kernels.Matern32, TensorLike)\n",
    "def Kuf_matern32_fourierfeatures1d(inducing_variable, kernel, X):\n",
    "    X = tf.squeeze(X, axis=1)\n",
    "    a, b, ms = (lambda u: (u.a, u.b, u.ms))(inducing_variable)\n",
    "    omegas = 2.0 * np.pi * ms / (b - a)\n",
    "\n",
    "    Kuf_cos = tf.cos(omegas[:, None] * (X[None, :] - a))\n",
    "    omegas_sin = omegas[tf.not_equal(omegas, 0)]  # don't compute zeros freq.\n",
    "    Kuf_sin = tf.sin(omegas_sin[:, None] * (X[None, :] - a))\n",
    "\n",
    "    # correct Kuf outside [a, b] -- see Table 1\n",
    "\n",
    "    def tail_cos(delta_X):\n",
    "        arg = np.sqrt(3) * tf.abs(delta_X) / kernel.lengthscales\n",
    "        return (1 + arg) * tf.exp(-arg)[None, :]\n",
    "\n",
    "    Kuf_cos = tf.where(X < a, tail_cos(X - a), Kuf_cos)\n",
    "    Kuf_cos = tf.where(X > b, tail_cos(X - b), Kuf_cos)\n",
    "\n",
    "    def tail_sin(delta_X):\n",
    "        arg = np.sqrt(3) * tf.abs(delta_X) / kernel.lengthscales\n",
    "        return delta_X[None, :] * tf.exp(-arg) * omegas_sin[:, None]\n",
    "\n",
    "    Kuf_sin = tf.where(X < a, tail_sin(X - a), Kuf_sin)\n",
    "    Kuf_sin = tf.where(X > b, tail_sin(X - b), Kuf_sin)\n",
    "\n",
    "    return tf.concat([Kuf_cos, Kuf_sin], axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7dbef9b",
   "metadata": {},
   "source": [
    "In principle, this is all we need; however, to be able to take advantage of the structure of `Kuu`, we need to also implement new versions of the KL divergence from the prior to the approximate posterior (`prior_kl`) and the computation of the Gaussian process conditional (posterior) equations:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3be0519c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-20T13:19:32.257039Z",
     "iopub.status.busy": "2022-07-20T13:19:32.256718Z",
     "iopub.status.idle": "2022-07-20T13:19:32.263846Z",
     "shell.execute_reply": "2022-07-20T13:19:32.263239Z"
    }
   },
   "outputs": [],
   "source": [
    "@kl.prior_kl.register(FourierFeatures1D, gpflow.kernels.Kernel, TensorLike, TensorLike)\n",
    "def prior_kl_vff(inducing_variable, kernel, q_mu, q_sqrt, whiten=False):\n",
    "    if whiten:\n",
    "        raise NotImplementedError\n",
    "    K = cov.Kuu(inducing_variable, kernel)\n",
    "    return gauss_kl_vff(q_mu, q_sqrt, K)\n",
    "\n",
    "\n",
    "def gauss_kl_vff(q_mu, q_sqrt, K):\n",
    "    \"\"\"\n",
    "    Compute the KL divergence from\n",
    "\n",
    "          q(x) = N(q_mu, q_sqrt^2)\n",
    "    to\n",
    "          p(x) = N(0, K)\n",
    "\n",
    "    q_mu is a vector [N, 1] that contains the mean.\n",
    "    q_sqrt is a matrix that is the lower triangular square-root matrix of the covariance of q.\n",
    "\n",
    "    K is a positive definite matrix: the covariance of p.\n",
    "    NOTE: K is a LinearOperator that provides efficient methjods\n",
    "        for solve(), log_abs_determinant(), and trace()\n",
    "    \"\"\"\n",
    "    # KL(N₀ || N₁) = ½ [tr(Σ₁⁻¹ Σ₀) + (μ₁ - μ₀)ᵀ Σ₁⁻¹ (μ₁ - μ₀) - k + ln(det(Σ₁)/det(Σ₀))]\n",
    "    # N₀ = q; μ₀ = q_mu, Σ₀ = q_sqrt q_sqrtᵀ\n",
    "    # N₁ = p; μ₁ = 0, Σ₁ = K\n",
    "    # KL(q || p) =\n",
    "    #     ½ [tr(K⁻¹ q_sqrt q_sqrtᵀA + q_muᵀ K⁻¹ q_mu - k + logdet(K) - logdet(q_sqrt q_sqrtᵀ)]\n",
    "    # k = number of dimensions, if q_sqrt is m x m this is m²\n",
    "    Kinv_q_mu = K.solve(q_mu)\n",
    "\n",
    "    mahalanobis_term = tf.squeeze(tf.matmul(q_mu, Kinv_q_mu, transpose_a=True))\n",
    "\n",
    "    # GPflow: q_sqrt is num_latent_gps x N x N\n",
    "    num_latent_gps = to_default_float(tf.shape(q_mu)[1])\n",
    "    logdet_prior = num_latent_gps * K.log_abs_determinant()\n",
    "\n",
    "    product_of_dimensions__int = tf.reduce_prod(tf.shape(q_sqrt)[:-1])  # dimensions are integers\n",
    "    constant_term = to_default_float(product_of_dimensions__int)\n",
    "\n",
    "    Lq = tf.linalg.band_part(q_sqrt, -1, 0)  # force lower triangle\n",
    "    logdet_q = tf.reduce_sum(tf.math.log(tf.square(tf.linalg.diag_part(Lq))))\n",
    "\n",
    "    # S = tf.matmul(q_sqrt, q_sqrt, transpose_b=True)\n",
    "    # trace_term = tf.trace(K.solve(S))\n",
    "    trace_term = tf.squeeze(\n",
    "        tf.reduce_sum(Lq * K.solve(Lq), axis=[-1, -2])\n",
    "    )  # [O(N²) instead of O(N³)\n",
    "\n",
    "    twoKL = trace_term + mahalanobis_term - constant_term + logdet_prior - logdet_q\n",
    "    return 0.5 * twoKL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b62ebf4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-20T13:19:32.266778Z",
     "iopub.status.busy": "2022-07-20T13:19:32.266451Z",
     "iopub.status.idle": "2022-07-20T13:19:32.278791Z",
     "shell.execute_reply": "2022-07-20T13:19:32.278181Z"
    }
   },
   "outputs": [],
   "source": [
    "import gpflow.posteriors\n",
    "\n",
    "\n",
    "class VFFPosterior(gpflow.posteriors.BasePosterior):\n",
    "    def _conditional_fused(self, Xnew, full_cov, full_output_cov):\n",
    "        \"\"\"\n",
    "        Xnew is a tensor with the points of the data or minibatch, shape N x D\n",
    "        \"\"\"\n",
    "        if full_output_cov:\n",
    "            raise NotImplementedError\n",
    "\n",
    "        f = self._q_dist.q_mu\n",
    "        q_sqrt = self._q_dist.q_sqrt\n",
    "\n",
    "        # num_data = tf.shape(Xnew)[0]  # M\n",
    "        num_func = tf.shape(f)[1]  # K\n",
    "\n",
    "        Kuu = cov.Kuu(self.X_data, self.kernel)  # this is now a LinearOperator\n",
    "        Kuf = cov.Kuf(self.X_data, self.kernel, Xnew)  # still a Tensor\n",
    "\n",
    "        KuuInv_Kuf = Kuu.solve(Kuf)\n",
    "\n",
    "        # compute the covariance due to the conditioning\n",
    "        if full_cov:\n",
    "            fvar = self.kernel(Xnew) - tf.matmul(Kuf, KuuInv_Kuf, transpose_a=True)\n",
    "            shape = (num_func, 1, 1)\n",
    "        else:\n",
    "            KufT_KuuInv_Kuf_diag = tf.reduce_sum(Kuf * KuuInv_Kuf, axis=-2)\n",
    "            fvar = self.kernel(Xnew, full_cov=False) - KufT_KuuInv_Kuf_diag\n",
    "            shape = (num_func, 1)\n",
    "        fvar = tf.expand_dims(fvar, 0) * tf.ones(\n",
    "            shape, dtype=gpflow.default_float()\n",
    "        )  # K x N x N or K x N\n",
    "\n",
    "        if self.whiten:\n",
    "            raise NotImplementedError\n",
    "\n",
    "        A = KuuInv_Kuf\n",
    "\n",
    "        # construct the conditional mean\n",
    "        fmean = tf.matmul(A, f, transpose_a=True)\n",
    "\n",
    "        if q_sqrt is not None:\n",
    "            if q_sqrt.get_shape().ndims == 2:\n",
    "                # LTA = A * tf.expand_dims(q_sqrt, 2)  # K x M x N\n",
    "                # won't work  # make ticket for this?\n",
    "                raise NotImplementedError\n",
    "            elif q_sqrt.get_shape().ndims == 3:\n",
    "                # L = tf.matrix_band_part(tf.transpose(q_sqrt, (2, 0, 1)), -1, 0)  # K x M x M\n",
    "\n",
    "                # K x M x N\n",
    "                # A_tiled = tf.expand_dims(A.get(), 0) * tf.ones((num_func, 1, 1), dtype=float_type)\n",
    "\n",
    "                # LTA = tf.matmul(L, A_tiled, transpose_a=True)  # K x M x N\n",
    "                # TODO the following won't work for K > 1\n",
    "                assert q_sqrt.shape[0] == 1\n",
    "                # LTA = (A.T @ DenseMatrix(q_sqrt[:,:,0])).T.get()[None, :, :]\n",
    "                ATL = tf.matmul(A, q_sqrt, transpose_a=True)\n",
    "            else:\n",
    "                raise ValueError(\"Bad dimension for q_sqrt: %s\" % str(q_sqrt.get_shape().ndims))\n",
    "            if full_cov:\n",
    "                # fvar = fvar + tf.matmul(LTA, LTA, transpose_a=True)  # K x N x N\n",
    "                fvar = fvar + tf.matmul(ATL, ATL, transpose_b=True)  # K x N x N\n",
    "            else:\n",
    "                # fvar = fvar + tf.reduce_sum(tf.square(LTA), 1)  # K x N\n",
    "                fvar = fvar + tf.reduce_sum(tf.square(ATL), 2)  # K x N\n",
    "\n",
    "        if not full_cov:\n",
    "            fvar = tf.transpose(fvar)  # N x K\n",
    "\n",
    "        return fmean, fvar\n",
    "\n",
    "    # We can also provide a conditional that precomputes as much as possible,\n",
    "    # to speed up predictions:\n",
    "\n",
    "    def _precompute(self):\n",
    "        Kuu = cov.Kuu(self.X_data, self.kernel)  # this is now a LinearOperator\n",
    "\n",
    "        q_mu = self._q_dist.q_mu\n",
    "        q_sqrt = self._q_dist.q_sqrt\n",
    "\n",
    "        if self.whiten:\n",
    "            raise NotImplementedError\n",
    "        else:\n",
    "            # alpha = Kuu⁻¹ q_mu\n",
    "            alpha = Kuu.solve(q_mu)  # type: tf.Tensor\n",
    "\n",
    "        if self.whiten:\n",
    "            raise NotImplementedError\n",
    "        else:\n",
    "            # Qinv = Kuu⁻¹ - Kuu⁻¹ S Kuu⁻¹\n",
    "            KuuInv_qsqrt = Kuu.solve(q_sqrt)\n",
    "            KuuInv_covu_KuuInv = tf.matmul(KuuInv_qsqrt, KuuInv_qsqrt, transpose_b=True)\n",
    "\n",
    "        Qinv = Kuu.inverse().to_dense() - KuuInv_covu_KuuInv\n",
    "\n",
    "        return gpflow.posteriors.PrecomputedValue.wrap_alpha_Qinv(alpha, Qinv)\n",
    "\n",
    "    def _conditional_with_precompute(self, cache, Xnew, full_cov, full_output_cov):\n",
    "        alpha, Qinv = cache\n",
    "\n",
    "        if full_output_cov:\n",
    "            raise NotImplementedError\n",
    "\n",
    "        Kuf = cov.Kuf(self.X_data, self.kernel, Xnew)  # still a Tensor\n",
    "\n",
    "        # construct the conditional mean\n",
    "        fmean = tf.matmul(Kuf, alpha, transpose_a=True)\n",
    "\n",
    "        num_func = tf.shape(alpha)[1]  # K\n",
    "        Qinv_Kuf = tf.matmul(Qinv, Kuf)\n",
    "\n",
    "        # compute the covariance due to the conditioning\n",
    "        if full_cov:\n",
    "            fvar = self.kernel(Xnew) - tf.matmul(Kuf, Qinv_Kuf, transpose_a=True)\n",
    "        else:\n",
    "            KufT_Qinv_Kuf_diag = tf.reduce_sum(Kuf * Qinv_Kuf, axis=-2)\n",
    "            fvar = self.kernel(Xnew, full_cov=False) - KufT_Qinv_Kuf_diag\n",
    "            fvar = tf.transpose(fvar)\n",
    "\n",
    "        return fmean, fvar"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f64350e4",
   "metadata": {},
   "source": [
    "We now have to register our Posterior object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "94fe96a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-20T13:19:32.327087Z",
     "iopub.status.busy": "2022-07-20T13:19:32.326530Z",
     "iopub.status.idle": "2022-07-20T13:19:32.331854Z",
     "shell.execute_reply": "2022-07-20T13:19:32.330724Z"
    }
   },
   "outputs": [],
   "source": [
    "@gpflow.posteriors.get_posterior_class.register(gpflow.kernels.Kernel, FourierFeatures1D)\n",
    "def _get_posterior_vff(kernel, inducing_variable):\n",
    "    return VFFPosterior"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26586b6b",
   "metadata": {},
   "source": [
    "`gpflow.conditionals.conditional` is a short-hand for calling the fused prediction code path:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b73aba8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-20T13:19:32.336954Z",
     "iopub.status.busy": "2022-07-20T13:19:32.336416Z",
     "iopub.status.idle": "2022-07-20T13:19:32.455994Z",
     "shell.execute_reply": "2022-07-20T13:19:32.455319Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.checker.ShapeChecker.__init__ which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "2022-07-20 13:19:32.343187: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-07-20 13:19:32.343219: W tensorflow/stream_executor/cuda/cuda_driver.cc:269] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-07-20 13:19:32.343239: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (743ae1591448): /proc/driver/nvidia/version does not exist\n",
      "2022-07-20 13:19:32.343505: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "Mf = 2\n",
    "M = 2 * Mf - 1\n",
    "kernel = gpflow.kernels.Matern32()\n",
    "inducing_variable = FourierFeatures1D(-0.5, 1.5, Mf)\n",
    "\n",
    "Xnew = np.random.rand(7, 1)\n",
    "f = np.random.randn(M, 1)\n",
    "q_sqrt = tf.convert_to_tensor(np.tril(np.random.randn(1, M, M)))\n",
    "\n",
    "conditional_f_mean, conditional_f_var = gpflow.conditionals.conditional(\n",
    "    Xnew, inducing_variable, kernel, f, q_sqrt=q_sqrt, white=False, full_cov=True\n",
    ")\n",
    "\n",
    "posterior = VFFPosterior(kernel, inducing_variable, f, q_sqrt, whiten=False, precompute_cache=None)\n",
    "posterior_f_mean, posterior_f_var = posterior.fused_predict_f(Xnew, full_cov=True)\n",
    "\n",
    "np.testing.assert_array_equal(conditional_f_mean, posterior_f_mean)\n",
    "np.testing.assert_array_equal(conditional_f_var, posterior_f_var)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbcbe8a6",
   "metadata": {},
   "source": [
    "We can also call the cached path:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2da74419",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-20T13:19:32.458984Z",
     "iopub.status.busy": "2022-07-20T13:19:32.458654Z",
     "iopub.status.idle": "2022-07-20T13:19:32.517493Z",
     "shell.execute_reply": "2022-07-20T13:19:32.516770Z"
    }
   },
   "outputs": [],
   "source": [
    "posterior.update_cache(gpflow.posteriors.PrecomputeCacheType.TENSOR)\n",
    "precomputed_posterior_f_mean, precomputed_posterior_f_var = posterior.predict_f(Xnew, full_cov=True)\n",
    "\n",
    "np.testing.assert_allclose(precomputed_posterior_f_mean, posterior_f_mean)\n",
    "np.testing.assert_allclose(precomputed_posterior_f_var, posterior_f_var)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f747ee0",
   "metadata": {},
   "source": [
    "We now demonstrate how to use these new types of inducing variables with the `SVGP` model class. First, let's create some toy data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "dbe6ec61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-20T13:19:32.520959Z",
     "iopub.status.busy": "2022-07-20T13:19:32.520617Z",
     "iopub.status.idle": "2022-07-20T13:19:32.528635Z",
     "shell.execute_reply": "2022-07-20T13:19:32.527393Z"
    }
   },
   "outputs": [],
   "source": [
    "X = np.linspace(-2, 2, 510)\n",
    "Xnew = np.linspace(-4, 4, 501)\n",
    "\n",
    "\n",
    "def f(x):\n",
    "    return np.cos(2 * np.pi * x / 4 * 2)\n",
    "\n",
    "\n",
    "F = f(X)\n",
    "Fnew = f(Xnew)\n",
    "noise_scale = 0.1\n",
    "np.random.seed(1)\n",
    "Y = F + np.random.randn(*F.shape) * noise_scale\n",
    "\n",
    "data = (X.reshape(-1, 1), Y.reshape(-1, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d7737a99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-20T13:19:32.533291Z",
     "iopub.status.busy": "2022-07-20T13:19:32.532705Z",
     "iopub.status.idle": "2022-07-20T13:19:32.731590Z",
     "shell.execute_reply": "2022-07-20T13:19:32.730629Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.plot(X, F, label=\"f(x)\")\n",
    "plt.plot(X, Y, \".\", label=\"observations\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d110bf3",
   "metadata": {},
   "source": [
    "Setting up an SVGP model with variational Fourier feature inducing variables is as simple as replacing the `inducing_variable` argument:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ab83c5af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-20T13:19:32.736151Z",
     "iopub.status.busy": "2022-07-20T13:19:32.735659Z",
     "iopub.status.idle": "2022-07-20T13:19:32.795508Z",
     "shell.execute_reply": "2022-07-20T13:19:32.794473Z"
    }
   },
   "outputs": [],
   "source": [
    "Mfreq = 9\n",
    "m = gpflow.models.SVGP(\n",
    "    kernel=gpflow.kernels.Matern32(),\n",
    "    likelihood=gpflow.likelihoods.Gaussian(variance=noise_scale ** 2),\n",
    "    inducing_variable=FourierFeatures1D(-4.5, 4.5, Mfreq),\n",
    "    num_data=len(X),\n",
    "    whiten=False,\n",
    ")\n",
    "gpflow.set_trainable(m.kernel, False)\n",
    "gpflow.set_trainable(m.likelihood, False)\n",
    "gpflow.set_trainable(m.inducing_variable, True)  # whether to optimize bounds [a, b]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1c8aa068",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-20T13:19:32.799656Z",
     "iopub.status.busy": "2022-07-20T13:19:32.799321Z",
     "iopub.status.idle": "2022-07-20T13:19:59.058661Z",
     "shell.execute_reply": "2022-07-20T13:19:59.057991Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                    </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape      </th><th>dtype  </th><th>value                                      </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>SVGP.kernel.variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>False      </td><td>()         </td><td>float64</td><td>1.0                                        </td></tr>\n",
       "<tr><td>SVGP.kernel.lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>False      </td><td>()         </td><td>float64</td><td>1.0                                        </td></tr>\n",
       "<tr><td>SVGP.likelihood.variance</td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>False      </td><td>()         </td><td>float64</td><td>0.01                                       </td></tr>\n",
       "<tr><td>SVGP.inducing_variable.a</td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>-4.18351                                   </td></tr>\n",
       "<tr><td>SVGP.inducing_variable.b</td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>4.18402                                    </td></tr>\n",
       "<tr><td>SVGP.q_mu               </td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>(17, 1)    </td><td>float64</td><td>[[0.89075...                               </td></tr>\n",
       "<tr><td>SVGP.q_sqrt             </td><td>Parameter</td><td>FillTriangular  </td><td>       </td><td>True       </td><td>(1, 17, 17)</td><td>float64</td><td>[[[1.35057e+00, 0.00000e+00, 0.00000e+00...</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "opt = gpflow.optimizers.Scipy()\n",
    "opt.minimize(\n",
    "    m.training_loss_closure(data),\n",
    "    m.trainable_variables,\n",
    "    options=dict(maxiter=reduce_in_tests(5000)),\n",
    ")\n",
    "\n",
    "gpflow.utilities.print_summary(m, fmt=\"notebook\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "feaa7ae6",
   "metadata": {},
   "source": [
    "For comparison we also construct an SVGP model using inducing points and an exact GPR model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9d5e1960",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-20T13:19:59.061703Z",
     "iopub.status.busy": "2022-07-20T13:19:59.061349Z",
     "iopub.status.idle": "2022-07-20T13:19:59.095613Z",
     "shell.execute_reply": "2022-07-20T13:19:59.094820Z"
    }
   },
   "outputs": [],
   "source": [
    "m_ip = gpflow.models.SVGP(\n",
    "    kernel=gpflow.kernels.Matern32(),\n",
    "    likelihood=gpflow.likelihoods.Gaussian(variance=noise_scale ** 2),\n",
    "    inducing_variable=np.linspace(-2, 2, Mfreq * 2 - 1)[:, None],\n",
    "    num_data=len(X),\n",
    "    whiten=False,\n",
    ")\n",
    "gpflow.set_trainable(m_ip.kernel, False)\n",
    "gpflow.set_trainable(m_ip.likelihood, False)\n",
    "gpflow.set_trainable(m_ip.inducing_variable, True)  # whether to optimize inducing point locations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7bfa0379",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-20T13:19:59.098813Z",
     "iopub.status.busy": "2022-07-20T13:19:59.098546Z",
     "iopub.status.idle": "2022-07-20T13:20:03.481295Z",
     "shell.execute_reply": "2022-07-20T13:20:03.480485Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                    </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape      </th><th>dtype  </th><th>value                                </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>SVGP.kernel.variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>False      </td><td>()         </td><td>float64</td><td>1.0                                  </td></tr>\n",
       "<tr><td>SVGP.kernel.lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>False      </td><td>()         </td><td>float64</td><td>1.0                                  </td></tr>\n",
       "<tr><td>SVGP.likelihood.variance</td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>False      </td><td>()         </td><td>float64</td><td>0.01                                 </td></tr>\n",
       "<tr><td>SVGP.inducing_variable.Z</td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>(17, 1)    </td><td>float64</td><td>[[-1.93002...                        </td></tr>\n",
       "<tr><td>SVGP.q_mu               </td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>(17, 1)    </td><td>float64</td><td>[[0.96123...                         </td></tr>\n",
       "<tr><td>SVGP.q_sqrt             </td><td>Parameter</td><td>FillTriangular  </td><td>       </td><td>True       </td><td>(1, 17, 17)</td><td>float64</td><td>[[[2.165e-02, 0.000e+00, 0.000e+00...</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "opt = gpflow.optimizers.Scipy()\n",
    "opt.minimize(\n",
    "    m_ip.training_loss_closure(data),\n",
    "    m_ip.trainable_variables,\n",
    "    options=dict(maxiter=reduce_in_tests(5000)),\n",
    ")\n",
    "\n",
    "gpflow.utilities.print_summary(m_ip, fmt=\"notebook\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "fa300b40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-20T13:20:03.484821Z",
     "iopub.status.busy": "2022-07-20T13:20:03.484354Z",
     "iopub.status.idle": "2022-07-20T13:20:03.514325Z",
     "shell.execute_reply": "2022-07-20T13:20:03.513691Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                   </th><th>class    </th><th>transform  </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>GPR.kernel.variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>False      </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "<tr><td>GPR.kernel.lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>False      </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">      1</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "m_ref = gpflow.models.GPR((X.reshape(-1, 1), Y.reshape(-1, 1)), kernel=gpflow.kernels.Matern32())\n",
    "m_ref.likelihood.variance = np.array(noise_scale ** 2).astype(np.float64)\n",
    "gpflow.set_trainable(m_ref.kernel, False)\n",
    "gpflow.set_trainable(m_ref.likelihood, False)\n",
    "\n",
    "# Because we fixed the kernel and likelihood hyperparameters, we don't need to optimize anything.\n",
    "\n",
    "gpflow.utilities.print_summary(m_ref, fmt=\"notebook\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "cfa53061",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-20T13:20:03.517999Z",
     "iopub.status.busy": "2022-07-20T13:20:03.517690Z",
     "iopub.status.idle": "2022-07-20T13:20:03.660046Z",
     "shell.execute_reply": "2022-07-20T13:20:03.659364Z"
    },
    "lines_to_next_cell": 1
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LML (exact GPR) = 402.2158074486284\n",
      "ELBO (SVGP, inducing points) = 365.31215466596103\n",
      "ELBO (SVGP, Fourier features) = 171.03923686986113\n"
     ]
    }
   ],
   "source": [
    "exact_gpr_lml = m_ref.log_marginal_likelihood().numpy().item()\n",
    "print(\"LML (exact GPR) =\", exact_gpr_lml)\n",
    "ip_svgp_elbo = m_ip.elbo(data).numpy().item()\n",
    "print(\"ELBO (SVGP, inducing points) =\", ip_svgp_elbo)\n",
    "vff_svgp_elbo = m.elbo(data).numpy().item()\n",
    "print(\"ELBO (SVGP, Fourier features) =\", vff_svgp_elbo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c8d12473",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-20T13:20:03.663118Z",
     "iopub.status.busy": "2022-07-20T13:20:03.662759Z",
     "iopub.status.idle": "2022-07-20T13:20:04.024150Z",
     "shell.execute_reply": "2022-07-20T13:20:04.023003Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_gp(m, Xnew, name=\"\"):\n",
    "    Fmean, Fvar = m.predict_f(Xnew[:, None])\n",
    "    Fmean = Fmean.numpy().squeeze()\n",
    "    Fvar = Fvar.numpy().squeeze()\n",
    "    (p,) = plt.plot(Xnew, Fmean, label=name)\n",
    "    plt.fill_between(\n",
    "        Xnew, Fmean - 2 * np.sqrt(Fvar), Fmean + 2 * np.sqrt(Fvar), alpha=0.3, color=p.get_color()\n",
    "    )\n",
    "\n",
    "\n",
    "def plot_data():\n",
    "    plt.plot(Xnew, Fnew, label=\"f(x)\")\n",
    "    plt.plot(X, Y, \".\", label=\"observations\")\n",
    "\n",
    "\n",
    "plt.figure(figsize=(15, 10))\n",
    "plot_data()\n",
    "plot_gp(m, Xnew, \"VFF [ELBO={:.3}]\".format(vff_svgp_elbo))\n",
    "plot_gp(m_ip, Xnew, \"inducing points [ELBO={:.3}]\".format(ip_svgp_elbo))\n",
    "plot_gp(m_ref, Xnew, \"exact [LML={:.3}]\".format(exact_gpr_lml))\n",
    "plt.legend(loc=\"best\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "encoding": "# -*- coding: utf-8 -*-",
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
