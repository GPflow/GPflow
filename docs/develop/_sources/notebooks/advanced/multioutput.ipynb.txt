{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "23d6c490",
   "metadata": {},
   "source": [
    "# Multi-output Gaussian processes in GPflow"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9b3437d",
   "metadata": {},
   "source": [
    "This notebook shows how to construct a multi-output GP model using GPflow, together with different interdomain inducing variables which lead to different approximation properties. GPflow provides a framework for specifying multioutput GP priors, and interdomain approximations which is\n",
    "- modular, by providing a consistent interface for the user of the resulting `SVGP` model,\n",
    "- extensible, by allowing new interdomain variables and kernels to be specified while reusing exising code where possible,\n",
    "- efficient, by allowing the most efficient custom code path to be specified where desired.\n",
    "\n",
    "Getting to grips with the maths and code can be a bit daunting, so to accompany the documentation there is an [in-depth review on arXiv](https://arxiv.org/abs/2003.01115), which provides a unified mathematical framework, together with a high-level description of software design choices in GPflow.\n",
    "\n",
    "This notebook shows the various design choices that can be made, to show the reader the flexibility of the framework. This is done in the hope that an example is provided that can be easily adapted to the special case that the reader wants to implement.\n",
    "\n",
    "A reader who just wants to use a multioutput kernel should simply choose the most efficient set of inducing variables.\n",
    "\n",
    "To cite this framework, please reference our [arXiv paper](https://arxiv.org/abs/2003.01115).\n",
    "```\n",
    "@article{GPflow2020multioutput,\n",
    "  author = {{van der Wilk}, Mark and Dutordoir, Vincent and John, ST and\n",
    "            Artemev, Artem and Adam, Vincent and Hensman, James},\n",
    "  title = {A Framework for Interdomain and Multioutput {G}aussian Processes},\n",
    "  year = {2020},\n",
    "  journal = {arXiv:2003.01115},\n",
    "  url = {https://arxiv.org/abs/2003.01115}\n",
    "}\n",
    "```\n",
    "\n",
    "\\begin{equation}\n",
    "\\newcommand{\\GP}{\\mathcal{GP}}\n",
    "\\newcommand{\\NN}{\\mathcal{N}}\n",
    "\\newcommand{\\LL}{\\mathcal{L}}\n",
    "\\newcommand{\\RR}{\\mathbb{R}}\n",
    "\\newcommand{\\EE}{\\mathbb{E}}\n",
    "\\newcommand{\\valpha}{\\boldsymbol\\alpha}\n",
    "\\newcommand{\\vf}{\\mathbf{f}}\n",
    "\\newcommand{\\vF}{\\mathbf{F}}\n",
    "\\newcommand{\\vg}{\\mathbf{g}}\n",
    "\\newcommand{\\vW}{\\mathbf{W}}\n",
    "\\newcommand{\\vI}{\\mathbf{I}}\n",
    "\\newcommand{\\vZ}{\\mathbf{Z}}\n",
    "\\newcommand{\\vu}{\\mathbf{u}}\n",
    "\\newcommand{\\vU}{\\mathbf{U}}\n",
    "\\newcommand{\\vX}{\\mathbf{X}}\n",
    "\\newcommand{\\vY}{\\mathbf{Y}}\n",
    "\\newcommand{\\identity}{\\mathbb{I}}\n",
    "\\end{equation}\n",
    "\n",
    "\n",
    "\n",
    "## Task\n",
    "We will consider a regression problem for functions $f: \\mathbb{R}^D \\rightarrow \\mathbb{R}^P$. We assume that the dataset is of the form $(X, f_1), \\dots, (X, f_P)$, that is, we observe all the outputs for a particular input location (for cases where there are **not** fully observed outputs for each input, see [A simple demonstration of coregionalization](./coregionalisation.ipynb)).\n",
    "\n",
    "Here we assume a model of the form:\n",
    "\\begin{equation}\n",
    "f(x) = W g(x),\n",
    "\\end{equation}\n",
    "where $g(x) \\in \\mathbb{R}^L$, $f(x) \\in \\mathbb{R}^P$ and $W \\in \\mathbb{R}^{P \\times L}$. We assume that the outputs of $g$ are uncorrelated, and that by *mixing* them with $W$ they become correlated. In this notebook, we show how to build this model using Sparse Variational Gaussian Process (SVGP) for $g$, which scales well with the numbers of data points and outputs.\n",
    "\n",
    "Here we have two options for $g$:\n",
    "1. The output dimensions of $g$ share the same kernel.\n",
    "1. Each output of $g$ has a separate kernel.\n",
    "\n",
    "\n",
    "In addition, we have two further suboptions for the inducing inputs of $g$:\n",
    "1. The instances of $g$ share the same inducing inputs.\n",
    "1. Each output of $g$ has its own set of inducing inputs.\n",
    "\n",
    "The notation is as follows:\n",
    "- $X \\in \\mathbb{R}^{N \\times D}$ denotes the input\n",
    "- $Y \\in \\RR^{N \\times P}$ denotes the output\n",
    "- $k_{1..L}$, $L$ are kernels on $\\RR^{N \\times D}$\n",
    "- $g_{1..L}$, $L$ are independent $\\GP$s  with $g_l \\sim \\GP(0,k_l)$\n",
    "- $f_{1..P}$, $P$ are correlated  $\\GP$s  with $\\vf = \\vW \\vg$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5fdce024",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:32.235775Z",
     "iopub.status.busy": "2022-10-10T10:43:32.235518Z",
     "iopub.status.idle": "2022-10-10T10:43:36.453339Z",
     "shell.execute_reply": "2022-10-10T10:43:36.452721Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-10-10 10:43:33.052799: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2022-10-10 10:43:33.182174: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-10-10 10:43:33.182204: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n",
      "2022-10-10 10:43:33.209908: E tensorflow/stream_executor/cuda/cuda_blas.cc:2981] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-10-10 10:43:33.850132: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory\n",
      "2022-10-10 10:43:33.850195: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory\n",
      "2022-10-10 10:43:33.850203: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.decorator.check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.inheritance.inherit_check_shapes which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "import gpflow as gpf\n",
    "from gpflow.ci_utils import reduce_in_tests\n",
    "from gpflow.utilities import print_summary\n",
    "\n",
    "gpf.config.set_default_float(np.float64)\n",
    "gpf.config.set_default_summary_fmt(\"notebook\")\n",
    "np.random.seed(0)\n",
    "%matplotlib inline\n",
    "\n",
    "MAXITER = reduce_in_tests(2000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a399bacf",
   "metadata": {},
   "source": [
    "## Generate synthetic data\n",
    "We create a utility function to generate synthetic data. We assume that:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c765512a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:36.456499Z",
     "iopub.status.busy": "2022-10-10T10:43:36.456075Z",
     "iopub.status.idle": "2022-10-10T10:43:36.459261Z",
     "shell.execute_reply": "2022-10-10T10:43:36.458770Z"
    }
   },
   "outputs": [],
   "source": [
    "N = 100  # number of points\n",
    "D = 1  # number of input dimensions\n",
    "M = 15  # number of inducing points\n",
    "L = 2  # number of latent GPs\n",
    "P = 3  # number of observations = output dimensions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "94966a36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:36.461501Z",
     "iopub.status.busy": "2022-10-10T10:43:36.461253Z",
     "iopub.status.idle": "2022-10-10T10:43:36.465355Z",
     "shell.execute_reply": "2022-10-10T10:43:36.464844Z"
    }
   },
   "outputs": [],
   "source": [
    "def generate_data(N=100):\n",
    "    X = np.random.rand(N)[:, None] * 10 - 5  # Inputs = N x D\n",
    "    G = np.hstack((0.5 * np.sin(3 * X) + X, 3.0 * np.cos(X) - X))  # G = N x L\n",
    "    W = np.array([[0.5, -0.3, 1.5], [-0.4, 0.43, 0.0]])  # L x P\n",
    "    F = np.matmul(G, W)  # N x P\n",
    "    Y = F + np.random.randn(*F.shape) * [0.2, 0.2, 0.2]\n",
    "\n",
    "    return X, Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "41362113",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:36.467534Z",
     "iopub.status.busy": "2022-10-10T10:43:36.467287Z",
     "iopub.status.idle": "2022-10-10T10:43:36.470475Z",
     "shell.execute_reply": "2022-10-10T10:43:36.470007Z"
    }
   },
   "outputs": [],
   "source": [
    "X, Y = data = generate_data(N)\n",
    "Zinit = np.linspace(-5, 5, M)[:, None]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ea2bf76",
   "metadata": {},
   "source": [
    "We create a utility function for plotting:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7ec8db35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:36.472974Z",
     "iopub.status.busy": "2022-10-10T10:43:36.472705Z",
     "iopub.status.idle": "2022-10-10T10:43:36.477615Z",
     "shell.execute_reply": "2022-10-10T10:43:36.477124Z"
    }
   },
   "outputs": [],
   "source": [
    "def plot_model(m, lower=-8.0, upper=8.0):\n",
    "    pX = np.linspace(lower, upper, 100)[:, None]\n",
    "    pY, pYv = m.predict_y(pX)\n",
    "    if pY.ndim == 3:\n",
    "        pY = pY[:, 0, :]\n",
    "    plt.plot(X, Y, \"x\")\n",
    "    plt.gca().set_prop_cycle(None)\n",
    "    plt.plot(pX, pY)\n",
    "    for i in range(pY.shape[1]):\n",
    "        top = pY[:, i] + 2.0 * pYv[:, i] ** 0.5\n",
    "        bot = pY[:, i] - 2.0 * pYv[:, i] ** 0.5\n",
    "        plt.fill_between(pX[:, 0], top, bot, alpha=0.3)\n",
    "    plt.xlabel(\"X\")\n",
    "    plt.ylabel(\"f\")\n",
    "    plt.title(f\"ELBO: {m.elbo(data):.3}\")\n",
    "    plt.plot(Z, Z * 0.0, \"o\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16ce4812",
   "metadata": {},
   "source": [
    "## Model the outputs of $f(x)$ directly\n",
    "The three following examples show how to model the outputs of the model $f(x)$ directly. Mathematically, this case is equivalent to having:\n",
    "\\begin{equation}\n",
    "f(x) = I g(x),\n",
    "\\end{equation}\n",
    "i.e. $W = I$ and $P = L$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d685a3b4",
   "metadata": {},
   "source": [
    "### 1. Shared independent multi-output kernel (MOK) and shared independent inducing variables\n",
    "Here the priors on all outputs are constrained to have the same kernel hyperparameters. We also share the inducing inputs between all outputs. The different GPs are independent both in the prior and the approximate posterior."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c74aae7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:36.479942Z",
     "iopub.status.busy": "2022-10-10T10:43:36.479706Z",
     "iopub.status.idle": "2022-10-10T10:43:36.533697Z",
     "shell.execute_reply": "2022-10-10T10:43:36.532928Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/circleci/project/gpflow/experimental/utils.py:42: UserWarning: You're calling gpflow.experimental.check_shapes.checker.ShapeChecker.__init__ which is considered *experimental*. Expect: breaking changes, poor documentation, and bugs.\n",
      "  warn(\n",
      "2022-10-10 10:43:36.482226: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-10-10 10:43:36.482252: W tensorflow/stream_executor/cuda/cuda_driver.cc:263] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-10-10 10:43:36.482273: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (1c153489d315): /proc/driver/nvidia/version does not exist\n",
      "2022-10-10 10:43:36.482515: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "# create multi-output kernel\n",
    "kernel = gpf.kernels.SharedIndependent(\n",
    "    gpf.kernels.SquaredExponential() + gpf.kernels.Linear(), output_dim=P\n",
    ")\n",
    "# initialization of inducing input locations (M random points from the training inputs)\n",
    "Z = Zinit.copy()\n",
    "# create multi-output inducing variables from Z\n",
    "iv = gpf.inducing_variables.SharedIndependentInducingVariables(\n",
    "    gpf.inducing_variables.InducingPoints(Z)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e61236f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:36.536354Z",
     "iopub.status.busy": "2022-10-10T10:43:36.536082Z",
     "iopub.status.idle": "2022-10-10T10:43:36.603864Z",
     "shell.execute_reply": "2022-10-10T10:43:36.603105Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                                      </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape      </th><th>dtype  </th><th>value           </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>SVGP.kernel.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>1.0             </td></tr>\n",
       "<tr><td>SVGP.kernel.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>1.0             </td></tr>\n",
       "<tr><td>SVGP.kernel.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>1.0             </td></tr>\n",
       "<tr><td>SVGP.likelihood.variance                  </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>1.0             </td></tr>\n",
       "<tr><td>SVGP.inducing_variable.inducing_variable.Z</td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>(15, 1)    </td><td>float64</td><td>[[-5....        </td></tr>\n",
       "<tr><td>SVGP.q_mu                                 </td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>(15, 3)    </td><td>float64</td><td>[[0., 0., 0.... </td></tr>\n",
       "<tr><td>SVGP.q_sqrt                               </td><td>Parameter</td><td>FillTriangular  </td><td>       </td><td>True       </td><td>(3, 15, 15)</td><td>float64</td><td>[[[1., 0., 0....</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create SVGP model as usual and optimize\n",
    "m = gpf.models.SVGP(\n",
    "    kernel, gpf.likelihoods.Gaussian(), inducing_variable=iv, num_latent_gps=P\n",
    ")\n",
    "print_summary(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "180eb44f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:36.606581Z",
     "iopub.status.busy": "2022-10-10T10:43:36.606321Z",
     "iopub.status.idle": "2022-10-10T10:43:43.836827Z",
     "shell.execute_reply": "2022-10-10T10:43:43.836234Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " This problem is unconstrained.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RUNNING THE L-BFGS-B CODE\n",
      "\n",
      "           * * *\n",
      "\n",
      "Machine precision = 2.220D-16\n",
      " N =          424     M =           10\n",
      "\n",
      "At X0         0 variables are exactly at the bounds\n",
      "\n",
      "At iterate    0    f=  3.26251D+03    |proj g|=  1.79322D+03\n",
      "\n",
      "At iterate   50    f=  1.60046D+02    |proj g|=  2.23880D+01\n",
      "\n",
      "At iterate  100    f=  6.25482D+01    |proj g|=  2.71201D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  150    f=  5.46511D+01    |proj g|=  1.08489D+01\n",
      "\n",
      "At iterate  200    f=  5.04147D+01    |proj g|=  9.69613D+00\n",
      "\n",
      "At iterate  250    f=  4.81768D+01    |proj g|=  6.17771D+00\n",
      "\n",
      "At iterate  300    f=  4.64853D+01    |proj g|=  1.63270D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  350    f=  4.53993D+01    |proj g|=  2.58286D+00\n",
      "\n",
      "At iterate  400    f=  4.45053D+01    |proj g|=  1.75085D+00\n",
      "\n",
      "At iterate  450    f=  4.37208D+01    |proj g|=  9.96513D+00\n",
      "\n",
      "At iterate  500    f=  4.30009D+01    |proj g|=  7.76101D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  550    f=  4.27248D+01    |proj g|=  1.73770D+00\n",
      "\n",
      "At iterate  600    f=  4.26050D+01    |proj g|=  1.99376D+00\n",
      "\n",
      "At iterate  650    f=  4.25214D+01    |proj g|=  2.13490D+00\n",
      "\n",
      "At iterate  700    f=  4.24760D+01    |proj g|=  1.29972D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  750    f=  4.24513D+01    |proj g|=  1.92102D+00\n",
      "\n",
      "At iterate  800    f=  4.24395D+01    |proj g|=  3.95727D-01\n",
      "\n",
      "At iterate  850    f=  4.24342D+01    |proj g|=  1.09160D+00\n",
      "\n",
      "At iterate  900    f=  4.24302D+01    |proj g|=  2.21299D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  950    f=  4.24268D+01    |proj g|=  3.62403D-01\n",
      "\n",
      "At iterate 1000    f=  4.24250D+01    |proj g|=  3.53533D-01\n",
      "\n",
      "At iterate 1050    f=  4.24241D+01    |proj g|=  8.04352D-02\n",
      "\n",
      "At iterate 1100    f=  4.24236D+01    |proj g|=  1.52831D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1150    f=  4.24231D+01    |proj g|=  3.58038D-01\n",
      "\n",
      "At iterate 1200    f=  4.24223D+01    |proj g|=  4.90681D-01\n",
      "\n",
      "At iterate 1250    f=  4.24220D+01    |proj g|=  1.03745D-01\n",
      "\n",
      "At iterate 1300    f=  4.24218D+01    |proj g|=  8.42608D-02\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1350    f=  4.24216D+01    |proj g|=  5.29683D-02\n",
      "\n",
      "At iterate 1400    f=  4.24213D+01    |proj g|=  1.53513D-01\n",
      "\n",
      "At iterate 1450    f=  4.24211D+01    |proj g|=  2.80217D-01\n",
      "\n",
      "At iterate 1500    f=  4.24209D+01    |proj g|=  4.67469D-02\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1550    f=  4.24207D+01    |proj g|=  6.32664D-02\n",
      "\n",
      "At iterate 1600    f=  4.24207D+01    |proj g|=  1.13515D-01\n",
      "\n",
      "At iterate 1650    f=  4.24206D+01    |proj g|=  6.66171D-02\n",
      "\n",
      "At iterate 1700    f=  4.24206D+01    |proj g|=  3.85838D-02\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1750    f=  4.24205D+01    |proj g|=  4.35149D-02\n",
      "\n",
      "At iterate 1800    f=  4.24205D+01    |proj g|=  3.67244D-02\n",
      "\n",
      "At iterate 1850    f=  4.24204D+01    |proj g|=  1.49520D-02\n",
      "\n",
      "At iterate 1900    f=  4.24204D+01    |proj g|=  8.04920D-02\n",
      "\n",
      "           * * *\n",
      "\n",
      "Tit   = total number of iterations\n",
      "Tnf   = total number of function evaluations\n",
      "Tnint = total number of segments explored during Cauchy searches\n",
      "Skip  = number of BFGS updates skipped\n",
      "Nact  = number of active bounds at final generalized Cauchy point\n",
      "Projg = norm of the final projected gradient\n",
      "F     = final function value\n",
      "\n",
      "           * * *\n",
      "\n",
      "   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F\n",
      "  424   1900   2026      1     0     0   8.049D-02   4.242D+01\n",
      "  F =   42.420419749804282     \n",
      "\n",
      "CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH             \n"
     ]
    }
   ],
   "source": [
    "def optimize_model_with_scipy(model):\n",
    "    optimizer = gpf.optimizers.Scipy()\n",
    "    optimizer.minimize(\n",
    "        model.training_loss_closure(data),\n",
    "        variables=model.trainable_variables,\n",
    "        method=\"l-bfgs-b\",\n",
    "        options={\"disp\": 50, \"maxiter\": MAXITER},\n",
    "    )\n",
    "\n",
    "\n",
    "optimize_model_with_scipy(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "870126e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:43.870763Z",
     "iopub.status.busy": "2022-10-10T10:43:43.870237Z",
     "iopub.status.idle": "2022-10-10T10:43:43.887047Z",
     "shell.execute_reply": "2022-10-10T10:43:43.886511Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                                      </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape      </th><th>dtype  </th><th>value                                   </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>SVGP.kernel.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>0.92881                                 </td></tr>\n",
       "<tr><td>SVGP.kernel.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>0.79845                                 </td></tr>\n",
       "<tr><td>SVGP.kernel.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>1.21136                                 </td></tr>\n",
       "<tr><td>SVGP.likelihood.variance                  </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>0.03966                                 </td></tr>\n",
       "<tr><td>SVGP.inducing_variable.inducing_variable.Z</td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>(15, 1)    </td><td>float64</td><td>[[-4.83987...                           </td></tr>\n",
       "<tr><td>SVGP.q_mu                                 </td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>(15, 3)    </td><td>float64</td><td>[[-0.90194, 0.69922, -1.47534...        </td></tr>\n",
       "<tr><td>SVGP.q_sqrt                               </td><td>Parameter</td><td>FillTriangular  </td><td>       </td><td>True       </td><td>(3, 15, 15)</td><td>float64</td><td>[[[1.7140e-02, 0.0000e+00, 0.0000e+00...</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print_summary(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ef7487f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:43.889574Z",
     "iopub.status.busy": "2022-10-10T10:43:43.889312Z",
     "iopub.status.idle": "2022-10-10T10:43:44.192373Z",
     "shell.execute_reply": "2022-10-10T10:43:44.191836Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot predictions and observations\n",
    "plot_model(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9af1a631",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:44.195219Z",
     "iopub.status.busy": "2022-10-10T10:43:44.194945Z",
     "iopub.status.idle": "2022-10-10T10:43:44.204513Z",
     "shell.execute_reply": "2022-10-10T10:43:44.204011Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                                            </th><th>class    </th><th>transform  </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>SharedIndependent.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.92881</td></tr>\n",
       "<tr><td>SharedIndependent.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.79845</td></tr>\n",
       "<tr><td>SharedIndependent.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">1.21136</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=0.7984468434302114>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print_summary(m.kernel)\n",
    "m.kernel.kernel.kernels[0].lengthscales"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf634d05",
   "metadata": {},
   "source": [
    "### 2. Separate independent MOK and shared independent inducing variables\n",
    "Here we allow different hyperparameters for the priors of each output. We still share the inducing inputs between all outputs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a74a77a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:44.207214Z",
     "iopub.status.busy": "2022-10-10T10:43:44.206952Z",
     "iopub.status.idle": "2022-10-10T10:43:44.241623Z",
     "shell.execute_reply": "2022-10-10T10:43:44.241040Z"
    }
   },
   "outputs": [],
   "source": [
    "# Create list of kernels for each output\n",
    "kern_list = [\n",
    "    gpf.kernels.SquaredExponential() + gpf.kernels.Linear() for _ in range(P)\n",
    "]\n",
    "# Create multi-output kernel from kernel list\n",
    "kernel = gpf.kernels.SeparateIndependent(kern_list)\n",
    "# initialization of inducing input locations (M random points from the training inputs)\n",
    "Z = Zinit.copy()\n",
    "# create multi-output inducing variables from Z\n",
    "iv = gpf.inducing_variables.SharedIndependentInducingVariables(\n",
    "    gpf.inducing_variables.InducingPoints(Z)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "586ed831",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:44.244546Z",
     "iopub.status.busy": "2022-10-10T10:43:44.244279Z",
     "iopub.status.idle": "2022-10-10T10:43:44.265373Z",
     "shell.execute_reply": "2022-10-10T10:43:44.264768Z"
    }
   },
   "outputs": [],
   "source": [
    "# create SVGP model as usual and optimize\n",
    "m = gpf.models.SVGP(\n",
    "    kernel, gpf.likelihoods.Gaussian(), inducing_variable=iv, num_latent_gps=P\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e05546e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:44.268062Z",
     "iopub.status.busy": "2022-10-10T10:43:44.267805Z",
     "iopub.status.idle": "2022-10-10T10:43:55.334084Z",
     "shell.execute_reply": "2022-10-10T10:43:55.333361Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /tmp/max_venv/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py:629: calling map_fn_v2 (from tensorflow.python.ops.map_fn) with dtype is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use fn_output_signature instead\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " This problem is unconstrained.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RUNNING THE L-BFGS-B CODE\n",
      "\n",
      "           * * *\n",
      "\n",
      "Machine precision = 2.220D-16\n",
      " N =          430     M =           10\n",
      "\n",
      "At X0         0 variables are exactly at the bounds\n",
      "\n",
      "At iterate    0    f=  3.26251D+03    |proj g|=  1.79322D+03\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate   50    f=  1.94337D+02    |proj g|=  7.19126D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  100    f=  1.67801D+02    |proj g|=  2.54936D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  150    f=  5.95688D+01    |proj g|=  1.30478D+01\n",
      "\n",
      "At iterate  200    f=  4.96488D+01    |proj g|=  1.91983D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  250    f=  4.66541D+01    |proj g|=  9.62574D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  300    f=  4.46522D+01    |proj g|=  1.25628D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  350    f=  4.33838D+01    |proj g|=  1.27690D+01\n",
      "\n",
      "At iterate  400    f=  4.17217D+01    |proj g|=  2.23241D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  450    f=  4.03379D+01    |proj g|=  1.06276D+01\n",
      "\n",
      "At iterate  500    f=  3.94733D+01    |proj g|=  1.26023D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  550    f=  3.86382D+01    |proj g|=  6.46691D+00\n",
      "\n",
      "At iterate  600    f=  3.82440D+01    |proj g|=  8.13901D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  650    f=  3.79726D+01    |proj g|=  1.78131D+01\n",
      "\n",
      "At iterate  700    f=  3.77627D+01    |proj g|=  4.74212D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  750    f=  3.75797D+01    |proj g|=  4.30812D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  800    f=  3.74646D+01    |proj g|=  2.35469D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  850    f=  3.73922D+01    |proj g|=  2.49940D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  900    f=  3.73327D+01    |proj g|=  3.86056D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  950    f=  3.72995D+01    |proj g|=  4.21572D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1000    f=  3.72792D+01    |proj g|=  1.44563D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1050    f=  3.72648D+01    |proj g|=  6.49190D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1100    f=  3.72528D+01    |proj g|=  2.51480D-01\n",
      "\n",
      "At iterate 1150    f=  3.72404D+01    |proj g|=  5.61992D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1200    f=  3.72295D+01    |proj g|=  8.27107D-01\n",
      "\n",
      "At iterate 1250    f=  3.72184D+01    |proj g|=  8.95014D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1300    f=  3.72112D+01    |proj g|=  7.43351D-01\n",
      "\n",
      "At iterate 1350    f=  3.72035D+01    |proj g|=  4.59073D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1400    f=  3.71966D+01    |proj g|=  1.51816D+00\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "At iterate 1450    f=  3.71901D+01    |proj g|=  7.04316D-01\n",
      "\n",
      "At iterate 1500    f=  3.71865D+01    |proj g|=  6.89060D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1550    f=  3.71839D+01    |proj g|=  5.07504D-01\n",
      "\n",
      "At iterate 1600    f=  3.71816D+01    |proj g|=  8.58259D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1650    f=  3.71800D+01    |proj g|=  2.92423D-01\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "At iterate 1700    f=  3.71790D+01    |proj g|=  1.39011D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1750    f=  3.71784D+01    |proj g|=  1.47100D-01\n",
      "\n",
      "At iterate 1800    f=  3.71781D+01    |proj g|=  1.46424D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1850    f=  3.71779D+01    |proj g|=  4.22140D-02\n",
      "\n",
      "At iterate 1900    f=  3.71777D+01    |proj g|=  9.24390D-02\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1950    f=  3.71777D+01    |proj g|=  5.53324D-02\n",
      "\n",
      "           * * *\n",
      "\n",
      "Tit   = total number of iterations\n",
      "Tnf   = total number of function evaluations\n",
      "Tnint = total number of segments explored during Cauchy searches\n",
      "Skip  = number of BFGS updates skipped\n",
      "Nact  = number of active bounds at final generalized Cauchy point\n",
      "Projg = norm of the final projected gradient\n",
      "F     = final function value\n",
      "\n",
      "           * * *\n",
      "\n",
      "   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F\n",
      "  430   1983   2103      1     0     0   1.796D-01   3.718D+01\n",
      "  F =   37.177665022320539     \n",
      "\n",
      "CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH             \n"
     ]
    }
   ],
   "source": [
    "optimize_model_with_scipy(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3e0b2bc8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:55.336774Z",
     "iopub.status.busy": "2022-10-10T10:43:55.336498Z",
     "iopub.status.idle": "2022-10-10T10:43:55.349876Z",
     "shell.execute_reply": "2022-10-10T10:43:55.349238Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                                                  </th><th>class    </th><th>transform  </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>SeparateIndependent.kernels[0].kernels[0].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.86258</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[0].kernels[0].lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.93443</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[0].kernels[1].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.86384</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[1].kernels[0].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.75038</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[1].kernels[0].lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.96988</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[1].kernels[1].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.53124</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[2].kernels[0].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">1.11067</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[2].kernels[0].lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.74903</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[2].kernels[1].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">2.23295</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print_summary(m.kernel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c1ebd58c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:55.352496Z",
     "iopub.status.busy": "2022-10-10T10:43:55.352222Z",
     "iopub.status.idle": "2022-10-10T10:43:59.182532Z",
     "shell.execute_reply": "2022-10-10T10:43:59.181871Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_model(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a959e17a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:59.185214Z",
     "iopub.status.busy": "2022-10-10T10:43:59.184942Z",
     "iopub.status.idle": "2022-10-10T10:43:59.192422Z",
     "shell.execute_reply": "2022-10-10T10:43:59.191805Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=0.9344271026474873>,\n",
       " <Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=0.9698768175450306>,\n",
       " <Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=0.7490276029858081>]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[k.kernels[0].lengthscales for k in m.kernel.kernels]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a60bc59f",
   "metadata": {},
   "source": [
    "### 3. Separate independent kernel and separate independent inducing variables\n",
    "Here we allow different hyperparameters for the priors of each output. We now allow different inducing inputs for each output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c80e77b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:59.195045Z",
     "iopub.status.busy": "2022-10-10T10:43:59.194775Z",
     "iopub.status.idle": "2022-10-10T10:43:59.233925Z",
     "shell.execute_reply": "2022-10-10T10:43:59.233260Z"
    }
   },
   "outputs": [],
   "source": [
    "# Create list of kernels for each output\n",
    "kern_list = [\n",
    "    gpf.kernels.SquaredExponential() + gpf.kernels.Linear() for _ in range(P)\n",
    "]\n",
    "# Create multi-output kernel from kernel list\n",
    "kernel = gpf.kernels.SeparateIndependent(kern_list)\n",
    "# initialization of inducing input locations, one set of locations per output\n",
    "Zs = [Zinit.copy() for _ in range(P)]\n",
    "# initialize as list inducing inducing variables\n",
    "iv_list = [gpf.inducing_variables.InducingPoints(Z) for Z in Zs]\n",
    "# create multi-output inducing variables from iv_list\n",
    "iv = gpf.inducing_variables.SeparateIndependentInducingVariables(iv_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1788ad1",
   "metadata": {},
   "source": [
    "**NOTE:** While the inducing points are independent, there needs to be the same number of inducing points per dimension."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "67b94756",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:59.237013Z",
     "iopub.status.busy": "2022-10-10T10:43:59.236724Z",
     "iopub.status.idle": "2022-10-10T10:43:59.264591Z",
     "shell.execute_reply": "2022-10-10T10:43:59.263922Z"
    }
   },
   "outputs": [],
   "source": [
    "# create SVGP model as usual and optimize\n",
    "m = gpf.models.SVGP(\n",
    "    kernel, gpf.likelihoods.Gaussian(), inducing_variable=iv, num_latent_gps=P\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "939eacfb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:43:59.267546Z",
     "iopub.status.busy": "2022-10-10T10:43:59.267278Z",
     "iopub.status.idle": "2022-10-10T10:44:10.629238Z",
     "shell.execute_reply": "2022-10-10T10:44:10.628036Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " This problem is unconstrained.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RUNNING THE L-BFGS-B CODE\n",
      "\n",
      "           * * *\n",
      "\n",
      "Machine precision = 2.220D-16\n",
      " N =          460     M =           10\n",
      "\n",
      "At X0         0 variables are exactly at the bounds\n",
      "\n",
      "At iterate    0    f=  3.26251D+03    |proj g|=  1.79322D+03\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate   50    f=  1.91729D+02    |proj g|=  6.27078D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  100    f=  1.11226D+02    |proj g|=  1.01543D+02\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  150    f=  5.20161D+01    |proj g|=  1.30689D+01\n",
      "\n",
      "At iterate  200    f=  4.69361D+01    |proj g|=  4.69177D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  250    f=  4.41766D+01    |proj g|=  7.17047D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  300    f=  4.27943D+01    |proj g|=  9.90431D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  350    f=  4.12960D+01    |proj g|=  7.53606D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  400    f=  3.95955D+01    |proj g|=  1.22008D+01\n",
      "\n",
      "At iterate  450    f=  3.86108D+01    |proj g|=  1.92450D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  500    f=  3.81436D+01    |proj g|=  1.11775D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  550    f=  3.79090D+01    |proj g|=  2.47366D+00\n",
      "\n",
      "At iterate  600    f=  3.77848D+01    |proj g|=  2.24553D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  650    f=  3.76905D+01    |proj g|=  2.38986D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  700    f=  3.75869D+01    |proj g|=  4.36481D+00\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "At iterate  750    f=  3.74777D+01    |proj g|=  5.00007D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  800    f=  3.73676D+01    |proj g|=  2.15240D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  850    f=  3.72695D+01    |proj g|=  2.68041D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  900    f=  3.71963D+01    |proj g|=  1.70180D+00\n",
      "\n",
      "At iterate  950    f=  3.71482D+01    |proj g|=  1.29328D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1000    f=  3.71074D+01    |proj g|=  3.89082D+00\n",
      "\n",
      "At iterate 1050    f=  3.70615D+01    |proj g|=  1.19608D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1100    f=  3.70273D+01    |proj g|=  2.00785D+00\n",
      "\n",
      "At iterate 1150    f=  3.69988D+01    |proj g|=  1.69787D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1200    f=  3.69847D+01    |proj g|=  6.74138D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1250    f=  3.69750D+01    |proj g|=  5.19511D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1300    f=  3.69698D+01    |proj g|=  5.78420D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1350    f=  3.69662D+01    |proj g|=  6.25408D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1400    f=  3.69632D+01    |proj g|=  5.50439D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1450    f=  3.69610D+01    |proj g|=  3.13294D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1500    f=  3.69587D+01    |proj g|=  5.10488D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1550    f=  3.69564D+01    |proj g|=  1.81866D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1600    f=  3.69542D+01    |proj g|=  3.27195D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1650    f=  3.69527D+01    |proj g|=  1.99318D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1700    f=  3.69517D+01    |proj g|=  4.44632D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1750    f=  3.69509D+01    |proj g|=  2.32143D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1800    f=  3.69503D+01    |proj g|=  1.32929D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1850    f=  3.69497D+01    |proj g|=  2.12914D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1900    f=  3.69492D+01    |proj g|=  1.48367D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1950    f=  3.69488D+01    |proj g|=  1.89027D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "At iterate 2000    f=  3.69484D+01    |proj g|=  1.24718D-01\n",
      "\n",
      "           * * *\n",
      "\n",
      "Tit   = total number of iterations\n",
      "Tnf   = total number of function evaluations\n",
      "Tnint = total number of segments explored during Cauchy searches\n",
      "Skip  = number of BFGS updates skipped\n",
      "Nact  = number of active bounds at final generalized Cauchy point\n",
      "Projg = norm of the final projected gradient\n",
      "F     = final function value\n",
      "\n",
      "           * * *\n",
      "\n",
      "   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F\n",
      "  460   2000   2140      1     0     0   1.247D-01   3.695D+01\n",
      "  F =   36.948410222551317     \n",
      "\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT                 \n"
     ]
    }
   ],
   "source": [
    "optimize_model_with_scipy(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1cf6fd29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:44:10.632047Z",
     "iopub.status.busy": "2022-10-10T10:44:10.631765Z",
     "iopub.status.idle": "2022-10-10T10:44:11.996746Z",
     "shell.execute_reply": "2022-10-10T10:44:11.995966Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_model(m)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f4d6a00",
   "metadata": {},
   "source": [
    "The following plot shows that we use different inducing *inputs* in each output dimension."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "42918225",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:44:11.999791Z",
     "iopub.status.busy": "2022-10-10T10:44:11.999398Z",
     "iopub.status.idle": "2022-10-10T10:44:14.015071Z",
     "shell.execute_reply": "2022-10-10T10:44:14.014506Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in range(len(m.inducing_variable.inducing_variable_list)):\n",
    "    q_mu_unwhitened, q_var_unwhitened = m.predict_f(\n",
    "        m.inducing_variable.inducing_variable_list[i].Z\n",
    "    )\n",
    "    plt.plot(\n",
    "        m.inducing_variable.inducing_variable_list[i].Z.numpy(),\n",
    "        q_mu_unwhitened[:, i, None].numpy(),\n",
    "        \"o\",\n",
    "    )\n",
    "plt.gca().set_xticks(np.linspace(-6, 6, 20), minor=True)\n",
    "plt.gca().set_yticks(np.linspace(-9, 9, 20), minor=True)\n",
    "plt.grid(which=\"minor\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5ed52fba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:44:14.018364Z",
     "iopub.status.busy": "2022-10-10T10:44:14.018091Z",
     "iopub.status.idle": "2022-10-10T10:44:14.021975Z",
     "shell.execute_reply": "2022-10-10T10:44:14.021487Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ListWrapper([<gpflow.inducing_variables.inducing_variables.InducingPoints object at 0x7f63c1868af0>, <gpflow.inducing_variables.inducing_variables.InducingPoints object at 0x7f63b44d5600>, <gpflow.inducing_variables.inducing_variables.InducingPoints object at 0x7f63b44d5990>])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.inducing_variable.inducing_variable_list"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8e1857a",
   "metadata": {},
   "source": [
    "## Model $f(x)$ by doing inference in the $g$ space\n",
    "### Mixed kernel and uncorrelated inducing variables\n",
    "\n",
    "Remember the general case: $f(x) = W g(x)$, where $g(x) \\in \\mathbb{R}^L$, $f(x) \\in \\mathbb{R}^P$ and $W \\in \\mathbb{R}^{P \\times L}$, where $L \\leq P$.\n",
    "We assume that the outputs of $g$ are uncorrelated, and by *mixing* them with $W$ they become correlated.\n",
    "With this setup we perform the optimal routine to calculate the conditional. Namely, calculate the conditional of the uncorrelated latent $g$ and afterwards project the mean and variance using the mixing matrix: $\\mu_f = W \\mu_g$ and $\\Sigma_f = W\\Sigma_g W^\\top$\n",
    "\n",
    "- $K_{uu} = L \\times M \\times M$\n",
    "- $K_{uf} = L \\times M \\times N$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e1ef86dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:44:14.024334Z",
     "iopub.status.busy": "2022-10-10T10:44:14.024085Z",
     "iopub.status.idle": "2022-10-10T10:44:14.052712Z",
     "shell.execute_reply": "2022-10-10T10:44:14.052151Z"
    }
   },
   "outputs": [],
   "source": [
    "# Create list of kernels for each output\n",
    "kern_list = [\n",
    "    gpf.kernels.SquaredExponential() + gpf.kernels.Linear() for _ in range(L)\n",
    "]\n",
    "# Create multi-output kernel from kernel list\n",
    "kernel = gpf.kernels.LinearCoregionalization(\n",
    "    kern_list, W=np.random.randn(P, L)\n",
    ")  # Notice that we initialise the mixing matrix W\n",
    "# initialisation of inducing input locations (M random points from the training inputs)\n",
    "Z = Zinit.copy()\n",
    "# create multi-output inducing variables from Z\n",
    "iv = gpf.inducing_variables.SharedIndependentInducingVariables(\n",
    "    gpf.inducing_variables.InducingPoints(Z)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ab35898f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:44:14.056039Z",
     "iopub.status.busy": "2022-10-10T10:44:14.055786Z",
     "iopub.status.idle": "2022-10-10T10:44:14.080666Z",
     "shell.execute_reply": "2022-10-10T10:44:14.080071Z"
    }
   },
   "outputs": [],
   "source": [
    "# initialize mean of variational posterior to be of shape MxL\n",
    "q_mu = np.zeros((M, L))\n",
    "# initialize \\sqrt(Σ) of variational posterior to be of shape LxMxM\n",
    "q_sqrt = np.repeat(np.eye(M)[None, ...], L, axis=0) * 1.0\n",
    "\n",
    "# create SVGP model as usual and optimize\n",
    "m = gpf.models.SVGP(\n",
    "    kernel,\n",
    "    gpf.likelihoods.Gaussian(),\n",
    "    inducing_variable=iv,\n",
    "    q_mu=q_mu,\n",
    "    q_sqrt=q_sqrt,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "5f285fe3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:44:14.084277Z",
     "iopub.status.busy": "2022-10-10T10:44:14.084005Z",
     "iopub.status.idle": "2022-10-10T10:44:22.967093Z",
     "shell.execute_reply": "2022-10-10T10:44:22.966409Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " This problem is unconstrained.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RUNNING THE L-BFGS-B CODE\n",
      "\n",
      "           * * *\n",
      "\n",
      "Machine precision = 2.220D-16\n",
      " N =          298     M =           10\n",
      "\n",
      "At X0         0 variables are exactly at the bounds\n",
      "\n",
      "At iterate    0    f=  7.44521D+03    |proj g|=  6.62929D+03\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate   50    f=  3.17536D+02    |proj g|=  4.85678D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  100    f=  1.72326D+02    |proj g|=  1.27892D+02\n",
      "\n",
      "At iterate  150    f=  1.07479D+02    |proj g|=  3.56398D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  200    f=  3.42125D+01    |proj g|=  7.09685D+01\n",
      "\n",
      "At iterate  250    f=  2.09585D+01    |proj g|=  4.48371D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  300    f=  1.61664D+01    |proj g|=  1.32557D+01\n",
      "\n",
      "At iterate  350    f=  1.21720D+01    |proj g|=  2.63808D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  400    f=  9.68082D+00    |proj g|=  1.35825D+01\n",
      "\n",
      "At iterate  450    f=  7.73028D+00    |proj g|=  1.88419D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  500    f=  6.44143D+00    |proj g|=  4.11613D+01\n",
      "\n",
      "At iterate  550    f=  5.26354D+00    |proj g|=  1.03765D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  600    f=  4.25867D+00    |proj g|=  7.76566D+00\n",
      "\n",
      "At iterate  650    f=  3.58394D+00    |proj g|=  6.88400D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  700    f=  3.09796D+00    |proj g|=  3.64345D+00\n",
      "\n",
      "At iterate  750    f=  2.75839D+00    |proj g|=  1.02569D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  800    f=  2.35431D+00    |proj g|=  1.76240D+01\n",
      "\n",
      "At iterate  850    f=  1.80070D+00    |proj g|=  1.04386D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  900    f=  1.53541D+00    |proj g|=  4.97609D+00\n",
      "\n",
      "At iterate  950    f=  1.41219D+00    |proj g|=  7.41418D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1000    f=  1.29912D+00    |proj g|=  2.71758D+00\n",
      "\n",
      "At iterate 1050    f=  1.20319D+00    |proj g|=  1.46667D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1100    f=  1.10128D+00    |proj g|=  2.81529D+00\n",
      "\n",
      "At iterate 1150    f=  1.01153D+00    |proj g|=  3.73160D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1200    f=  9.33403D-01    |proj g|=  7.81433D-01\n",
      "\n",
      "At iterate 1250    f=  8.80741D-01    |proj g|=  7.99147D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1300    f=  8.38234D-01    |proj g|=  1.53324D+00\n",
      "\n",
      "At iterate 1350    f=  8.04007D-01    |proj g|=  3.44662D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1400    f=  7.76123D-01    |proj g|=  5.83165D-01\n",
      "\n",
      "At iterate 1450    f=  7.54255D-01    |proj g|=  1.17003D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1500    f=  7.30881D-01    |proj g|=  1.79285D+00\n",
      "\n",
      "At iterate 1550    f=  7.12292D-01    |proj g|=  1.84236D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1600    f=  6.98546D-01    |proj g|=  5.50370D-01\n",
      "\n",
      "At iterate 1650    f=  6.85617D-01    |proj g|=  1.00091D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1700    f=  6.70749D-01    |proj g|=  1.18019D+00\n",
      "\n",
      "At iterate 1750    f=  6.59199D-01    |proj g|=  5.47999D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1800    f=  6.52206D-01    |proj g|=  4.49372D-01\n",
      "\n",
      "At iterate 1850    f=  6.47309D-01    |proj g|=  5.48646D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1900    f=  6.42606D-01    |proj g|=  6.70976D-01\n",
      "\n",
      "At iterate 1950    f=  6.37862D-01    |proj g|=  2.57139D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 2000    f=  6.33217D-01    |proj g|=  3.67995D-01\n",
      "\n",
      "           * * *\n",
      "\n",
      "Tit   = total number of iterations\n",
      "Tnf   = total number of function evaluations\n",
      "Tnint = total number of segments explored during Cauchy searches\n",
      "Skip  = number of BFGS updates skipped\n",
      "Nact  = number of active bounds at final generalized Cauchy point\n",
      "Projg = norm of the final projected gradient\n",
      "F     = final function value\n",
      "\n",
      "           * * *\n",
      "\n",
      "   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F\n",
      "  298   2000   2194      1     0     0   3.680D-01   6.332D-01\n",
      "  F =  0.63321650488028780     \n",
      "\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT                 \n"
     ]
    }
   ],
   "source": [
    "optimize_model_with_scipy(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "9569a335",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:44:22.969842Z",
     "iopub.status.busy": "2022-10-10T10:44:22.969521Z",
     "iopub.status.idle": "2022-10-10T10:44:23.964384Z",
     "shell.execute_reply": "2022-10-10T10:44:23.963842Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_model(m)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a64c112",
   "metadata": {},
   "source": [
    "## Illustration of GPflow's multi-output capabilities\n",
    "This section shows the inheritance structure in GPflow's multi-output framework."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4ad14a6",
   "metadata": {},
   "source": [
    "### Multi-output kernels (MOK) class diagram\n",
    "We include three multi-output kernels:\n",
    "- `SharedIndependent`: This kernel is included mainly as an illustration of specifying a conditional using the multiple dispatch framework. The same functionality is provided by using a normal kernel and passing in multiple approximate posteriors by stacking `q_mu` and `q_sqrt`.\n",
    "- `SeparateIndependent`: This kernel allows you to use different priors for each output GP.\n",
    "- `LinearCoregionalization`: This kernel describes the prior of the linear model of coregionalization. As shown previously, this implementation supports various inducing point approximations.\n",
    "![Multi-output kernels](./multioutput_kernels.svg)\n",
    "\n",
    "We include several base classes. Two are noteworthy:\n",
    "- `MultioutputKernel` is included to be the base class for all multi-output kernels.\n",
    "- `IndepedentLatent` is the base class for all multi-output kernels which are constructed from independent latent processes. Including this kernel allows the specification of a default approximation method which, while not the most efficient, does take advantage of _some_ structure. It can be applied to _any_ kernel constructed from independent latent processes.\n",
    "\n",
    "There is a similarity in the meaning of `SeparateIndependent` and `IndependentLatent`. Both kernels indicate that independent processes are used, and that $\\mathbf{K}_{\\bf uu}$ can therefore be represented as a `[L, M, M]` tensor. It could therefore be suggested that `SeparateIndependent` be the parent class of all \"independent latent\" kernels, instead of having a separate `IndependentLatent` class. We decided against this because:\n",
    "- this would increase the complexity in specifying `conditionals()` for the otherwise simple multi-output kernels `SeparateIndependent` and `SharedIndependent`.\n",
    "- we did not want to specify too much of an implementation in `IndependentLatent`, leaving implementation details to child classes. Using `SeparateIndependent` as the base class would force all child classes to be a `Combination` kernel."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4894bc1d",
   "metadata": {},
   "source": [
    "### Multi-output inducing variables class diagram\n",
    "![Multi-output features](./multioutput_features.svg)\n",
    "\n",
    "#### Inducing points\n",
    "The goal of this class is to provide inducing variables that can be used with _any_ kernel, even if the method ends up being slow.\n",
    "\n",
    "The multiouput framework extends `InducingPoints` to work with multi-output kernels. Just like for single-output kernels, we want `InducingPoints` to work for all `MultioutputKernel`s. We do this by defining `InducingPoints` to take _all_ outputs for specific inducing inputs as inducing variables.\n",
    "\n",
    "#### Fallback shared/separate independent inducing variables\n",
    "The goal of these classes is to provide a reasonably efficient implementation for kernels that give exploitable independence structure in the prior of inducing variables (that is, subclasses of `IndependentLatent`), while only needing to implement `Kuu()` and `Kuf()` methods.\n",
    "\n",
    "#### Shared/separate independent inducing variables\n",
    "The goal of these classes is to provide the most efficient code path for kernels that allow exploiting independence structure in the prior of inducing variables.\n",
    "\n",
    "For more specialized multi-output kernels (i.e. `{Shared|Separate}Independent` or `LinearCoregionalization`) we define `{Shared|Separate}IndependentInducingVariables`. These wrap (a list of) single-output inducing variables to define groups of a-priori independent inducing variables, which leads to a $\\mathbf{K}_{\\bf uu}$ that can be represented as a `[L, M, M]` tensor. We saw the use of these previously.\n",
    "\n",
    "`{Shared|Separate}IndependentInducingVariables` inherit from `Fallback{Shared|Separate}IndependentInducingVariables`, so the multiple dispatch will fall back on the slower but general implementation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8275ce5d",
   "metadata": {},
   "source": [
    "### Implemented combinations\n",
    "Multiple dispatch is applied to both `Kuu()`, `Kuf()`, and `conditional()`. The return values of the covariances can therefore be tailored to a specific implementation of `conditional()`. The following table lists combinations which are currently available in GPflow. Thanks to the multiple dispatch code, implementing your own outside of GPflow should require only a small amount of code!\n",
    "\n",
    "|  Inducing variable class  |  Kernel  |  Kuu  |  Kuf  |  conditional  |  note  |\n",
    "|  -----------------------  |  ------  |  ---  |  ---  |  -----------  |  ----  |\n",
    "|  `InducingPoints`                                |  `MultioutputKernel`        |  `[M, P, M, P]`  |  `[M, P, N, P]`  |  `inducing_point_conditional()`, which calls `fully_correlated_conditional()`  |  Works for all kernels, but might be very inefficient. In this case `q_mu` and `q_sqrt` should have shapes of `[1, MP]` and `[1, MP, MP]`  |\n",
    "|  `SharedIndependentInducingVariables`            |  `SharedIndependent`        |  `[M, M]`        |  `[M, N]`        |  `shared_independent_conditional()`, which calls `base_conditional()`  |  The combination of these two classes is in a sense redundant, because we can achieve the same behavior by using the single output Kernel and InducingVariable classes. They are added for illustrative purposes. Thanks to the conditional dispatch, the most efficient code path is used.  |\n",
    "|  `SeparateIndependentInducingVariables`          |  `SharedIndependent`        |  `[P, M, M]`     |  `[P, M, N]`     |  `separate_independent_conditional()`, which calls `base_conditional()` P times  |  We loop P times over the `base_conditional()`  |\n",
    "|  `SeparateIndependentInducingVariable`           |  `SeparateIndependent`      |  `[P, M, M]`     |  `[P, M, N]`     |   `separate_independent_conditional()`, which calls `base_conditional()` P times  |  We loop P times over the `base_conditional()`  |\n",
    "|  `SharedIndependentInducingVariables`            |  `SeparateIndependent`      |  `[P, M, M]`     |  `[P, M, N]`     |  `separate_independent_conditional()`, which calls `base_conditional()` P times  |  We loop P times over the `base_conditional()`  |\n",
    "|  `FallbackSharedIndependentInducingVariables`    |  `IndependentLatent`        |  `[L, M, M]`     |  `[M, L, N, P]`  |  `fallback_independent_latent_conditional()`, which calls `independent_interdomain_conditional()`  |  Implementation which only requires custom `Kuu()` and `Kuf()`  |\n",
    "|  `FallbackSeparateIndependentInducingVariable`   |  `IndependentLatent`        |  `[L, M, M]`     |  `[M, L, N, P]`  |  `fallback_independent_latent_conditional()`, which calls `independent_interdomain_conditional()`  |  Implementation which only requires custom `Kuu()` and `Kuf()`  |\n",
    "|  `SharedIndependentInducingVariables`            |  `LinearCoregionalization`  |  `[L, M, M]`     |  `[L, M, N]`     |  `coregionalization_conditional()`, which calls `base_conditional()`  |  This is the most efficient implementation for linear coregionalization. The inducing outputs live in g-space. Here we use the output of the base conditional and project the mean and covariance with the mixing matrix W.  |\n",
    "|  `SeparateIndependentInducingVariables`          |  `LinearCoregionalization`  |  `[L, M, M]`      |  `[L, M, N]`      |  `base_conditional()`  |  This is the most efficient implementation for linear coregionalization. The inducing outputs live in g-space. Here we use the output of the base conditional and project the mean and covariance with the mixing matrix W.  |"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8ca7351",
   "metadata": {},
   "source": [
    "## Debugging: introspect\n",
    "\n",
    "Given all these possibilities it can be hard to determine which conditional will be called for which set of kernel and inducing variable. The following method lets you proactively introspect which implementation will be executed. This can be useful when debugging new code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "7009caf4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-10-10T10:44:23.967420Z",
     "iopub.status.busy": "2022-10-10T10:44:23.967136Z",
     "iopub.status.idle": "2022-10-10T10:44:23.972485Z",
     "shell.execute_reply": "2022-10-10T10:44:23.972010Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<code object wrapped_function at 0x7f63c1a1b890, file \"/home/circleci/project/gpflow/experimental/check_shapes/decorator.py\", line 86>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def inspect_conditional(inducing_variable_type, kernel_type):\n",
    "    \"\"\"\n",
    "    Helper function returning the exact implementation called\n",
    "    by the multiple dispatch `conditional` given the type of\n",
    "    kernel and inducing variable.\n",
    "\n",
    "    :param inducing_variable_type:\n",
    "        Type of the inducing variable\n",
    "    :param kernel_type:\n",
    "        Type of the kernel\n",
    "\n",
    "    :return: String\n",
    "        Contains the name, the file and the linenumber of the\n",
    "        implementation.\n",
    "    \"\"\"\n",
    "    import inspect\n",
    "\n",
    "    from gpflow.conditionals import conditional\n",
    "\n",
    "    implementation = conditional.dispatch(\n",
    "        object, inducing_variable_type, kernel_type, object\n",
    "    )\n",
    "    info = dict(inspect.getmembers(implementation))\n",
    "    return info[\"__code__\"]\n",
    "\n",
    "\n",
    "# Example:\n",
    "inspect_conditional(\n",
    "    gpf.inducing_variables.SharedIndependentInducingVariables,\n",
    "    gpf.kernels.SharedIndependent,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8088898a",
   "metadata": {},
   "source": [
    "## Further Reading:\n",
    "- [A simple demonstration of coregionalization](./coregionalisation.ipynb), which details other GPflow features for multi-output prediction without fully observed outputs."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "encoding": "# -*- coding: utf-8 -*-",
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
