{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9bf2fe64",
   "metadata": {},
   "source": [
    "# Multi-output Gaussian processes in GPflow"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b3fa274",
   "metadata": {},
   "source": [
    "This notebook shows how to construct a multi-output GP model using GPflow, together with different interdomain inducing variables which lead to different approximation properties. GPflow provides a framework for specifying multioutput GP priors, and interdomain approximations which is\n",
    "- modular, by providing a consistent interface for the user of the resulting `SVGP` model,\n",
    "- extensible, by allowing new interdomain variables and kernels to be specified while reusing exising code where possible,\n",
    "- efficient, by allowing the most efficient custom code path to be specified where desired.\n",
    "\n",
    "Getting to grips with the maths and code can be a bit daunting, so to accompany the documentation there is an [in-depth review on arXiv](https://arxiv.org/abs/2003.01115), which provides a unified mathematical framework, together with a high-level description of software design choices in GPflow.\n",
    "\n",
    "This notebook shows the various design choices that can be made, to show the reader the flexibility of the framework. This is done in the hope that an example is provided that can be easily adapted to the special case that the reader wants to implement.\n",
    "\n",
    "A reader who just wants to use a multioutput kernel should simply choose the most efficient set of inducing variables.\n",
    "\n",
    "To cite this framework, please reference our [arXiv paper](https://arxiv.org/abs/2003.01115).\n",
    "```\n",
    "@article{GPflow2020multioutput,\n",
    "  author = {{van der Wilk}, Mark and Dutordoir, Vincent and John, ST and\n",
    "            Artemev, Artem and Adam, Vincent and Hensman, James},\n",
    "  title = {A Framework for Interdomain and Multioutput {G}aussian Processes},\n",
    "  year = {2020},\n",
    "  journal = {arXiv:2003.01115},\n",
    "  url = {https://arxiv.org/abs/2003.01115}\n",
    "}\n",
    "```\n",
    "\n",
    "\\begin{equation}\n",
    "\\newcommand{\\GP}{\\mathcal{GP}}\n",
    "\\newcommand{\\NN}{\\mathcal{N}}\n",
    "\\newcommand{\\LL}{\\mathcal{L}}\n",
    "\\newcommand{\\RR}{\\mathbb{R}}\n",
    "\\newcommand{\\EE}{\\mathbb{E}}\n",
    "\\newcommand{\\valpha}{\\boldsymbol\\alpha}\n",
    "\\newcommand{\\vf}{\\mathbf{f}}\n",
    "\\newcommand{\\vF}{\\mathbf{F}}\n",
    "\\newcommand{\\vg}{\\mathbf{g}}\n",
    "\\newcommand{\\vW}{\\mathbf{W}}\n",
    "\\newcommand{\\vI}{\\mathbf{I}}\n",
    "\\newcommand{\\vZ}{\\mathbf{Z}}\n",
    "\\newcommand{\\vu}{\\mathbf{u}}\n",
    "\\newcommand{\\vU}{\\mathbf{U}}\n",
    "\\newcommand{\\vX}{\\mathbf{X}}\n",
    "\\newcommand{\\vY}{\\mathbf{Y}}\n",
    "\\newcommand{\\identity}{\\mathbb{I}}\n",
    "\\end{equation}\n",
    "\n",
    "\n",
    "\n",
    "## Task\n",
    "We will consider a regression problem for functions $f: \\mathbb{R}^D \\rightarrow \\mathbb{R}^P$. We assume that the dataset is of the form $(X, f_1), \\dots, (X, f_P)$, that is, we observe all the outputs for a particular input location (for cases where there are **not** fully observed outputs for each input, see [A simple demonstration of coregionalization](./coregionalisation.ipynb)).\n",
    "\n",
    "Here we assume a model of the form:\n",
    "\\begin{equation}\n",
    "f(x) = W g(x),\n",
    "\\end{equation}\n",
    "where $g(x) \\in \\mathbb{R}^L$, $f(x) \\in \\mathbb{R}^P$ and $W \\in \\mathbb{R}^{P \\times L}$. We assume that the outputs of $g$ are uncorrelated, and that by *mixing* them with $W$ they become correlated. In this notebook, we show how to build this model using Sparse Variational Gaussian Process (SVGP) for $g$, which scales well with the numbers of data points and outputs.\n",
    "\n",
    "Here we have two options for $g$:\n",
    "1. The output dimensions of $g$ share the same kernel.\n",
    "2. Each output of $g$ has a separate kernel.\n",
    "\n",
    "\n",
    "In addition, we have two further suboptions for the inducing inputs of $g$:\n",
    "1. The instances of $g$ share the same inducing inputs.\n",
    "2. Each output of $g$ has its own set of inducing inputs.\n",
    "\n",
    "The notation is as follows:\n",
    "- $X \\in \\mathbb{R}^{N \\times D}$ denotes the input\n",
    "- $Y \\in \\RR^{N \\times P}$ denotes the output\n",
    "- $k_{1..L}$, $L$ are kernels on $\\RR^{N \\times D}$\n",
    "- $g_{1..L}$, $L$ are independent $\\GP$s  with $g_l \\sim \\GP(0,k_l)$\n",
    "- $f_{1..P}$, $P$ are correlated  $\\GP$s  with $\\vf = \\vW \\vg$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "22637857",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:33:31.561949Z",
     "iopub.status.busy": "2024-01-04T12:33:31.561519Z",
     "iopub.status.idle": "2024-01-04T12:33:37.628203Z",
     "shell.execute_reply": "2024-01-04T12:33:37.627312Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-01-04 12:33:32.887708: I external/local_tsl/tsl/cuda/cudart_stub.cc:31] Could not find cuda drivers on your machine, GPU will not be used.\n",
      "2024-01-04 12:33:32.929851: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-01-04 12:33:32.929887: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-01-04 12:33:32.931145: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "2024-01-04 12:33:32.937867: I external/local_tsl/tsl/cuda/cudart_stub.cc:31] Could not find cuda drivers on your machine, GPU will not be used.\n",
      "2024-01-04 12:33:32.938428: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n",
      "To enable the following instructions: AVX2 AVX512F FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-01-04 12:33:34.285915: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "import gpflow as gpf\n",
    "from gpflow.ci_utils import reduce_in_tests\n",
    "from gpflow.utilities import print_summary\n",
    "\n",
    "gpf.config.set_default_float(np.float64)\n",
    "gpf.config.set_default_summary_fmt(\"notebook\")\n",
    "np.random.seed(0)\n",
    "%matplotlib inline\n",
    "\n",
    "MAXITER = reduce_in_tests(2000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90250087",
   "metadata": {},
   "source": [
    "## Generate synthetic data\n",
    "We create a utility function to generate synthetic data. We assume that:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "29957279",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:33:37.631581Z",
     "iopub.status.busy": "2024-01-04T12:33:37.631022Z",
     "iopub.status.idle": "2024-01-04T12:33:37.635042Z",
     "shell.execute_reply": "2024-01-04T12:33:37.634365Z"
    }
   },
   "outputs": [],
   "source": [
    "N = 100  # number of points\n",
    "D = 1  # number of input dimensions\n",
    "M = 15  # number of inducing points\n",
    "L = 2  # number of latent GPs\n",
    "P = 3  # number of observations = output dimensions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5d665b82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:33:37.637600Z",
     "iopub.status.busy": "2024-01-04T12:33:37.637332Z",
     "iopub.status.idle": "2024-01-04T12:33:37.642084Z",
     "shell.execute_reply": "2024-01-04T12:33:37.641425Z"
    }
   },
   "outputs": [],
   "source": [
    "def generate_data(N=100):\n",
    "    X = np.random.rand(N)[:, None] * 10 - 5  # Inputs = N x D\n",
    "    G = np.hstack((0.5 * np.sin(3 * X) + X, 3.0 * np.cos(X) - X))  # G = N x L\n",
    "    W = np.array([[0.5, -0.3, 1.5], [-0.4, 0.43, 0.0]])  # L x P\n",
    "    F = np.matmul(G, W)  # N x P\n",
    "    Y = F + np.random.randn(*F.shape) * [0.2, 0.2, 0.2]\n",
    "\n",
    "    return X, Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1b509e5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:33:37.644450Z",
     "iopub.status.busy": "2024-01-04T12:33:37.644190Z",
     "iopub.status.idle": "2024-01-04T12:33:37.648861Z",
     "shell.execute_reply": "2024-01-04T12:33:37.648090Z"
    }
   },
   "outputs": [],
   "source": [
    "X, Y = data = generate_data(N)\n",
    "Zinit = np.linspace(-5, 5, M)[:, None]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa92c7ed",
   "metadata": {},
   "source": [
    "We create a utility function for plotting:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "808b958e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:33:37.651972Z",
     "iopub.status.busy": "2024-01-04T12:33:37.651616Z",
     "iopub.status.idle": "2024-01-04T12:33:37.658541Z",
     "shell.execute_reply": "2024-01-04T12:33:37.657666Z"
    }
   },
   "outputs": [],
   "source": [
    "def plot_model(m, lower=-8.0, upper=8.0):\n",
    "    pX = np.linspace(lower, upper, 100)[:, None]\n",
    "    pY, pYv = m.predict_y(pX)\n",
    "    if pY.ndim == 3:\n",
    "        pY = pY[:, 0, :]\n",
    "    plt.plot(X, Y, \"x\")\n",
    "    plt.gca().set_prop_cycle(None)\n",
    "    plt.plot(pX, pY)\n",
    "    for i in range(pY.shape[1]):\n",
    "        top = pY[:, i] + 2.0 * pYv[:, i] ** 0.5\n",
    "        bot = pY[:, i] - 2.0 * pYv[:, i] ** 0.5\n",
    "        plt.fill_between(pX[:, 0], top, bot, alpha=0.3)\n",
    "    plt.xlabel(\"X\")\n",
    "    plt.ylabel(\"f\")\n",
    "    plt.title(f\"ELBO: {m.elbo(data):.3}\")\n",
    "    plt.plot(Z, Z * 0.0, \"o\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9be1cc32",
   "metadata": {},
   "source": [
    "## Model the outputs of $f(x)$ directly\n",
    "The three following examples show how to model the outputs of the model $f(x)$ directly. Mathematically, this case is equivalent to having:\n",
    "\\begin{equation}\n",
    "f(x) = I g(x),\n",
    "\\end{equation}\n",
    "i.e. $W = I$ and $P = L$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "400c235d",
   "metadata": {},
   "source": [
    "### 1. Shared independent multi-output kernel (MOK) and shared independent inducing variables\n",
    "Here the priors on all outputs are constrained to have the same kernel hyperparameters. We also share the inducing inputs between all outputs. The different GPs are independent both in the prior and the approximate posterior."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cea29ce5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:33:37.662258Z",
     "iopub.status.busy": "2024-01-04T12:33:37.661863Z",
     "iopub.status.idle": "2024-01-04T12:33:37.770753Z",
     "shell.execute_reply": "2024-01-04T12:33:37.769987Z"
    }
   },
   "outputs": [],
   "source": [
    "# create multi-output kernel\n",
    "kernel = gpf.kernels.SharedIndependent(\n",
    "    gpf.kernels.SquaredExponential() + gpf.kernels.Linear(), output_dim=P\n",
    ")\n",
    "# initialization of inducing input locations (M random points from the training inputs)\n",
    "Z = Zinit.copy()\n",
    "# create multi-output inducing variables from Z\n",
    "iv = gpf.inducing_variables.SharedIndependentInducingVariables(\n",
    "    gpf.inducing_variables.InducingPoints(Z)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "07a7a391",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:33:37.774550Z",
     "iopub.status.busy": "2024-01-04T12:33:37.774141Z",
     "iopub.status.idle": "2024-01-04T12:33:37.913284Z",
     "shell.execute_reply": "2024-01-04T12:33:37.912398Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                                      </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape      </th><th>dtype  </th><th>value           </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>SVGP.kernel.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>1.0             </td></tr>\n",
       "<tr><td>SVGP.kernel.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>1.0             </td></tr>\n",
       "<tr><td>SVGP.kernel.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>1.0             </td></tr>\n",
       "<tr><td>SVGP.likelihood.variance                  </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>1.0             </td></tr>\n",
       "<tr><td>SVGP.inducing_variable.inducing_variable.Z</td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>(15, 1)    </td><td>float64</td><td>[[-5....        </td></tr>\n",
       "<tr><td>SVGP.q_mu                                 </td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>(15, 3)    </td><td>float64</td><td>[[0., 0., 0.... </td></tr>\n",
       "<tr><td>SVGP.q_sqrt                               </td><td>Parameter</td><td>FillTriangular  </td><td>       </td><td>True       </td><td>(3, 15, 15)</td><td>float64</td><td>[[[1., 0., 0....</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create SVGP model as usual and optimize\n",
    "m = gpf.models.SVGP(\n",
    "    kernel, gpf.likelihoods.Gaussian(), inducing_variable=iv, num_latent_gps=P\n",
    ")\n",
    "print_summary(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1b38701a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:33:37.916223Z",
     "iopub.status.busy": "2024-01-04T12:33:37.915816Z",
     "iopub.status.idle": "2024-01-04T12:33:46.445084Z",
     "shell.execute_reply": "2024-01-04T12:33:46.444583Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " This problem is unconstrained.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RUNNING THE L-BFGS-B CODE\n",
      "\n",
      "           * * *\n",
      "\n",
      "Machine precision = 2.220D-16\n",
      " N =          424     M =           10\n",
      "\n",
      "At X0         0 variables are exactly at the bounds\n",
      "\n",
      "At iterate    0    f=  3.26251D+03    |proj g|=  1.79322D+03\n",
      "\n",
      "At iterate   50    f=  1.60046D+02    |proj g|=  2.23880D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  100    f=  6.25440D+01    |proj g|=  2.71497D+01\n",
      "\n",
      "At iterate  150    f=  5.45593D+01    |proj g|=  2.85566D+01\n",
      "\n",
      "At iterate  200    f=  5.04417D+01    |proj g|=  2.36414D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  250    f=  4.81566D+01    |proj g|=  7.56354D+00\n",
      "\n",
      "At iterate  300    f=  4.66562D+01    |proj g|=  1.54605D+01\n",
      "\n",
      "At iterate  350    f=  4.55273D+01    |proj g|=  9.03129D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  400    f=  4.46163D+01    |proj g|=  1.82533D+00\n",
      "\n",
      "At iterate  450    f=  4.37082D+01    |proj g|=  3.70951D+00\n",
      "\n",
      "At iterate  500    f=  4.30992D+01    |proj g|=  4.54184D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  550    f=  4.27762D+01    |proj g|=  6.18559D+00\n",
      "\n",
      "At iterate  600    f=  4.26316D+01    |proj g|=  1.16861D+00\n",
      "\n",
      "At iterate  650    f=  4.25440D+01    |proj g|=  3.02942D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  700    f=  4.24932D+01    |proj g|=  2.39140D+00\n",
      "\n",
      "At iterate  750    f=  4.24607D+01    |proj g|=  1.04215D+00\n",
      "\n",
      "At iterate  800    f=  4.24441D+01    |proj g|=  5.39999D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  850    f=  4.24361D+01    |proj g|=  5.50694D-01\n",
      "\n",
      "At iterate  900    f=  4.24318D+01    |proj g|=  2.55596D-01\n",
      "\n",
      "At iterate  950    f=  4.24281D+01    |proj g|=  5.87821D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1000    f=  4.24261D+01    |proj g|=  2.00414D-01\n",
      "\n",
      "At iterate 1050    f=  4.24247D+01    |proj g|=  1.17232D-01\n",
      "\n",
      "At iterate 1100    f=  4.24240D+01    |proj g|=  7.82463D-02\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1150    f=  4.24236D+01    |proj g|=  2.26153D-01\n",
      "\n",
      "At iterate 1200    f=  4.24231D+01    |proj g|=  5.70376D-01\n",
      "\n",
      "At iterate 1250    f=  4.24227D+01    |proj g|=  1.57686D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1300    f=  4.24223D+01    |proj g|=  1.62637D-01\n",
      "\n",
      "At iterate 1350    f=  4.24219D+01    |proj g|=  9.75631D-02\n",
      "\n",
      "At iterate 1400    f=  4.24215D+01    |proj g|=  1.13964D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1450    f=  4.24211D+01    |proj g|=  1.16687D-01\n",
      "\n",
      "At iterate 1500    f=  4.24209D+01    |proj g|=  5.41853D-02\n",
      "\n",
      "At iterate 1550    f=  4.24208D+01    |proj g|=  6.38099D-02\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1600    f=  4.24206D+01    |proj g|=  1.29858D-01\n",
      "\n",
      "At iterate 1650    f=  4.24205D+01    |proj g|=  8.11513D-02\n",
      "\n",
      "At iterate 1700    f=  4.24205D+01    |proj g|=  4.87641D-02\n",
      "\n",
      "           * * *\n",
      "\n",
      "Tit   = total number of iterations\n",
      "Tnf   = total number of function evaluations\n",
      "Tnint = total number of segments explored during Cauchy searches\n",
      "Skip  = number of BFGS updates skipped\n",
      "Nact  = number of active bounds at final generalized Cauchy point\n",
      "Projg = norm of the final projected gradient\n",
      "F     = final function value\n",
      "\n",
      "           * * *\n",
      "\n",
      "   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F\n",
      "  424   1709   1835      1     0     0   1.169D-02   4.242D+01\n",
      "  F =   42.420488076940394     \n",
      "\n",
      "CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH             \n"
     ]
    }
   ],
   "source": [
    "def optimize_model_with_scipy(model):\n",
    "    optimizer = gpf.optimizers.Scipy()\n",
    "    optimizer.minimize(\n",
    "        model.training_loss_closure(data),\n",
    "        variables=model.trainable_variables,\n",
    "        method=\"l-bfgs-b\",\n",
    "        options={\"disp\": 50, \"maxiter\": MAXITER},\n",
    "    )\n",
    "\n",
    "\n",
    "optimize_model_with_scipy(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a595d906",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:33:46.447197Z",
     "iopub.status.busy": "2024-01-04T12:33:46.446959Z",
     "iopub.status.idle": "2024-01-04T12:33:46.478861Z",
     "shell.execute_reply": "2024-01-04T12:33:46.478212Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                                      </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape      </th><th>dtype  </th><th>value                                               </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>SVGP.kernel.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>0.9280167114500715                                  </td></tr>\n",
       "<tr><td>SVGP.kernel.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>0.7984037597218473                                  </td></tr>\n",
       "<tr><td>SVGP.kernel.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>1.21214                                             </td></tr>\n",
       "<tr><td>SVGP.likelihood.variance                  </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>0.039659901213752305                                </td></tr>\n",
       "<tr><td>SVGP.inducing_variable.inducing_variable.Z</td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>(15, 1)    </td><td>float64</td><td>[[-4.83956...                                       </td></tr>\n",
       "<tr><td>SVGP.q_mu                                 </td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>(15, 3)    </td><td>float64</td><td>[[-0.90158021, 0.69899149, -1.47493...              </td></tr>\n",
       "<tr><td>SVGP.q_sqrt                               </td><td>Parameter</td><td>FillTriangular  </td><td>       </td><td>True       </td><td>(3, 15, 15)</td><td>float64</td><td>[[[1.71237154e-02, 0.00000000e+00, 0.00000000e+00...</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print_summary(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3437ac06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:33:46.481523Z",
     "iopub.status.busy": "2024-01-04T12:33:46.481213Z",
     "iopub.status.idle": "2024-01-04T12:33:46.865172Z",
     "shell.execute_reply": "2024-01-04T12:33:46.864458Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot predictions and observations\n",
    "plot_model(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "283eb9f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:33:46.869007Z",
     "iopub.status.busy": "2024-01-04T12:33:46.868707Z",
     "iopub.status.idle": "2024-01-04T12:33:46.884382Z",
     "shell.execute_reply": "2024-01-04T12:33:46.883767Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                                            </th><th>class    </th><th>transform  </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">   value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>SharedIndependent.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.928017</td></tr>\n",
       "<tr><td>SharedIndependent.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.798404</td></tr>\n",
       "<tr><td>SharedIndependent.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">1.21214 </td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=0.7984037597218473>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print_summary(m.kernel)\n",
    "m.kernel.kernel.kernels[0].lengthscales"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc2dc231",
   "metadata": {},
   "source": [
    "### 2. Separate independent MOK and shared independent inducing variables\n",
    "Here we allow different hyperparameters for the priors of each output. We still share the inducing inputs between all outputs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "54d0ab37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:33:46.887172Z",
     "iopub.status.busy": "2024-01-04T12:33:46.886839Z",
     "iopub.status.idle": "2024-01-04T12:33:46.944965Z",
     "shell.execute_reply": "2024-01-04T12:33:46.944277Z"
    }
   },
   "outputs": [],
   "source": [
    "# Create list of kernels for each output\n",
    "kern_list = [\n",
    "    gpf.kernels.SquaredExponential() + gpf.kernels.Linear() for _ in range(P)\n",
    "]\n",
    "# Create multi-output kernel from kernel list\n",
    "kernel = gpf.kernels.SeparateIndependent(kern_list)\n",
    "# initialization of inducing input locations (M random points from the training inputs)\n",
    "Z = Zinit.copy()\n",
    "# create multi-output inducing variables from Z\n",
    "iv = gpf.inducing_variables.SharedIndependentInducingVariables(\n",
    "    gpf.inducing_variables.InducingPoints(Z)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "21682a16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:33:46.947790Z",
     "iopub.status.busy": "2024-01-04T12:33:46.947467Z",
     "iopub.status.idle": "2024-01-04T12:33:46.981442Z",
     "shell.execute_reply": "2024-01-04T12:33:46.980598Z"
    }
   },
   "outputs": [],
   "source": [
    "# create SVGP model as usual and optimize\n",
    "m = gpf.models.SVGP(\n",
    "    kernel, gpf.likelihoods.Gaussian(), inducing_variable=iv, num_latent_gps=P\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fe714cd0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:33:46.984326Z",
     "iopub.status.busy": "2024-01-04T12:33:46.984057Z",
     "iopub.status.idle": "2024-01-04T12:34:01.205560Z",
     "shell.execute_reply": "2024-01-04T12:34:01.204822Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /tmp/max_venv/lib/python3.11/site-packages/tensorflow/python/util/deprecation.py:660: calling map_fn_v2 (from tensorflow.python.ops.map_fn) with dtype is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use fn_output_signature instead\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RUNNING THE L-BFGS-B CODE\n",
      "\n",
      "           * * *\n",
      "\n",
      "Machine precision = 2.220D-16\n",
      " N =          430     M =           10\n",
      "\n",
      "At X0         0 variables are exactly at the bounds\n",
      "\n",
      "At iterate    0    f=  3.26251D+03    |proj g|=  1.79322D+03\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " This problem is unconstrained.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate   50    f=  1.94337D+02    |proj g|=  7.19162D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  100    f=  1.61420D+02    |proj g|=  9.22259D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  150    f=  5.98686D+01    |proj g|=  4.94480D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  200    f=  4.98426D+01    |proj g|=  4.40224D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  250    f=  4.66400D+01    |proj g|=  6.64269D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  300    f=  4.47472D+01    |proj g|=  3.01200D+01\n",
      "\n",
      "At iterate  350    f=  4.35825D+01    |proj g|=  2.66816D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  400    f=  4.18951D+01    |proj g|=  1.87723D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  450    f=  4.02256D+01    |proj g|=  1.97700D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  500    f=  3.92505D+01    |proj g|=  8.13694D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  550    f=  3.86248D+01    |proj g|=  2.45805D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  600    f=  3.82643D+01    |proj g|=  9.98024D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  650    f=  3.79192D+01    |proj g|=  3.54551D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  700    f=  3.76512D+01    |proj g|=  2.72885D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  750    f=  3.74929D+01    |proj g|=  2.07019D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  800    f=  3.74003D+01    |proj g|=  1.27696D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  850    f=  3.73412D+01    |proj g|=  1.00416D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  900    f=  3.73078D+01    |proj g|=  9.49059D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  950    f=  3.72798D+01    |proj g|=  3.28321D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1000    f=  3.72634D+01    |proj g|=  6.53366D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1050    f=  3.72504D+01    |proj g|=  1.47493D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1100    f=  3.72385D+01    |proj g|=  6.01080D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1150    f=  3.72289D+01    |proj g|=  2.23900D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1200    f=  3.72199D+01    |proj g|=  2.34531D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1250    f=  3.72122D+01    |proj g|=  5.44938D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1300    f=  3.72038D+01    |proj g|=  5.17284D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1350    f=  3.71962D+01    |proj g|=  1.48448D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1400    f=  3.71906D+01    |proj g|=  2.48056D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1450    f=  3.71862D+01    |proj g|=  1.02744D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1500    f=  3.71828D+01    |proj g|=  9.28653D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1550    f=  3.71802D+01    |proj g|=  4.81131D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1600    f=  3.71791D+01    |proj g|=  2.64848D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1650    f=  3.71784D+01    |proj g|=  2.00712D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1700    f=  3.71781D+01    |proj g|=  2.52036D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1750    f=  3.71780D+01    |proj g|=  5.75147D-02\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1800    f=  3.71779D+01    |proj g|=  6.52963D-02\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1850    f=  3.71778D+01    |proj g|=  1.02511D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1900    f=  3.71777D+01    |proj g|=  4.15666D-02\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1950    f=  3.71777D+01    |proj g|=  1.17671D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 2000    f=  3.71777D+01    |proj g|=  3.23900D-02\n",
      "\n",
      "           * * *\n",
      "\n",
      "Tit   = total number of iterations\n",
      "Tnf   = total number of function evaluations\n",
      "Tnint = total number of segments explored during Cauchy searches\n",
      "Skip  = number of BFGS updates skipped\n",
      "Nact  = number of active bounds at final generalized Cauchy point\n",
      "Projg = norm of the final projected gradient\n",
      "F     = final function value\n",
      "\n",
      "           * * *\n",
      "\n",
      "   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F\n",
      "  430   2000   2126      1     0     0   3.239D-02   3.718D+01\n",
      "  F =   37.177679423344941     \n",
      "\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT                 \n"
     ]
    }
   ],
   "source": [
    "optimize_model_with_scipy(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7f2aaee7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:34:01.209072Z",
     "iopub.status.busy": "2024-01-04T12:34:01.208484Z",
     "iopub.status.idle": "2024-01-04T12:34:01.232368Z",
     "shell.execute_reply": "2024-01-04T12:34:01.231792Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                                                  </th><th>class    </th><th>transform  </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">   value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>SeparateIndependent.kernels[0].kernels[0].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.864231</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[0].kernels[0].lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.934732</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[0].kernels[1].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.861603</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[1].kernels[0].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.750687</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[1].kernels[0].lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.969791</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[1].kernels[1].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.530281</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[2].kernels[0].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">1.11083 </td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[2].kernels[0].lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.749055</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[2].kernels[1].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">2.22351 </td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print_summary(m.kernel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d5ee2d78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:34:01.235567Z",
     "iopub.status.busy": "2024-01-04T12:34:01.234202Z",
     "iopub.status.idle": "2024-01-04T12:34:06.199959Z",
     "shell.execute_reply": "2024-01-04T12:34:06.199096Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAj4AAAHHCAYAAAC/R1LgAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8g+/7EAAAACXBIWXMAAA9hAAAPYQGoP6dpAAC4QElEQVR4nOydd5wU9f3/nzNbr/cKB3cHd/SiICgWVIoIKtYUNZpqSExMNKaYfBNjmtEkJjFi+MUkGmNMsaKiKGABRaV59OsHXO93e9vLzO+Pz+3e7nH0slc+z8djHrsz85nPfGYPbl/3roqu6zoSiUQikUgkIwA12guQSCQSiUQiOVtI4SORSCQSiWTEIIWPRCKRSCSSEYMUPhKJRCKRSEYMUvhIJBKJRCIZMUjhI5FIJBKJZMQghY9EIpFIJJIRgxQ+EolEIpFIRgxS+EgkEolEIhkxSOEjkUgkEolkxCCFj0QiOSGeeuopFEU54vbRRx+FxiqKwje+8Y2jznfppZdGXG82mykoKOCOO+6gtrZ2wGtee+01lixZQlpaGlarleLiYu69917a29tP67MGufvuuzn33HNJTU0lNjaWSZMm8dOf/hS73R4x7vOf//xRP5v6+vqj3ufFF1/k05/+NIWFhcTGxjJhwgS+853v0NXVdUaeSyIZiRijvQCJRDI0+dnPfkZBQcFhx8ePH3/Cc40ePZoHH3wQAK/Xy759+1i1ahVvvvkm+/fvJzY2NjT23nvv5Xe/+x0zZszg+9//PqmpqezYsYPHHnuM//znP2zYsIEJEyac/IMNwNatW7n44ov5whe+gNVq5ZNPPuHXv/4169evZ+PGjaiq+Bvyq1/9KgsXLoy4Vtd1VqxYQX5+PqNGjTrqfe644w5yc3O59dZbGTNmDLt37+axxx7j9ddfZ8eOHcTExJzW55JIRiS6RCKRnABPPvmkDuhbt2495lhAv/POO486Zv78+fqUKVMOO/7YY4/pgP7WW2+Fjj377LM6oH/605/W/X5/xPiPP/5Yj42N1adNm6b7fL7jfJqT57e//a0O6B9++OFRx23atEkH9F/+8pfHnPOdd9457Ng//vEPHdCfeOKJk12qRCIJQ7q6JBLJoCQ7OxsAo7HPMP3AAw+QkpLCX/7yFwwGQ8T4OXPm8P3vf5/du3fz/PPPh463tbVRWlqK0+k8revLz88HOKYb6tlnn0VRFG6++eZjznnppZceduy6664DYP/+/Se6RIlEMgBS+EgkkpOiu7ubtra2iO1kY2wCgUBojsbGRt5++23uv/9+xo8fz4UXXghARUUFZWVlLF++nMTExAHnue222wARAxTkscceY9KkSWzZsuWk1hbE7/fT1tZGQ0MDb731Fv/3f/9HQkICc+bMOeI1Pp+P//3vf8ybNy8klE6UpqYmANLT00/qeolEEomM8ZFIJCdF/1gWAIvFgtvtPuG5SktLycjIiDg2adIk3nrrLcxmMwD79u0DYMaMGUecJz8/n8TExDNiHdm2bRsXXHBBaH/ChAm88sorpKamHvGaN998k/b2dm655ZaTvu9DDz2EwWDgxhtvPOk5JBJJH1L4SCSSk2LlypUUFxdHHOvvfjpe8vPzeeKJJwBhWSkrK+Phhx/myiuvZNOmTWRkZNDT0wNAQkLCUedKSEjAZrOF9n/605/y05/+9KTWFc7kyZNZt24dDoeDzZs3s379+sOyuvrz7LPPYjKZ+NSnPnVS93z22Wf529/+xve+9z2KiopOag6JRBKJFD4SieSkmDNnDrNnzz4tc8XFxUVYkJYsWcJFF13E7Nmz+fWvf83vfve7kOAJCqAj0dPTQ2Zm5gmvoaOjA6/XG9qPiYkhKSkptJ+YmBha4/Lly3n22WdZvnw5O3bsGNAKZbfbWb16NVdccQVpaWknvJ5NmzbxpS99iSuuuIJf/vKXJ3y9RCIZGBnjI5FIBiWzZs0iKSmJjRs3AsL1BbBr164jXnPw4EFsNhuTJ08+4ftdf/315OTkhLZvfetbxxwP8J///GfA8y+//DJOp/Ok3Fw7d+7kmmuuYerUqTz//PMRAd4SieTUkP+bJBLJoCUQCITcScXFxRQXF/Pyyy/zxz/+cUCX19NPPw3AVVdddcL3+t3vfkdnZ2doPzc396jjPR4PmqbR3d094Pl//etfxMfHc80115zQOqqqqliyZAmZmZm8/vrrxMfHn9D1Eonk6EjhI5FIBiXvvPMOdrs9wo30k5/8hFtvvZUVK1bw9NNPR8QUbd++nYceeoipU6dyww03hI4Hs8XGjBkTUQixP7NmzRrweFdXF3FxcZhMpojjf/3rXwEGdPe1trayfv16PvvZzx7xnocOHcLpdDJx4sTQsaamJhYvXoyqqrz55puHBXxLJJJTRwofiURyUrzxxhuUlpYednzevHkUFhaG9rdt28YvfvGLw8ZdeumlXHTRRYBIjX/mmWeAvuDmP//5z8TExPCDH/wgdM0tt9zC1q1b+eMf/8i+ffu45ZZbSElJYceOHfz9738nLS2N559/PkKkPPbYYzzwwAO88847A9bJORbvvvsud911FzfeeCNFRUV4vV42bdrEiy++yOzZs7n11lsPu+a///0vfr//qG6u2267jffeew9d10PHlixZQnV1Nd/73vd4//33ef/990PnsrKyWLRo0QmvXyKR9CPaFRQlEsnQIli5+Ujbk08+GRp7tHE///nPdV0XlZvDjyuKoqempurXXHONvn379gHX8PLLL+uLFi3SU1JSdIvFoo8fP17/zne+o7e2th429v7779eBAasiHw+VlZX6bbfdphcWFuoxMTG61WrVp0yZot9///263W4f8Jrzzz9fz8zMPKy6dDjB5w7naJ/X/PnzT2r9EokkEkXXw/7ckEgkEolEIhnGyKwuiUQikUgkIwYpfCQSiUQikYwYpPCRSCQSiUQyYpDCRyKRSCQSyYhBCh+JRCKRSCQjBil8JBKJRCKRjBhkAcN+aJpGQ0MDCQkJKIoS7eVIJBKJRCI5DnRdp6enh9zcXFT1yHYdKXz60dDQQF5eXrSXIZFIJBKJ5CSora1l9OjRRzwvhU8/go0Pa2trSUxMjPJqJBKJRCKRHA82m428vLwBGxiHI4VPP4LurcTERCl8JBKJRCIZYhwrTEUGN0skEolEIhkxSOEjkUgkEolkxCCFj0QikUgkkhGDFD4SiUQikUhGDFL4SCQSiUQiGTFI4SORSCQSiWTEIIWPRCKRSCSSEYMUPhKJRCKRSEYMUvhIJBKJRCIZMUjhI5FIJBKJZMQghY9EIpFIJJIRgxQ+EolEIpFIRgxDSvhs3LiRq6++mtzcXBRF4eWXX444//nPfx5FUSK2JUuWRGexEolEIpFIBh1DSvg4HA5mzJjBypUrjzhmyZIlNDY2hrZ///vfZ3GFEolEIpFIjoSu69FeAsZoL+BEuPLKK7nyyiuPOsZisZCdnX2WViSRSCQSieR4cPqclHeWMzNzZlTXMaQsPsfDu+++S2ZmJhMmTOBrX/sa7e3tRx3v8Xiw2WwRm0QikUgkktODruvU9dSxrXkb3Z7uaC9neAmfJUuW8PTTT7NhwwYeeugh3nvvPa688koCgcARr3nwwQdJSkoKbXl5eWdxxRKJRCKRDF9cfhc7W3dS2VWJpmvRXg4Aij4YHG4ngaIovPTSS1x77bVHHFNdXc24ceNYv349CxYsGHCMx+PB4/GE9m02G3l5eXR3d5OYmHi6ly2RSCQSybBH13UaHA1UdVVFCB4Fhfl588/IPW02G0lJScf8/h5SMT4nSmFhIenp6VRWVh5R+FgsFiwWy1lemUQikUgkwxOX30VZRxldnq5oL2VAhrXwqauro729nZycnGgvRSKRSCSSYc2RrDyDjSElfOx2O5WVlaH9mpoaSkpKSE1NJTU1lQceeIAbbriB7Oxsqqqq+N73vsf48eO54oororhqiUQikUiGN26/m9KO0kFr5QlnSAmfbdu2cdlll4X277nnHgBuv/12/vznP7Nr1y7+8Y9/0NXVRW5uLosXL+bnP/+5dGVJJBKJRHKGaLALK09AP3Ii0WBiSAmfSy+99KjFj958882zuBqJRCKRSEYubr+bss4yOt2d0V7KCTGkhI9EIpFIJJLo02hvpLKrcshYecKRwkcikUgkEslx4Ql4KOsoo8PdEe2lnDRS+EgkEolEIjkmTY4mKrsq8Wv+aC/llJDCRyKRSCQSyRHxBDyUd5TT7j56C6ihghQ+EolEIpFIBqTZ0UxFV8WQt/KEI4WPRCKRSCSSCLwBL+Wd5bS52qK9lNOOFD4SiUQikUhCtDpbKe8sx6f5or2UM4IUPhKJRCKRSPBpPio6K2hxtkR7KWcUKXwkEolEIhnhtLnaKO8ox6t5o72UM44UPhKJRCKRjFD8mp+qrioaHY3RXspZQwofiUQikUhGIF3uLko7S3H73dFeyllFCh+JRCKRSEYQmq5R011DbU9ttJcSFaTwkUgkEolkhGD32tnfsR+HzxHtpUQNKXwkEolEIhnm6LpOXU8dNbYaNF2L9nKiihQ+EolEIpEMY9x+N6UdpXR5uqK9lEGBFD4SiUQikQxTWpwtlHeWD6uWE6eKFD4SiUQikQwzAlqAyq7KEZWmfrxI4SORSCQSyTDC7rWzr30fTr8z2ksZlEjhI5FIJBLJMKGup47q7uoRH8B8NKTwkUgkEolkiOPTfJR1lA3LbuqnGyl8JBKJRCIZwti8Nva17xtxFZhPFil8JBKJRCIZotTb66nqqpKurRNAjfYCJBKJRCKRnBgBLcC+9n1UdFYMKdFzyHaIN2reiOoapMVHIpFIJJIhhMvvYk/bniHVdsLhc/Ba9Wt8UP8BMcYYzs08l6y4rKisRQofiUQikUiGCB3uDva17xsyBQk1XeOjxo94peqVkFC7NO9SDKohamuSwkcikUgkkiFAra2W6u5qdPRoL+W4OGQ7xP/K/8dB20EAcuJy+FTxp/jy9C9HdV1S+EgkEolEMojRdI3yznKaHE3RXspxEe7W0tGxGqxcWXAl80fPx6hGX3ZEfwUSiUQikUgGxKf52Nu2d0g0GB3IrTU7azbXjr+WJEtSlFfXhxQ+EolEIpEMQlx+F7tbdw+J1hOHbId4rvw5DtgOAMKtdVPxTRSlFEV3YQMghY9EIpFIJIOMbk83e9r24NN80V7KUTmaWyuaAcxHQwofiUQikUgGEe2udva27x3U9XmGiltrIKTwkUgkEolkkNDsaKa0o3RQZ24NJbfWQEjhI5FIJBLJIKDeXk9FZ0W0l3FE+ru1LAYLSwuWDmq31kBI4SORSCQSSZQ5aDtITXdNtJcxIJqu8XHjx7xS9Qp2nx0YOm6tgZDCRyKRSCSSKFLdXc0h26FoL2NAantq+V/Z/4asW2sgpPCRSCQSiSRKDFbR4/Q5ea36Nd6vfz/k1rqy4EouHR3ddhOnAyl8JBKJRCKJAoNR9Gi6xpamLayuXD0s3FoDIYWPRCKRSCRnmcEoeup66vhf+f9CsUbZcdl8qvhTQ9qtNRBS+EgkEolEchap6a4ZVKLH6XPyes3rbKzbOOzcWgMhhY9EIpFIJGeJWlttqFt5tNF1na1NW3m58mV6fD0AnJt5LtcVXUeyJTm6izuDSOEjkUgkEslZoNHeSFV3VbSXAUCDvYH/lv2X6u5qALJis7ip+CYmpE6I8srOPFL4SCQSiURyhmlxtlDWWRbtZeDyu0JuLU3XMKtmlhQs4bK8yzCqI0MSjIynlEgkEokkSnS4OyjtKI3qGnRdZ3vzdl6qfAmb1wbAzIyZXF90PSnWlKiu7WwjhY9EIpFIJGeIYJf1aDYcbbQ38lz5c1R0iXYYGTEZ3FR8E5PSJkVtTdFEjfYCToSNGzdy9dVXk5ubi6IovPzyyxHndV3nJz/5CTk5OcTExLBw4UIqKgZv3xOJRCKRDF+cPie723ZHTfS4/W5ernyZX2/9NRVdFZhUE1cVXsV9c+8bsaIHhpjwcTgczJgxg5UrVw54/uGHH+bRRx9l1apVfPzxx8TFxXHFFVfgdrvP8kolEolEMpLxBDzsbN2JX/Of9XsH3Vq/+OgXbDi0AU3XmJ4+nR/N/RFX5F+BSTWd9TUNJoaUq+vKK6/kyiuvHPCcruv84Q9/4P/+7/9Yvnw5AE8//TRZWVm8/PLLfOYznzmbS5VIJBLJCMWn+djVugtPwHPW793oaOT58ucp7ywHIN2azg3FNzA1fepZX8tgZUgJn6NRU1NDU1MTCxcuDB1LSkpi7ty5fPjhh0cUPh6PB4+n7x+nzWY742uVSCQSyfBE0zX2tO3B4XOc1fu6/W7WHljLO7XvoOkaJtXE4rGLWTBmASbD4LDw6LpOt8sX7WUMH+HT1NQEQFZWVsTxrKys0LmBePDBB3nggQfO6NokEolEMvzRdZ397fvp9nSf1Xtua97Gy5Uvh7K1pqVP4/qi60mPST9r6zgaAU2jw+Gjze7B59ejvZzhI3xOlvvuu4977rkntG+z2cjLy4viiiQSiUQyFCnvLKfV1XrW7lfXU8dz5c+FihBmxGRwfdH1g8at5fVrtNk9tDk8aL3x3SpKdBfFMBI+2dnZADQ3N5OTkxM63tzczMyZM494ncViwWKxnOnlSSQSiWQYc6D7AI2OxrNyrx5vD2uq17C5YTM6OmbVzBX5V3DZmMsGReCyy+unpcdDl9NH9O07hzNshE9BQQHZ2dls2LAhJHRsNhsff/wxX/va16K7OIlEIpEMWxrsDRywHTjj9/FrfjbWbWTtgbW4/C5A9Na6dvy1g6IIod3tp6XHjc199jPZToQhJXzsdjuVlZWh/ZqaGkpKSkhNTWXMmDF8+9vf5he/+AVFRUUUFBTw4x//mNzcXK699troLVoikUgkw5ZWZ2sog+pMoes6e9v38lLlS7Q4WwAYHT+aG4puYHzK+DN67+NZm83tp8XmxuENRHUtx8uQEj7btm3jsssuC+0HY3Nuv/12nnrqKb73ve/hcDi444476Orq4qKLLmLt2rVYrdZoLVkikUgkw5Qudxf7O/af0XsctB1kdeXqUNXlBFMCV4+7mrk5c1GV6JXi03WdLqePZpsHt39oCJ4giq7rg9EFFzVsNhtJSUl0d3eTmJgY7eVIJBKJZBDS7elmV+suAvqZ+dJvdbbyWvVr7GjZAYBRNTJ/9HyuyL+CGGPMGbnn8aDrOp1OH802Nx7/iVekVlG4a97yM7Cy4//+HlIWH4lEIpFIoo3NaztjoqfT3cm6g+vY3LCZgB5AQeG87PNYVriMVGvqab/f8XKqgmcwIYWPRCKRSCTHid1rPyOip9PdyVsH3+Kjho/w6yI4eFLqJK4Zdw2jE0af1nudCMGig43dp0fwWA2xp2FVp4YUPhKJRCKRHAcOn+O0999qcbbwTu07fNjwYUhMjU8ez5UFV1KcUnza7nMy2HoFj8t36iLPolrJsOaRbE47DSs7NaTwkUgkEonkGAQtPT7t1Fsu6LpOeWc579a+y972vei91W6Kkou4suBKilKKTvkep4LT66ehy4Xdc+qCx6SYybCOJtmcgaqoKNGvXyiFj0QikUgkR6PT3cmetj2n7N5y+pzsaNnBprpNNDgaQsenpk3l8jGXR13weP0aTTYXHY5TF3cGxUC6ZRRplmxUxXAaVnf6kMJHIpFIJJIj0ORooryzHE0/ufiWgBZgf8d+tjRtYXfb7pCbzGwwc37O+cwfPZ/M2MzTueQTRtN0Wu0emm1utFPM81ZRSbNkk24ZhUEdnBJjcK5KIpFIJJIoc9B2kJrumhO+zhfwUdZZxu623exu3U2Pryd0Ljc+l7nZczk/53xiTdEP9LW5fNR3uU45cFlBIcWcSYZ1NCbVfJpWd2aQwkcikUgkkjA0XaOis+KEem91e7rZ37GfvW172dexD2/AGzoXb4pndvZs5mbPjWqGVjhev0ZDl4su16m7tZJM6WRaR2MxRK++0IkghY9EIpFIRhyPlzyOqqismLEi4rjT5+TXW36N2+9maeHSI17v1/xUd1ezv30/+zr20WBviDifbElmWvo0pqVPozilGIM6OOJcdF2n3e6lweYKdUw/WeKNSWRZxxBjjD89iztLSOEjkUgkkhGHqqisLFkJEBI/rc5WHtn+CK9Vv8aygmWHXePwOdjXvo89bXvY174Pd8AdOqegkJeQx6S0SUxPn05eQh7KYEhhCsPjD1Db7sR+ij21Yg3xZMWMIc6YdJpWdnaRwkcikUgkI46g2FlZshIdnYVjFvK33X9jTc0alhUsY0nBEkAEJ+9q28Xm+s2Ud0UGOSeYEpiUNolJqZOYkDqBBHNCVJ7leGjr8dDQ7Tql4GWrGkNmzBgSTdGrIH06kMJHIpFIJCOSFTNWoGkaj5c8zqqSVWhoIdHT7mpnc8Nm3qt7D0/AE7omJy6HaenTmJo+lbGJY6PaKPR48Po1ajud9LhPvuiiWbWQac0jyZQ+6KxYJ4MUPhKJRCIZcTxe8jgBLcB5Oeeh7lLR0FBRmZc7j4e2PESdvS401mKwcOnoS5mbM5eM2IworvrE6HJ5qe1wEjjJWB6jYiLDOooUc9agF3gnghQ+ZxNNA3X4/OORSCSSoYrH7+Hve//Ou7XvoqGhoKCh8X8f/F+okjLAuZnnctvk2wZNcPLxoGk6jTY3rT2eYw8eAAMG0q25pFpyMAyy4oOnAyl8ziYHNkJMKiTmQmwag6J2t0QikYww6nrqaHQ0kmZNo7yrnFFxo/DpPlqcLRGiJzzWZ6jg9WscaHfgPIkA5qFQfPB0MHyfbDAS8IOtXmxGCyTkCBFkHZqR8RKJRDLUaLQ3UtlVSVVXFe3udmIMMdQ76g8bp6AMOdHT7fJxqMNxwq6toVR88HQghU+08Hug84DYzHGQOEqIINPQKAAlkUgkQ4nHSx7H7XczK2sWAPmJ+TQ4GrD77IeNVVDQ0Vlbs3bIiJ8Wm5uGbvexB4ahoJBsTifDMhqzwXqGVjb4kMJnMOB1QFu52GJSIWkUxGeDQf54JBKJ5HTgDXh5cu+TtDhbOD/3fEo7SwcUPWnWNH4676esrVnLmpo1AINa/GiaTm2nk07niVVgTjKlkWnNGzLVlk8n8pt1sOHqEJuyDxKyIHE0xKbKeCCJRCI5SXq8PczKmkWTo4k1NWtYf2g9noAHVVEj6vIoKLS723nzwJt8bsrniDXF8lz5c5gMJq7MvxKv5j3KXc4+Xr9GTZsDl+/443kSjSlkxuRhNcSdwZUNbqTwGazoAbA1iM1ohaTRwh1mjn5TO4lEIhnMhLejcPld7G7dTUAPcE7mObxx4I1QXR5N10izptHubkdFpLTPyJjBa9WvMTZxLD+54Cdkxmai6RrzRs3D6XNSb6+nydFEQD+16senitPrp6bVge84KxImGlPIsI4ecu0lzgRS+AwF/G5orxRbbJoQQfHZMjVeIpFIBmBb8za2Nm1FR+e8rPPwal66PF38btvvBrTwXDf+Ou6edTf/LfsvK0tWMid7TmhceC+vWFMsRSlFFCQV0ORoot5ej8vvOuvP1+3ycbDdcVxVmAeb4NF0ndoOJ3mp0fsjXgqfoYazXWyGfcIClJQHlsHxD1oikUgGA3Oy57C1aSuPlzzOsoJlXDL6Eh7e8jCuQJ9ICVp4pqRN4f4L7segGiLaWJyXfd4R5zeqRkYnjGZU/CiaHE3U2GoiurGfSdrsHuo7XRxN8ygoJJnSSLeOwmoYHF6Clh43myvb2VzdjtWo8v73L0dVoxPCIYXPUCXg68sKi0mB5DHSCiSRSCQIK43D6+CpfU+xpmZNKEg5yLKCZWi6Rp29jt1tu3li9xMh0RN8DbcMHQlFUciJzyEzNpM6ex2HbIfOmAtM13Waut00H6UoYTAtPd2SOyiytNy+ANsOdvJBZRsVLX2B5AlWIzXtDsZlROePdil8hgOuTrEZ9gsLUHKeTIuXSCQjFqfPyXk559HibOH1A69HnFtWsIylhUuZmDqRzNhMVu1cdViX9nD31vFgUA2MTRxLblwuh3oOUW+vPy7hdLzousjc6nAMnLllVi2kmrNJMWdGvfCgrutUttr5oLKdrQc68PjF56AAk3MTuWh8OncvKsZqil5FaCl8hhMBL3RUQUc1xGdAcj7EpUV7VRKJRHLWCGgB9rbvRdM1KroqIs4VJxeztHApMzJmkGQRhWNPxMJzLEwGE+OSxzEmYQy1PbXU2+tP2QKkaToHO5x0uyJFj4JCnDGRVEs2CcaUqDcPtbl8bK5q5/2qNprC6gllJVi4cHw65xemkRpnRlGIqugBKXyGKTrYW8RmSYDksaI44hDqNSORSCTHS3gWV0VXBQ6fg2f2PXOY8CnvKmd783YuGX1JxPETtfAcC5PBRGFyIXkJedTZ62h2NuP2n1hxQYCAJtLV7Z4+8RRriCfJnE6SKQ1jlKssa7rO/kYbGyvaKKntItAbbW0xqswem8JF49MZnxkfdVHWHyl8hjueHmjeA21lkDQGUsaKdhkSiUQyTFAVlZUlK3F4HczKnsXLFS/zcdPHofPLCpYBsKZmDX/f83dijDGnXewMhMlgoiCpgIKkAmxeG23ONlpcLcclgnwBjepWB36/gSRTCrHGeBKMKYMidsfm8vF+ZRsbK1pps/cFdRemx3FRUTpz8lOjbtU5GlL4jBQCPuEG66wR1p+UApkNJpFIhgUrZqzAr/n5f7v+H83OZjY3bA6dWzJ2CUsKljAuaRz5SfmsLFnJlsYtZ0X4hJNoTiTRnEhhciEuvwuX34XH78EVcOH2u1FQMKpGjKqRgKZS3uBiTEzcoOmdpes6FS123i1rZfuhzpB1J8Zk4ILCNC4uTicvZXBkkB0LKXxGGroG3XVii8+E1EKRFSaRSCRDFF3XuXDUhdT11EVkcM0fPZ9l45YxOn40eYl5pzWe51SIMcYQYxw4AcXp9bPjYBdmxSoigqOMxx/go+oO3i5tob6rrxxAYXoc8ydkMHtsChbj4LXuDIQUPiOZYBxQTCqkjYO49GivSCKRSE6YQz2H6PZ0MzZxbOiYisqNxTeSHpPOuORxoeNn29JzIvS4fXxyqAuvP7rCDKDd7uGdslY2VrTi9IoYI7NR5fyCVC4tzmRM2tCw7gyEFD4S0RusrgMsiZA2XliCBlkwmkQikfTn8ZLH8Wk+ZmbMpMfbw9/2/A0QGU8aGo998hj/vurfgy64diC6XT4+OdSJP3B8LSjOFNVtdt7a28z2Q53ovUvJiLdw+cRMLhyfRqx56MuGof8EktOHxwYNO0QmWNp4iM+SAkgikQxq/rr7ryzNX8r2lu14Ah7iTfFclHsRaw+upayzjL/t/tugtvIAdDq8lNR1EYiS6NF0nV113by1r4ny5r5Cg5OyE1gwKYvpo5KiVmX5TCCFj+RwPD3Q8AmY44UASsiWAkgikQw6Lh9zOYdsh0JxPQoKMzNmsvbgWm6ddCtJlqTDihMONlp63Oyp70aLgnfLr2l8XNPBG3uaQrV3DKrC3IJUFk/OYvQQCVY+UaTwkRwZrx0aS6AjAdKKICEr2iuSSCQSAJocTTQ5mpidPZs3at5AQ0NB4f2G97mp+Ca+P+f7obHRDmY+Eo3dLvY12EIupbOFL6DxQWUba/c2hdLRY0wG5hdnsGBSJimxgyOT7EwhhY/k2Hh6el1giZBeJGKAJBKJJEo4fU7KO8vRdI1n9j2DhhA2GhpGxch9c+8LjR2slp7aDidlTT1n9Z5ev8Z75a28ubeJrt5K0AlWI4snZ3FpcSYx5qGVnXWySOEjOX48NqjfDtZkyJgAsanRXpFEIhlhhLekePvQ21R1V2FQDAT0AEbFiF/3D/q4nupWO9WtjrN2P19AY1NFG6/vbgwJnpRYE0umZHNRUfqQS0c/VaTwkZw47i6o/Rhi0yGjGKxJ0V6RRCIZIVR2VeLwOajrqeO16tcACOgBlhUs444Zd/DWgbcGbVyPpumUNvXQEFYP50zi1zQ+qGxnza5GOpzCpZUaa2bZ9BwuHJeG0aCelXUMNqTwkZw8zjY42Cayv9KLZSVoiURyRmlxttDoaMQT8PDU3qdCDUCX5i/lhuIbyE/MD4mdwSZ+/AGNXfXddIS1eDhTaLrOtgOdvFRST2uPB4DkGBPLpuVwUVE6phEqeIJI4SM5dezNohBi0miRBWaKfi8ZiUQyvHD4HJR1lAHwQvkLNDubsRgsXDLqEpYWLmVS6iRURXyhD5YKzUHcvgAltV3Y3f4zeh9d19nbYOPFT+o51OEERAzPsmk5zC/OGPGCJ4gUPpLThA7dtWBrgJR8SC0Agynai5JIJEOU8I7rnoCHXa27COgBPmn5hA8bPwTgjul3UJxSTH5SPvHmSIvzYLH02Nw+dtZ24fGdWRFW3Wbnhe31lDWLgGmrSWXJlGwWTsoa1A1Do4EUPmeLdx8CRytkTxveWVF6QDRD7T4EqeMgeSyo8q8MiURyYgQ7rmu6xpzsOXgCHjrcHTy972kAxiWNozilmARzAmMSxkR5tQNT3+WirMl2Rmv0tPS4eXFHPdsOdgJgVBUun5jJlVOzSbDKPz4HQgqfs4HPBe8/An5RIIrEXMiZCTkzIHMSGIZhzYSAD1pLoesgpE+QRRAlEskJER6rc8h2iEVjF/GH7X/Ar/lJtiTzzXO+iaqoTEydOOhaUgQ0ndImG41d7jN2jx63j1d3NfJeWSsBXUcBLhiXxvIZuaTFW87YfYcDUvicDQJeuOS7sPt5aCsT7iBbA5S9DgYLZE2B3JlCDA03a5DPJYogdiZBxkSZAi+RSI6by/Iu40D3AdbUrAkVKTQqRu465y4MqoGCpALiTHHRXmYEDo+fXXXdODxnJp7H4wvw1v5m3tzbhLvXfTY1N5EbZo0mb5hWWj7dSOFzNrAmwSX3CmHj7oKm3UIMNO4EV6coDtiwQ4wNWoNyzxFCYbjEybi7RQp8XKaoASQzwCSSQU94nE1/Vu1chaZrfH3m18/IvWu6a2h0NLKkYElI9ADcPOlmMmIzSLGmMDp+9Bm598mg6zp1nS4qW+1npOdWQNN5v7KNV3Y20N1bi2dMaiw3zRrNpJzE036/4cywEj4//elPeeCBByKOTZgwgdLS0iitaADMcTDmfLHpOnQdEiKo4RNoK4+0BhktkDVViKCcmRCXHu3VnzqOFhHrlDRaVIE2SpOsRDJo0WHlzpX0eHu4vuh6/JqfeHM8z5c9z1/3/JU7Z9552m/p1/yUdZTR6moF4Nn9z4ZED0C7qx2jahxULq5ul4/SRhs9ZyBrS9N1th/sZHVJA0024TpLjzdz/TmjmZ2fgjpIPoOhxLASPgBTpkxh/fr1oX2jcRA/oqJAylixTV4OXoewBjWUCDHk7hKVkuu3i/FJY4RLLPccIRrUQfxsR6U3A6ynEVILRRaYKrMOJJLBwiPbHmFzw2bGJ49nWcEynt73NO2udpYULOH+dffT4e6gKLmIczLPoaqriqzYLOLN8adsBXL6nOxt34vDJ6oav1D+QiiDa1r6NPLi81hTs4bM2EwuGnXRaXvek8UX0KhssVPfefoLEuq6zs66bl4uqaeud/54i5GrpudwaXHGiC0+eDoYqt+cR8RoNJKdnR3tZZwcEdYgDToPCktQ4yfQVikypboPwf5XwBQLOdMh5xwRJB2THO3VnziaX1i5ug6JAoiJuTIAWiKJIj7NR013DS3OFso6yyjrLGNZwTKWFSyLiLMB0Qnd5XdR21NLbU8tGw5t4OXKl1kx/eTSyNtd7ezv2I9fE1aT1ZWrebfuXQDGJIzh9im3YzFYSLAk8OTeJ4k1xR4xZf3368oxqAp3LSg67NyjGyoIaDp3Lyo+qXUCOL1+6jpd1He5TrtbS9d1dtd38+quRmrahACMMRlYPCWLhROzRkw/rTPJsBM+FRUV5ObmYrVaueCCC3jwwQcZM2ZwpjoeFUUVtXBSC2Dq9aJPVuOuPmuQ1w6HPhIbCMtJzgzhEksrGlop5H43NO0SGWAyAFoiiQotzhYqOyvxal6WFCwBYE3NGtbUrGFZwTJU1JDoKU4upryrnLU1a1lSsIS1NWtD4w7aDnL/5vv58rQvkxGTgdXYV9C0v0XIr/lpc7XR4myhw90RGucNeNnWvA2AVGsqX53xVSwGC1ajlR/M+QHpMelHLU5oUBUeWVcOECF+Ht1QwSPryrnnJESPrut0OLzUdrpo662GfDoJaDrbDnTwxt6mkIXHbFRZODGTxVOyibcMu6/rqKHoun76o7CixBtvvIHdbmfChAk0NjbywAMPUF9fz549e0hISBjwGo/Hg8fT94/YZrORl5dHd3c3iYmnOWCsYj1ovlOfR9NErZyGT4QI6qiOPG+Og+zpQghlTx96QiI+Swggs8xQkEjOBnU9dVR2VUYcc/vdvFjxYsjVFM64pHEkmhP5pPUTDBgIEKAouYi7zr0rQgQtKVhCojmROFMcL1a8yLOlz3L75Nu5dfKttLvaaXe3HyZgWp2t/H3P36mz1xFrjOXuWXeTHZeNqqjMyJhBkuX4egOGi5y7FhQdth/OQBYiTdOxuX08uqEChzfAlVOz8Z+BoGWXN8CH1e28ta+Jtt52FhajyvziDK6Ykk1SzDBJcOlFUWDBpKwzMrfNZiMpKemY39/DSvj0p6uri7Fjx/LII4/wpS99acAxAwVEA4Nb+PTH1dWbJVYCjbvB16/rb9JoIYCypwtBMRRaSihqbwXocWCQf+lIJGeKFmcL+9r3hfb9mp+3Dr7FuoPrQm6n42Fswlimpk9lScESHt3xKBVdFSHx86cdf6K8q5xlBcsA0UpiaeFSAF6vfh1VUVlSsISdrTt5Zt8zuANu4k3xTEufRrIlmaWFS5mYOpHsuMgwhiO5tH6/rpytBzoIaDof13RgMij4AjpfubgATYeApnHbBflourDk/POjgzz94UE+MyePa2eOwuvX8AU0XtnZwOqSBpbPzOXq6bkn+xEfhq7r1LQ52FjRxpYDHXj9QvzFW4wsnJTJZRMyiRumFp7BIHyG5yfbS3JyMsXFxVRWVh5xzH333cc999wT2g9afIYUMclQeKnYtAC0VwoR1LQL2quhu05sZa+DYhD9tLKmiC1t/ODMrNI1YcnqrhPxP0mjZfyPRHKa6XB3UNrRl/V6wHaAZ/c/S6OjEQCjYsSvHy5+Es2J2Ly2iGMHew5ysOcgh3oOUZBYQEVXRURcUHGycC8FrUFBVEVlTc0a9rXvo8ZWA0BhUiEFiQVsqN3AsoJlFCQVHCZ6xLXwyLpynF4/n50zBocngNPrZ93+ZvY12JiYnYBRFaLHqCq09HhCQub368pRVYWrp+dySVEG3S4f/9lSi8srGp+WNtooa7afNtGj6zpNNjcltV18VN1BfViH9uwkK5dPyOTC8WlYjDKG50wzrIWP3W6nqqqKz33uc0ccY7FYsFgG4Rf/yaIaRJ2cjAkw/dPgsUPzHlEzqHmvSCdvKxPb3heFEEotENWVMyYIkTGYAqUDXrH+rkOiyvVQc9tJJIMUm9fGnrY9aLqGN+BlTfUa3ql9Bx2deFM8RclFfNL6CUBIqKypWRO6NsjMjJnU2etoc7UBsLttN3vYQ2ZMJi2uFjQ0VFSKUooiXGAATY4mFEUh3hQfEj2X512OxWDhjQNvsKxgGV+Y+gXGJo5F03TsXj89bj92t58et4/pecksn5nLqveqebeslXsXT+DVXQ0h0VPaJPpWKYBf0yOsN6/uEtYcgKun94mb4DHglEWP2xfgQLuDnXXd7KrtojksNshkUJg9NpVLitIZnxk/aFLzzzSJg8B1N6yEz7333svVV1/N2LFjaWho4P7778dgMPDZz3422kuLHpb4vkwxEF3Um/eKrWWvKKDYXim2MvFLjZiUvjTz1EJhbYnNiG7AtMcmCiAm5Awdd51EMsgIFiS8bfJt7G7djaZrOH1O/vjJH2mwiy/887LOI9mSzLpD6wBCQuWlLV4KzQGqvWtD8xkVI1+a9iVWb/VSZnqVWt+7mFUzXs1Li6slNE5DY03NGkbHj8YdcPNy5ct81PhRKG09OJdf97OxbiN+3c/CvCtZMOo6vK5MPqpux+n1D9jz6urpuZQ19VDa1MMd/9yGpgvBAvQJH0WUTQtH03QmZidEiJ9wlAGOHQm3L0CX00en00tjt5sD7Q4OtDto7HZH3NegKkzMTmBmXjJz8lOHrTsrHFWF1DgL6fFm0uMtg6Jh6rCK8fnMZz7Dxo0baW9vJyMjg4suuohf/vKXjBs37rjnOF4f4UlxpmJ8ThZdF8UEW3stQK3lYKs9/DcEiArSCTki5TwhB2LTIjdT7NlzRSkGSB8PyflDK3tNIokyq3auYmXJSq4dfy0LxizAG/DyWMlj1HQLa8t5Wedx25TbeL36dSq7KilOKQ5ZZ1Zv9fLSFh8Zkx/CrXeioKCjU2hews6dl3LdHBOW9LfRdI21B9aic+yvFgWF8ckTmJA8lYKEyTy+55cE9ACqYuDrE35DfvwUDMrxfVEGRY8CLJqcxVv7mnvvQWgl8RYjdo+f5FgTui4KD1qMKh7/wBliGQkWshIsqIqCqipouo4voOEP6HgDGh6/RrfTh8sXOOK6kmNMTMpJZGZeMlNyEwfFF/+ZxmhQSI+3kJlgITXOfNZqDo3IGJ///Oc/0V7C0EJRRG+w+EwouFgc87tF/aCOauisgY4DotBgwCfcTV2HBp5LNQnrkiVBbOZ4IYZMMb1b7OGv5jjhVjPGnJho0gNCrHXXizgl6f6SSI6LFTNW0OHu4N+l/8bj93Cw52BI9Fwy6hJumnATAEsLl6IqKkmWJBLMCSSaE7lweRKdPMz2nk7SfVfx5E1f5d43/0KZ61VmzIDl5y1j9dbL2eb4c6/oCZccfZhIwkc3+XGTuTjrOswGYb39oP6dkOjR9AAVthLGJUw/4rNouk5rj4f6Lhdvl7ag9d5Kh5DoCe4Hsff2z+py9v0BeiTRA9Da46H1OFPXLUaVlDgzGfEW8tNiyU+PY2xqLMmxw7AJ9QBYTCqZCVYyEiwkx5hQ1cHruhtWwkdyGjBa+2KEgmgaOFv72mn0NIGzvW/z2oUly9UpthPFYBECKCYZ4rIgOQ+Sx4jNmnxkUeS1C/dXYi5kTALjyPgFI5GcLF3uLublzqPb3c3rB14PHb8g54KQ6AFIs6ZRnFqMxdAX/7hq5yq29/yHTP9yqiov4PJf70XTL2TOORb2u5/n1+9AdUsAS0YlRk8hDts4LBnCXZYTU0CjSwgsH91kaguI77mc7b2hQm3K27SobzM7dSHL8r7Mlra1vFH/FOXNdsaqy7l6ei5NNje1HU4OdDg52O6gtsN1VEtLkLzUGKbkJHGww8H+RuH6mluQiqLAR9Udh41PsBrpcfuZNTYZXYcdh7qYmZfM9FFJoIDZoGIyqJgMCiaDSlKMiZRY84gsLBhrNpCZaCEjwTqk0u6l8JEcG1UVtXXis0S7jP74PSIGx2Pvfe0RosTnCtucYa9O8DrFGL8bAh6wN4uttSxybktCb7+ycyF3BlgSYfdzIt196g1izAd/FBanRT+DHf8QmW2X3SfOvfdw5L5EMkLxaT72d+xH13WcfmfouIrKzZNuBsCgGChKKRowg8qvBbh94ldZNuY2lj26CU0XWVV3TFvBozs0KmwlWDKqGaUspdrmw5KxDk/rIgAaM9aBroDSZ3/5sMzABRMCtPA2LeoGslnMjfnfxOczUWBcjtpsYL/WRqWngjf3NYdSvsNRFdB0yEuJ4fzCNOo6nXwYJmbS483cf9WU0H4woPnjmg6MA1gkFKDH7WdidgJfmz8+dI2m6VxSnHGCn/jwJN5qJDPBQmaidcgWVRyaq5YMLowWMGZA3En8YvC7RR2ioLWop7HXpVYL9kYhog59KDZFEVWpjVaRqg9C/LTsh5Z9os9Zy16Y/wNx7r2H4Z1fQv7Fp+1RJZKhSmVnJZ6Ah031m0KtIILVmNfWrOWzkz7LhJQJEZWWQbiH6jtdTIm9iYBFZ9V7VSHRo+nB2Jo5TJuqMSn7Ehbn3softz9GWfMiRilXUNPqxxBbjTGuCl0zomtm6uydTBodIDHGQHPHBAy26VR0ZXF3+X68gaDAKQKKEE4pDbNBZXRKDDo6NW1OLp2QQZzZgNGghrK0PqzuYPnMXDRN58PqdtrsXl7d1RAKUg6+vlLSgL/XN5Yebw4VDtR790ubekLXnc76PUOVeKuRrEQrWYkWYs1DXzYM/SeQDG2MVkjIFlt//F4RZ9Twidi6DoreXiDS9nc/J4RR1hQhfFr2QuYUyJsD6+6HD/4gxhZcctYeRyIZjLQ6W2l2NtNgb+CFihcAmJgykTvPuTNUaTk/KZ8ZGTP6runx8Js3S/H4tdCXf9BiEsyaWl3SEAoo/vS4L9PS4+bt0hbyDdfRo3dT0+ZEMXbiaboGly8F9D539H5gfx1AX0uhPtEjAouTrEYqWx1cPjGDz8wew5o9jQMWFAxfV/D48pmjDktZDxIegdRm94ZEnKqI/YnZCWja4fFJI4nhJnbCGV5PIxleGM198UYzPgOONmjYAZXr+4Ksy9cifoX10rIXnv2UaIAKcOkPYf73zvrSJZJoEUxZDzbw9Aa8lHWW4Qv4+N2236HpGhkxGaF+WbdMuoWxSWNZWbISgNsmfZkHXt1HyaFOFEUJpYSDEDoTsuJ5p7QFm7uvsKEO/N/qPQOuR/enHBbibDIGCBhayYyPpzg1n9Q4ker85Ac1BHQwqgoPXjcN6BM1G8vb8Gv6gLV1tLDjVpOBGLOBGJOBuxcWk5VoRQHOH5fGXzZWsbqkIdSrK9jPS9MJVXeePTaFbQc7mZ2fQozZECpoOBKItRjITrSSlWgd1qn2w/fJJMOPuHQoWgzjF4k6RGVrhCUo+Gs1dZzoYRYUPdNugnGXC8uRDHyWjBBURQ2JmBUzVlDRVYFf8/OnT/6EV/NiUAx8e9a3URSFZEsyk9MmMy1jGugKbXY3H1W34/YFKGu2A4Rq3WQnWoizGELHB8JiVJmck0hijIk99d10sQtF9eHvmRYxbunUPCzpFWh6O0tGXQoIgRMUPX5Nj3A1rdnViF8T1ZeDokdVIc5sJMFq4ntLJpJgNRJnMWLqlzr9w6WTANG769ENlaFeXb9fV868cWlsrmoH4JuXi7YXj/QeT4uzcOH4dFzeAB1OL50OL212zxnp1xVNYsyGkGUnwTp0ApRPBSl8JEMPRYHsqaL2UMMnhIzWHVWHj3W2wcH3RVB2TMrZXqlEctYJWnpWlqzE6XNybta5/HPvP0OVkb887cskmhOJN8UzJX0KBtVAt8vH9PgbcZkDaBoRVYxLm3pQFWiyRaZ1ZydZubQ4g7FpsWQmWPnLxirKmu24fAFcvgDtDi8Ts88DoLRHWI2C1ZSFW+ryAV1o/asqAyHR49d0Pqpu55sLikiwGE8oZTqg6RENSg2qwuaq9pD1J6Dp3B1mCTq/MA0QwmCUOYZRyTFomk6b3UNjt5s2u2fAkmdDAYtJ7RU7Qysb63QhhY9kaLLnBRHjM+0mEeD8xg+g60DkmN3PidepN0DtFsieJlLfJZJhTNDV9bUZX+PPO//M03ufJoBw14xNHMsh2yHOyz6P6RnTMakm6rtclDXZIqoi13U6qWntq6rcP9zlmhk5XDNjVMSx714xkd++VRZyjU3MTgBE9eSJ2QlM6LUcTcxOQNf1CGETLnqsJgO3z8snKcbE0x8eBODuhUV8a2FxqMN6YozpsMakxyIoaoL0F0JBgvuBAWJ8VFUhM9FKZqIVr1+j2eamvsuF3X38zVyjhdmokploISvBSnKsacS0yBgIKXwkQ4/+omfDzyJFj2oQKewgxjXvhQU/Ef3KfC5IO/5K3hLJUCPo6vr0hE9jwBASPfGmeA7aDjItfRpT06diVEzsb7RR39nXLNPtC7B6ZwMb9jeHxM5AZQiP9KV57+IJ/ObNUsqa7VS22PH3toX43pIJmAwq5l431C3nj+WF7XUoirC8fPWSQr5x+XhizUYMvVac9ytE76/zC1P51kIhWoKiJBibc6LiJ5z+Qiic45nXbFTJS40lLzWWbpeP+k4XzTb3gIIpWpiNqqg+nWglZYSLnXCk8JEMPoxWUczQmiTq9ihqbxsNXbxWvwuzvgATlooqzvZWcV3mFMiaLDK92qugvUIc76gRcT+qUWSF+Zyw/1WxP1Dgs6z9IxnCrJixArffzd/2/C3iuN1np8C8hHj7TRiwsv1QJ929FYx1Xef/baxmT3037t56ObPGpJAcZ2LD/paIefr3twoPJo41G/jHF+dy8cNv4wvomAwKa+66OCRmLi7qK3kxMy/5qM9xMhaZaJEUYyIpxkRxVjzNPR6aut10OrxRWUuM2UBmgkVkxcVIsTMQUvhIBgexacINFZch6gIdjSsfEq+aJmr/TL4GDn0MLXuE8Jn1edj1XJ/w8btg/QNw4bdEgHR3nSiWuP0pcT5c/ARr/1z2o9P9hBLJWSGgBUKd0vtjMZh44r1GOnoMXDlVlJCwe/w8+MZ+mntjeDISLNwyZww17Y6QwAl3VZU29TAzL4nVJQ3kp8UdZjl5dEMFvoCO2aDiDWisfKfypCwzp2qRiQZGg8qoZBEP5PYFaLa5aep203MGXWEGVSE51kRanIXUePOQLSp4NpGfkCR6mOOF2EkcdXLd1lUV4tLgqkdE9eg3fwRbn4C9LwkLT+Zk0fKisUSIoLd+BJd8T6TEt5RC9nQhckCIn/CChzIFXjJEeXjrw6yuWk12bDZNziYADBhYNm4Zr1S9wsxpZl7YAX5NY+boZH7zVhlObwBVERacJVOzWbu3KUL0/GjZJEanxDI2NZZH366kpLabeePSDrt3MAYnaKkJ7sPgFStnCqvJwNi0OMamxeHxB+h0+OhweOl0ek8pRd5iUkm0mkjstTIN9r5YgxEpfCRnn/hM0Vk97vBfnCeN0QLLfitaVgS8wo2VNUXE+ExYCs17RO2fDT8TrTe6DwnX2MxbhNjZ+BtxHciCh5IhS7enm053J+dmnsuOlh0AoTifRFMay0Z/Hr8WYOzMXFaX9GVOxZoNfHfxBPJSYwFRF2dCVjznjEnh7kXFZMRbUFWFexZPwGhQ2VzVxnn5qRFWmf6iB05vTM5QxmI0kJ1kIDtJ/IHn8QdweQM4eze3L0BAE61ddV28qoqCxahiNRmwGFUsRpV4qxGLceT1BDvdSOEjOTuoRkgaLRqPmuPOzD3ee1iIF4NZvCoGEQC9+zmYfK2w/jTtEqInPkcUO0QXMURB0XPZj/qsPTLWRzKE8Gt+9nfsZ37efO7ffD8A45LG8e1Z3+a9Qx/wTOmTXDnq8yzM+RzPN9SFrlOAX103LcJFcsv5Y5mYnTBgZ/G7FhQNKGCGUkxOtLEYDViMBpJjo72SkYkUPmeT7GkiJsXdLTZ9BFQENcVCylhIHA2GM/jPLTw2J9xtde7tfeJHCftLyd4I6RNEq4tjzSeRDFLCqzRXdVXh9rv5xQeP4tE8mFUz45LGoQdiuCj1SzhGWXm99hne+DiLnh5R0yqYsfVOWQtXT8/FYFAYlx5PXmrMCQfFDsWYHMnIRAqfs0lClthAZCd5enpFUJd49dg5PHF0iBKbBin5Ilj5TGcV9Bc90Pf6zi9h7teExUnzC/Ez9QbY/T9RADGcrKli/IFNULMxcj6JZBASTF13+Vyck3UO+9r3Ydca0HXwal50DHgc2RgVBXvzpTiqM9F9QvScl5/CVy8ZFyoWGG8x8uOrJmM1SVeKZHgjhU+0UBSwJoqNPHFMC/RZg4KbzxnVZZ4QRouw7CSNOnPurIHQAgOLlOB+zca+dHbND+gw+jyo29o7sPfv3uY9wu1Vs1HE+UjRIxnkrJixAk3T+POuP7OoZxEfN30MiF8vntZF2I1XYcyy8sKOOt7Y0wSkAnDh+DS+MK8AgOUzc8lIsPDXTTVkJVqldUYy7JHCZzChGiA2VWxBAj5w28DTLV4HmxhSTSJFPHGUeI1GzYhjxeAc2CSE0QV3wuv3QsmzENtbT0RRQddEwLW9RbxXVMiZecaXLZGcDubnzedQzyHW1KwJHbt89GK6lEW8tbuHDXu2EWwvZTIoXDAujdvOzwdE5tG00UlcPjGLRKtJxuFIRgRS+Ax2DCaR/RSeARXwg7dHuMpCmx0039lZkzkO4jKFWLAmi7TywchALrCr/igqOTfuFFldU66DTb8RoieIrkFPkzgWnxmdtUskA9C/83q9vZ5WVyvpMemhMSoqRXHzyT9nAu/v3xcSPckxJu5ZVExucgwAKXFmpo1KwmwU/3+lpUcyUpDCZyhiMIqGm/2bbvq94LWD1yE2vwt8bvHq9ww819FQDMJ9ZUkQVZSDlZSHSqfzgVxgRjMUXSGsOqmFotnp2Auh6m1x3poEcVkiBghg0QOyv5dk0BDeef1TEz5FZWclne5O/rn/n6ExGhpryjczRsklvJH47PwUth/qZOuBDr5xeRHFWfGyqq9kRKLo+lDtL3tmsNlsJCUl0d3dTWJiYrSXc/rQNGERCvh6X/298S70uqcU8RoUO0brmc3Cija6Dq2lsOl3IuOraLFoZOrugvhsGHUulL0urEKfeUaIpHBkqrskSqzauYqVJStJVseRYhhPs74Jp9+JxWDhtvE/5NWyD2jwb8ZZcye6P4W0ODPnjk1m3T5h1fzChfncf/WUKD+FRHL6Od7v72H8zSaJQFVBtRy7HcRIQVEgc5KwmgWbnU5YCm/+EOxNUPsRpI4XtX7e+RVcdDfsf024wVSDTHWXRI0vTv0idT11rK5aTZdWBYCCwvVjv4auGbD1WHG1fhndn4Jq8HDv4ml8VNMeuj5lgNo8EslIQgofychm6W+g8wC07IeEbBh3OZS+Bs4OYR0bv7C3w/s+IYLyL+4LlpZZX5KzjKZr7Gnbw8KxC3mt6rVQ53WDp5hYQxpryrbR2pqP5skG1YMhcSs/Xm3Fr+nccXEh8VajDGCWjHik8JFIUvJFdlrTbjjnVhH/s/8VETR+8APRXqNlrzh+YBOMvUi4uSSSs0AwoPkr075CaUcpNq+NlypeCokeAL+ljCf2PYir7gtoHhGTdnlxHhvLhegxGRR+uGxStB5BIhlUSOEjkYCoPWQwQcMnMPNmaC2HtlLwuaDrAKD0pboffL+v6raM8ZEMQP/sq3BW7VyFpmt8febXj2uuYEBzg72B7qaLqPa8wQHf26HzWdaxNDkbcdXfhuYWNcEum5BBgtUYEj2+gM6jGypk5pZEAgzSPGSJJArEZ4rChqoRFv2030mdkPiJy4BDH0LlehH/Izl53nlQBIr3fw/w5FL4+xXQ0yxir9Z8t9flWApPLBBbdx042oRbMsh7D4u5zgCPlzzOqp2rBjy3aucqHi95HOgTK/3HBgOTVSXyV+/R5nX73RQnF/NS5UvscD7OAd/60LkpSRcQsBfjqr0dzZUPqgtT8sckxphYXdLAVy8ppOKXS7lnUTGPrCvn0Q0Vp/D0EsnwQFp8JJJwYlMhbw68PlD8ji6y3RytQvzUb4OsyaJkgMl61pc6JHjnQREMPlA81HsPC1figU0iyy7ghfcegZ5G8LvFOYB/XidcjdNugq6DsOcF8dkD/OtTsODH4r0pFva9DNv+LtyR7zx42i1yQUHj8DpYPn45dp+d58qfo7Kzkn0d+7h54s3U2+u5ZdItAKwsWcmWxi38fcnfQ6Lnzpl3HmYJCk9TDz9385qb2d22m2UFyyhKKYooUmjVcqnuaKW9YRIB5zhQ/Fgy1mJO/Zg36ux89ZKvcN9S4d6SXdIlkj6k8JFI+vPx/4Nd/xFNZZt2R57zu4W7y9EqUt0nLBVf3GnjIXksbPqtTHMPJ5gBB5HiJ1hcct63IGMCvPsrIWym3SSEC4jPt2Wv2DKniMy7PS+IYHMQ4rNlL2z4uRA/n/xTnMucItyRaYXQdUiUJziB2lNHclO1OFtYd3AdqdZUntr3FJsbNvPNc79JaXsp5V3lpFnT6HR38qcdf0LTNYyq+PW6tXkr5/7zXHyab0DRA31iJyiUfnbhz/jLrr+wu038+9N1ncquyr4LdHDRjKvhFgIO0Rz0onFZfH7eL7l3/W+xZKxlfWMs9/GL0CWyS7pEIpB1fPoxbOv4SI6P8GrPfjdUrIOmXQOPTR4LVz7Ut7//VSj5l8z46k/4Z3rxvbD+ftj8KEz7FEy9XowJCppQPzUi3/ffD5YgWP1NcLb2tR6JyxCidNpNYpyuwfRPCzdm6rje3nhHJ2iZmZM9h79d8TecPicVXRX8e/+/QxaXGGMMLr8LFRUNjTRrGu3u9tBrcXIx5V3lLCtYxpsH3sSv+1FReXLJkySaE0kwJ2BUjSiKwj/2/gNN17h10q3c9fZd7OvYh4KCjk6yYTxdgcrD1qhrRlz1txCwC4vOvHFpfPHCAhQFpo1K4rPP/YLaTjvfOOdOad2RjBiO9/tbxvhIJOGEV3s2WoXoOVLfrq6DwtqgaeK15F/ii7e7VmSEhXMG404GPZd8Fy78thA/v8joFT039YkeECImKGwUgxAyQZGTkC1ew0XQ3pfhpa+C0vt3m66J13DRs/u5PkHU0yRcZ3XbwdV51OWumLGCOdlz2NK0hZvX3My25m0h0ZNqEX30XH6XWBLivu3udqwGK+3udlTUkOgBQqJHQ+OXH/2SOnsd+zv2s7ttNw9veZi/7/k7rc5W9nfs52szvxYSPQoKkyzXo2umiPXpmgFX3W29okcE2WckWFAUmJKbRGailQ1f+gXfOOdOad2RSAZAWnz6IS0+EqDPSlFwiejWnnsuNOw4+jWmWNFANjYDlv9JVH5uKRUxK921A1uChnMFaLcNbA3Q0yBapvz3ViFeVCN8+hkxZvdzfcLk0Ien574xKULcFC+BWZ8feExsGpSuEX3nBrDOae8+xOcb1vCJrzMkWoqSiqjoFsHBRtWIP1yIDcC5meeyo2UHywqWsaRgCX/a8SfKu8pJtabywLwHWFuzljU1a0LngdCxI6FrJly1txNwjkdRAljz/kaKMomGgxfzlYsL+NGyycf3GUkkwxBZuVkiORW0QJ/oCb7OXQHO9r4Yk/74nOLV2SosQC17+513iSDeYH+kcBfQcGH9A+I5Jy4TfeOC7Hmh12KjiNeSZ4Ul5+BmIQyPhGrqa76rGPrKCFiTRXuRgQhadMrXQnulKDo59gLRZy6Isx1s9eJnGfDD5T8MndLefQj13V/xwLk3c23n5pBVJyh6gGOKHoAdLUIorzu4jr3te0mxiN56He4OvvX2t9DQiDHEUN5ZzpKCJSHRk6yOw6N34dJ7qy0HEwoDZly1XyDgKkBR/OSlJNDkHEdatomlFxfwxKYaEqwm6dqSSI6BFD4SyUBcdl+fa6pmY5+1prseUPqamPZHMQgrQrjoCbpe3n8Eyt+Ea1fC7ufhw8fg0h8O/Xggtw3szcJq010rxISzTbivIDIgOW8OdB4UBSL7E5MKrg5IK4Z2kX0UEj2AUADBe3ZFXjvtJtjzYp8wMseDzyGET3ulCHwumA+Tr4H4rN7pNMicwuO7VqF2bGPF9c+hbfwt6ru/ojNnGv91HQyJniAGxUBADxBnjMPhdxz2CEnmJG6acBP/3PdPPAHRGNireTlgO8ABDoTGBed1BVxUdFXwo/d/hM1rAwi1oQg9sgKaP16krLvzQHUTM+ZvNNknUmi8lj8vm83olFgSrSbp2pJIjgPp6uqHdHVJIhgoHdttg4fG9sWVHBUFpt0o3ga//IOxLJlTRL+wWbeLL+qSZ0X20bxviVdDb2811TC4XGJep7CYONuFUPnkGRFL01/oTLsJmvZC6z5xXDUcXvE6LgNyzxHWmD3P98XkTLsJqt4V1rNpN4k5dU18dlOuO9zqFswACw+Anni1cHsd2ASdNeKYosLYeTD5Wh6vfAG1ZS/EZbLS7OXOLhsrOrvozJnGvXoTW2JiBnz8YABzMBYnSND91d+1dSIoKFiNMbj8TgLeZAzmLgKeTFy1X0D3CYuRMWkLMbkvAnDrhDv4/vnfPKF7SCTDFenqkkhOBwMJjf/e0it6FCKsEAOi931JT7sJ9r7UG8Cr9lmFvA6xubvEWLvook3THsieSsjCNPNm4RpSTbDzWeE2m7tCVJw2mOCjVeL14nvg/T+K98H1hwunp64Sxz7/2uHLDR8X8Am3ldcugrU9PeCxiXidcBS1r5/Zgh/DlOvB1XW4ONECwtqSf5HYDm7uEzkgavAEY4Cm3tBXKTtYODIoatp6XU5xGVB4GTSHpbwv+HGf8OqoggU/gYlLRS+2vS9D00448D4ceJ/F6YV8Iz6ea+0t3OlQWJmSBLrO1n6iJ8GUwJenf5k1VWso7yqn3d0eyuoKip/gfnFycShG55vnfjPk0grGCYWTbk2nzd3GxJSJtNg0OgLl6Oi4/E7ijcnY6cLXNQN387WgxaCYWzGnvY2n8dN4TD1YMtZR1vXJMf79SSSS/kjhI5GcCO89LFxfyWNFVteJUPFWX5xLMPW6Za/4op56Q5/FJLxOTbhomnQNuLv74oem3dRnyQBwtIjxtvq+eTqqhXgI1iUqXwuNJeL8/5svrC3nfg52/FMEbzfuhKypIjU/c2KfKAkStLyEH596g7DstOwV6eUmi6ioHE7qOBFonDa+L8Yp+LzBeYOiR/ND9Xuw9LeiptJ7v+5zNf7j6r64q9tfFT+P3f+DvPOh9iMRUB6e1RX8bDMnia29Sgisuq2Mb6tmjaLyj8Q40HXu7OxiZUpyxLInGxL5Zexk6pIK+ea53+T+D+6nw9MRIXqmp09nV9suJqdOpiiliAmpE/BrftbWrEVDw6gY8euRMUFGxcj98+4PxfUsGbuUNw9WoRMAHez+Lqydt9LTNJlg8q0l4w1MifvQfel42xYAEEhIGehfmkQiOQoynV0iOV7CM72CoueyH8HYCyPHxWUMfL27u/eNDsYYkXqdOEp8Qe8aIGbI0Xr4saDoCRb0C2fqDeJLP1ws7f6fED3TbhJp940l4tppN4n3258UYmX7k0L0TLtJWJJa9oqMtHCClpRgu4WAH1pLoeTf4O4Qx5yth4segFHnQnpRn+gJp3SNmPfie+En7eIz/fjP8NztkaIHYMy8vmDzkHXqR/ClN8VrQi6MXwSLfwGzviCeJZy0cXDxd2DJQ5A1FYOu8cXuHq6zO+hWVZSw8TP98N/KPRh63XOqooayr4StT8ekmvjXsn9x58w72dexj9EJo/nVxb8iLyGPNTVruLHoRv54+R9JtaZGLMOvC2G0eOwVXJK7mJ0t+3pFjwFdN+KsvZ3WpqmE/4p219+Gp3URoDFvXBretgV42hYe/nlKJJKjImN8+iFjfCRHJBjvU7NRxI0Es7GClYnNCeDtgczJgHJ4VtfxkjwGumoJudGSxkD3IUKutYxJsPD+I19/tGKAwViYcKtIkPBj4YUAwysmpxSI4G1FhdYyCIS5vcIzsAaaMzgXiEDmhGz45F+w8aHDU/3DRebtrx7+jMcb8+T3iKyxrtrILDMQAeZ7niegmjBoPl6Mj+P+jLTQ6a93dvEZNZWdc24jNWksxQWL+Pvar7O96WO2xMRgUk0R1ZiDzUeD7SeCx/+888+hHl4AE1ImUNZZBkCWvhBd12lRNzArdQGTYq9j1dtN6IF4QCctTlScbneIz/WrlxQSZzHyyLpy5o1LY3NVO/csKpaZXBIJMsZHIjn9BL9kg6nu878nxFD+xWH7vxYurYbtQmSgi5gdZ5u4NihARs2GmGRoKAFPd2STza5DkfftDu73CqHW/fDfz4E5Fkxx4HeBwSzcSea4PmESdKuh9xUGnPtVqFzXa7kxRN4nmBVlSRKiJyFHjNv9fN+9w11rIIKSs6bC6Nli3fte7jsXHvAMYq7YdBF3Y47tHaMMXN8ouN8/GLr/+WNhtEBKvnBN2ltE3E+v5W2lp45ATj5WZzvbrMl8FCP6rd3abeNip4sfZqSj9HRw66ES4mdMhte/h3poI1tSkiPETv8eW4+XPB5xPih67px5JwAun49JSRfw8oGnaFbWgwJjlesY7b+Rv6yvQ9fjQfEQk/dPepwFeNsWkB5v5lOz83j83SruWVQcajo6b1yazOSSSE4QKXwkkhMl3MrQ3+KgqkL0zP++aMnQdRB2/rvPsjLlOvEatIAsfyxkeQhlNAGkFQmrS3uliN3pj+YTX+Ah9xkipfwwwr4U9QC8elfkfsTQ3n1P75yh+jr9vlgTc6FosRB2SaOFeNnzghA9sRmRLSTe/gVc/4SI10kvFkImKHoG+vzCOZ1p/ooCCVlic7RBexVe3c/frRpY++JkFtmd3NvRhQF4va6BR1OS+Ff9O3y19HVWJcayMiWZO61jWVH0KSCyx1Zw39O6EIMqXHqarpFtnsIo6zQ+N/HL/Or1/dhcPpbPHIXHB2/Xv4rfOYY9B+eyh1oATAYFX8BCwFkAaCjApu9dTozZgNVkIKDp3L1I9OcKfy+RSI4PKXwkktNJeMsL6HMRnXOrcLuEBwYHM6EGcj3lzhTWkg0/jxQ+GZNFeviEpaIujc8pMsJq3oO6rX3Cw2iJzL4yxYi1BbzHfgZzvLje2X74uXB3VZDgM4bcaJ+C878Gb94Hhz6Ctd8X7qrBUq8oLp0Og4rHYAx2fABgJjGM93Vxa24WP2rrZKrXyw86umgziDR8DYU7zaNZMfNOqP1YCMD0CSHxo/WKVoOq8Mi6cj6qbufZr3wdV8sC/vR2JTcc3ExpUw8TsxNYXVKPzmW07Z+IQenLDlQAX0BnYnYCpU0LUBVx5kv/2MqzXzk/wqUl3VsSyckhY3z6IWN8JKeV8DpAPpdwITlawdEO63/aJ3qm3hAZOBweZ5M5BbIm96Zt74uM0wkXIcHA53DLEfSND74GmXytCGBuKxVxQ1lThOUp/Jr+DCR8dj8HLWXQsgfm3QUL7gdD799UwSysQdS41RfwsbV5Ky+Vv8Tu9t3U20UWnFHX8SsK12ecR05nPRPrSrjU5Y68OL0Ycmb0fQaqEVILRezTpt+G4o5ufuIjNle1M310EnddXsRv3yqjtKmH9HgzbXYveSkx1Ha6QtOmxZnpcHjRAVUBTYfPXTCWB66ewq1/+1jG8kgkx8Hxfn9L4dMPKXwkZwVNE8JH98PMW0WNHG9PX6xPePbWgh/3XRduXemfbr77OVEnKFj/Jjw9PlwMxWZAfIYQOhGWmt65goUDg8IrSH/BZY6H2FQRt7P1r6Ju0EDiZjAVXwT2tu2l1dXKhw0f8mzps6iAousEFAWjorLlvF9iUg0Dtx0JMvXGvsKUICpRlzwLSWPo+up2atoc3PfibkqbekLVnoKiJxyLUeVz54+lpcfNKzsbQ6Jn9tgUnv/avNC4RzdU8Mi6cil+JJKjIIObJZLBjKrC4p8dflwLgN8N4xfC+AVw3pdE2rjmE26quV8TbquAH6Z/SowP9bJSIwv9gRAo4UUT+9cLCs/aCrrhdE1YaYKiJzhfy14YNQviMmHc5cIdFuTyo/QbGySWHoAmRxOtrlbq7fU8Vy7citOMSez0d4fq7fytbSsrWurDRE+vdAl3H+55Huq2wZW/jmjJ4TAk0vHKj0lSjdy7+C6+8vS2UIRUf9EDsGBSJu9XtlHa1MPymbmYDSq1HU4+qung0Q0VIZETfJWBzBLJqSOFj2RIogcCOLdtx9/aijEjg9jZs1AMhmNfONjnU3t7ffUTRRHzZX0ucj5dh3d/3VsL5ztwwTfggz/AB38UfbE0f1+quTUJEnLQ/X6cMZfh7+jCWNlO7JyvifkMpkhLz0V3CzfV+78X6eX120XX83DRM5g+v6Pg9Ng58M5rGFpb2NT6Ov4MLxlxmex0tXJ14dX85IKf8NTep0SgciCBFXB4Oj+h9lnoHQdw/uE2/G4DRqsZV3YiO7xFLC5dRe24z/JaySE+a1jPx4FJVDHqsPX8LHkN6iGN17uvZmJ2At+YX0jOwVICMR28onm4/y1RR6m/+DleBvvPZKTNJxk8DEvhs3LlSn7zm9/Q1NTEjBkz+NOf/sScOXOivSzJacL21ls0/+pB/E1NoWPG7GyyfngfiYsXj7z5Nv7m8EJ/i34GDZ8cXuX4nV9iK3fRvHr/kedr7rV0hM8XfH3nl2LOMCvOYP/8AGxvvkXdLx4gqVUUWvwWcGuCwpOLmpmz5GrumX0PVqNVBCofeJ+VXTth5lWsuORHIrNu6g1sbtSZ1/Y8CtBRn0D7tlj8rr4vQneMmfPPfYOGeVfz047FbGhsAQYuMPiz5DXc5v4Xv/PdyNRRify90E73Z6+ltveZZwMvJKexP/0rcBKurcH+Mxlp80kGF8Muxue///0vt912G6tWrWLu3Ln84Q9/4LnnnqOsrIzMzMxjXi9jfAY3trfeov5b3z68Im9vReBRf/zDCf1iGhbzmbYf3kg1vADgmHmh+Brb779O/f97G2GzOIH5wucNi9cZ7J9faM67vhWy1AQJ3sH44H0UX3db34l3HmSVbS/a2Hl8febXweeG1lIe3dSAb9cLLGgqwfJBsDN75Iw6Cv9v7rWszrmo96zGJYa9/NDwT14LnA/ABepe5hn28zvfjfwpcD2/zmhjxl8fGrSfoZzv1OaTnD1Oa3Dzrl27mDp1Kqo6+DtczJ07l/POO4/HHnsMAE3TyMvL45vf/CY/+MEPjnm9FD6DFz0QoHLBwoi/wiJQFIxZWYzfsP64TNLDer4BusoPqvWdhfmCc5ZffjmB5pb+Uk+cB0zZ2RFz/n5dOQZVOcy15O5u5fLff8Rjq/+PGJeHw8Rj74xajMpPr/g8SaqL+43/ZH/iRbS4FW71vxga9TvfjaziBr55aSEX/fjLxHQNUDrgJJ55sP9MRtp8krPL8X5/H5eSOeecc2hrE5VnCwsLaW8/wn/SKOP1etm+fTsLF/aZl1VVZeHChXz44YcDXuPxeLDZbBGbZHDi3Lb9yL+QAHQdf1MTzm3b5XyX3XeYxWZQre8szAfQs3UL2hFEDwjp4m9q4pm/rA4dC9bheXRDhcimequMg+0O7ltbz1ca/kGMy8vAokfMqLp0nur+DX81P0JKUgIqAQo8fX3PPLqRPwWuxxfQuWDzb44sek7imQf7z2SkzScZnBxXjE9ycjI1NTVkZmZy4MABNE079kVRoK2tjUAgQFZWVsTxrKwsSktLB7zmwQcf5IEHHjgby5OcIv7WAZp2ynFy3FGoP7D7uMat/2AfncXTuGtBUcjS88i6cgBunDWaR9aVs7qkgR/4ttJB7NGmEmt0C2tAfE81l+vVqL3GAY9uxKL42ZT6C/7XPZniA2to4Ngd1gf7Zy3HSYYSxyV8brjhBubPn09OTg6KojB79mwMRzDzVVdXn9YFnmnuu+8+7rnnntC+zWYjLy8viiuSHAljxhG6nstxctwANDma6IiH1GMPZeGFk/lxr9C5a0FRRNr4y5/U49d0Vo5eT0tXEkZ8R5omhMHaVxJaDTMONccWM8a1jzznPr5j2sfeuCJUHAPMEMlg/6zlOMlQ4riEz1/+8heuv/56Kisrueuuu/jKV75CQkLCmV7bCZOeno7BYKC5ObJnUXNzM9nZ2QNeY7FYsFgsA56TDC5iZ8/CmJ2Nv7n58MBDCPnfY2fPkvON8PmcPicVnRX4phTSnWQkods/sF+/d85b71hO57vVPLKunD+9XYEvoLN8Zi5rdjXi13QMCqx2Tmd90uU8Zf0lae7uI8QJ6BhjNeIyvHQZ00n2t0WcHePaR6guEDB5oonKDwIR2WH9MWZnD4ufyUicTzI4Oe5o5SVLlvCNb3yD22+/nW9961tH3KKJ2Wxm1qxZbNiwIXRM0zQ2bNjABRdcEMWVSU4HisFA1g97q/8qA2clZf3wvuMOOpTzDc/5NF1jf8d+AnqAdxre44kFWpjUOPKcd1xSiFFV8AV0VAXKmnrwa+J9QIe3OjLRFJW/zLgWBTjc4S+yurZe/SWU7Ckk+9twqwO5xXrzyyYsRVEh69zugVYXWuNw+JmM1Pkkg5MTTtN68sknB6W1J8g999zDE088wT/+8Q/279/P1772NRwOB1/4wheivTTJaSBx8WJG/fEPGPvFcRmzsk4qzVTON/zmq+yqpMfbw0HbQV6peoUtE1Q++sbFaOnJR5yzvsvFfS/uxq/pGFUFTYfSph4sRpXwYskWo8r7OdN49JIv0W5NipjPFWPh+WvupNFfHmo3YtWcff3XItCh7A1o2UfikmWMunkSxphAxAhjdvaw+ZmM5Pkkg49hV8cH4LHHHgsVMJw5cyaPPvooc+fOPa5rZTr70GCwV2mV852d+R4veRxVUUMd0mtttVR1V+H2u7l/8/04/U5mZszki1O/SIxqYXKdgt7WEZrTo8H+RhtPbT7A6pIGls/Mxa9prNkVVrhOVfj07Dy2HeygrNlOeryZtDgzFU02ZnTW8Gn3OsaNy+TDed8lgMq82r+I11t+LJq0NnzS107EFAs+Z+RDJI6C1HHoNe/jbDHi95gwXvVjYi9fjpKce9K9zobLz3i4zCc588gmpSeJFD4SydBh1c5VrCxZyZ0z7+S68dexv2M/AL/e8mvq7fXEGGL46byfEmuKZWbGTJKtyaFrf/bqXjqdPjRdD4meCVkJrHynEoe3n/VFVfBrOhOzE9DRKWuy860FRdy9qPjIDUSDRSTHXACHPuxr8hpqGDuQA673WLBVRuUG2PrEoOpuL5EMVmSTUolEMuwJWnpWlqzkoO0gV+RfwV93/ZV6e33ofKwpltHxo0Oix+UNsL/JRrvDy+qSBiZkxbNsWjY9Lj8Pv1kWmvv8wlSyEq28UtIQcoHNGpvCvz4+FCFy+qe/37WgqE/0XPYjYa0pvAxmfAb+czM07+kTP+kTwdEMrs7eu+pgThR9wZr3CaF0zq1w/tfF6UHW6V4iGYpI4SORjDCOVJkY4NENFQQ0nbsXFUdhZSfH5yZ/jkO2Q7xa/SpvVL9BAGGtWVawjMLkQuJMcRQkFaDrOoc6nFS3OghoOlqvBae0qYfaThfOMCtPUWY8GfEi21Onz+JT1Wo/3LLDAN3TtcDhVpr3HhaiZ9QsSCkQwbK9jU8Zdzm0loGtHry9RVR744SYeBUc3Cx6pH34J9GGZCCkKJJIjgspfCSSQUJ/QRK+31+QnIxACc4XrEzs8Qf4woUFePwaf91YzfZDneyq6+azc8aw/WAH/oCOpos6NKqqoCqgKAoWo4rVZBCbUSXWbGTVe1UDiqnHSx5nS00nM+JvOmytq3auQtM10Q/rJOnx9rCnbQ+L8xfzevXrIdEzPnk8i/MXoyoqk9Mm4/Bq7Gvowu72h67VEQHMQIToCYohg6pQ2tTDFy/M5/+WTeaxdyp5ZF0588alD7iWiGfvLz7CLUDzvweeHmHRad4LLfsgNg2WPAhv/xzaKvqu84r1sft/QiTF5wgB9N7DA/dmu+xHJ/4hSiQjDCl8JJJBQlCQgPgSDe5/VN3O5qp27gkTPcGYkoEIaDq/e6sMTdf53AX5uH0B3L4AzTY3/9lay8ScBCZkxbPynSrqOl0ArC5pAGD5zFy2H+jgk0Od3Lt4wmFz//atMjRN53tLJoaO/WH7Y3Q4fDQcuJiqjgaWnqsQY1awGM38ffs6PMZKnD4nn3V8kxRrChaDJSI250j0D1wOZ9XOVbxX+x75SflckX8Fr1S+EhI9ALqms7ZmLV+fcRcHWv00dtkjrq9utbPtQGf/aVEVIYaC4ueuy8dzT+/nMKBL63jpbwGyJMCYuXDL87DhZ6D5wGAG1Rx5Xdch+Pdn+vYLLgKjRYicA5v6as0c2CTjgCSS40QKH4lkkDDQF2tQ9Mwbl8ZdC4r4w/py/rC+ghXzC7lx1miqW+14/BpuXyD06g/obNjfTFmzncZuN1dPzwVg4aQsSmq7KG3sIS3OzISs+JDgASF6rp6eS1lTD6VNPXz/hV08dMP00PnfvlUWEgVBurytuAMOemLWkZHnYfX2hew4oHHjhQH+VfIenrhKzL5x7OcVvvqKl3zzIhKzN/Fy5ct8ceoXuWP6HUf8PFRFZWXJSoAI8bPyk5Ws2rWK4uRiXqt+jdL2Uiq7KwFItiSTYkmhylYFmKhuMqFp7tC1bl+A1SUNrC9tRtchKcZEgsVIXZcQgJoOk3ISuKAwjaXTco7t0jpejuR+ShoFyx8Tbq4P/tDn3mrZCzEpYbE/QFqRCHgGaCgRlp/Q/FL0SCTHixQ+Eskg4q4FRWiaHlFBeProJDZXtTP+h6/j10RF4dljU9nXcOSGuhNzEilrtoeEzdXTc3l1V0PItdPu8NLp9IbGG1WFq6fnous6gd5efO0OL796fT8r5o/jL5uqqGxxkBZnoigzHp/mpcFZTY+/k6uKL+Hf5ZU449eTkF9Fs308KzfrWDLWY7UvZPIYjbJ2jWrvWqq9b0KlzrKCZZyTeQ6bGzaTak0lPSadVGsqRrXvV5Kma8zJnhMSP1+Y+gW+tPZL7GzbSXFyMeOSx6HrOhXdwjVkUk0kmBKpsdUwKnYcVbZS1tY9w+LcWwHYXd/NMx8dpN0hnntuQSqpcWbe2NOEqhBy6+1v7OHKqYeLnvCf0WnFYIKy14Ura+bNMOka2PNCX/xPkPYK2PwnSMwVsUKh681S9EgkJ4BMZ++HTGeXnE00TafH7afL5aXL6aPH7cftC7Dime2hTKJVt846bP94eHVXQ0j4GHqrDwOcl5/C9oOd9DdaBAN4j4XJoJASr5EQo5MYq5MUB93KNio8r6KofTE0ntZLGZWm0qa+jd8xDmNcFQCqYuCbk3/Ox+UGTAaVG8+3oPY2tLIarcQaY4k1xvJS5Us8ve9ppqRNYW/7XoyKEb/eN3+iWoBfd+DUWyLWlxtTiNE9BVUxMSE7jgtSb+a/W2vZcqADgPR4M7fOHUtNu4PVJQ0ht5bJIKo2zxuXFnItnnaRcyTeeRBUA1z8HWH9ef+Rw4XPQKhG0Pxw6X1w6Q/O/DolkkGMTGeXSAYpbl+AFpuHx94RFp1l03Iizr+6qyEkQPyazm/fKguJnuB+UWY8y2eOCl0T0HT+t60Wjz/ApJxE2u1CSGUmWGjp8YRED8DWAWJbgvc6HnwBnZZuhZbu3pL+ig9DbArG+LkY4/eimrsAsGS8Sxuga8aQ6FFQ0fQA/969gaqyRRROfIOnd8PFuYvY3rYBk8HIkvwrsBgNbKpsIdkwjr3te1FQ8Ot+VFS03mYRNq1G3F9XQNF751docFXjaR3HwpwbcLcq/PC93Xj8GooCiyZlsXxGLhaTgapWe0j0fPPy8Xxn8YRQ/NS8cWkn7s46FcJdYaWv9YmeoLDJmASt+yOvSS+GnBni/bsPijiiy3uDm2WGl0RyRKTwkUjOAh6/EDvNNjddTl/vMY3VJQ1ouh6Kwwm30oCwTpQ29TA+M47PzB7D3zfXUNrUQ7PNTWO3m06nlw6Hly6XLxTn+n5l+xHXEW7VGZ8Rh8VkYG+DLaKU3tJp2Vw7YxQ/fHk3bfY+d1hyjMqn53twuMHmVOhy+qnxvkWXuhWUvo7luq6CroasP+FWIB0NRTfRom5g1IRmFKuN7e2H0HWobVNoVdfS1euCq/G+jd9RSGxcCl46QQdN0TDqifiVMDdfmOjR0fHZiyk2X8fG8jbsHnHvgvQ4bpk7hvy0uNBlBoPI2rp7YRHfWigCxcPjrM4vTDvKT/QMEozdmX8fTFgCHz42sPWnowbaykWxw2k3wcaHRZC0KVZmeEkkR0G6uvohXV2S04nD4+dgu5Mmmwvt8K6WIaGzfGYu/oDGmt2iVUJRZjyN3e7QF/fxYFBFqrnTG2B0SgyxZgPlzSKbKVzYpMWZuagoPSS2gkHLwTiXCVnxKIoQBf1rC+eladxwYYAOTxPvND1Hl7fXzaRZRIvOnjl4PHH47cVo3nQUowPF4EA1t2KML8MYX4ZicDMQadqFNLTHYMlYHzoW8KZgMHei6709Inv7ewIRlh5dU9D9yXjaFhJwjEP3JwMQZzFw2/n5nDsmGSWs6WSC1ci7ZS3EmI2Dq55R/7R3gDd/JMTPgIRVeoa+9HgZ7CwZgciWFSeJFD6SkyW87k63y8fBdgctNg8gBI6m6RHuqQ6Hl8oWO+v2N1PT5jiue6TEmhiXEU+n04vVaOCS4gz2NHSzqaKNa2bkcM2MUQNajX59/XR+82YpZb1CKJjBFRw7MTuBosx4VFXhjbp/ACqJ7itps3sxqBDQIDFGwx33NrGJB8FaQ0D3E2OIx+wbR7e6MxTIvKPjbSFEtDgCjvH4HUX4bVNBtwABDDEHMSaUYkrci2LqZ52KEDbifUj0BA9rBhRVpK7rATN++2R8XbMJOMeHxijGblRrPUvHLWD5jL7P3KAqFGbEMSY1NkIIDRqCsT5B0RIUQgDxWZB/kaj6PJAFSDGAHhAi6MJvQ+ZkUE+4D7VEMmSRMT4SyRniSJWPg3V31u1r4lsLhKVgdUk9FS12Spt6uGZGDnWdTrYd7GT7wU4auwe2fBRnxZOTFENOkpWcJKuwPujCTfWbG2ccNn7W2BRS48ysLmlAUUR2VlD4KMCvrxcp6d+9YmJI6JQ22nrX18C1M3O5YdZoTAYVk0Fh42oT/qS12FrhU5NuYeq4Vt7eE2Bz81tY0t8V1XJ0yIst5uKs63iraiuZ2gJG94qeYCBzblwGjcYSYhMO4M15HnfTdfi7ziPgKiTgKsDTshTF3Iopfh/GhH2oMQcjBE5QACkK6JoZv70IXTODZiHgyifgGo3uS+sbCCimDnRfKsakHUzMiYkQPanxZiZlJxJjHsSNJvvH5ATdXgWXwOdeFhYdm2jHwe7nwBQDPpGKjx7oFT+aSI0/78uQe46o+xNExv5IJFL4SCQnSv9CgyCys4KxKbvrbby6q4Grp+eGRE+MSWVDaQuv7GyMmMtiVIkxGehy+UKZV5NyEiNifoKix6/poXn7Ezy2uqSBV3f2iR4dWLO7kc+cl0eM2cA3LhtPerwFVRFz3rVgPHcvLI6wfkwfnciWpnFYMtZhyoxhTNoiMkavwRJ4t3delRuKruf87IvwBnSKMpay4dCbvN+0jlitEGdcFXPTr2RW2uVsaX2TbR3rCTjGEZPzIhlZ3WRxOR+WGZiQG8DmSqOxYz7ejktA8aMYbaimrt7XbnTNRMBZiObJAo5gvVCdGKxNWHOeQzV34mldRKHxWr51rig8aDUZGJ8ZT3aS9YR/1lFn7IVC9AQtQDnTwZoIU28U+017wGPrE0N6ABp2QkelqAydPRWufEjUBJLVnSUSQAofieSECQ+A3VzVxjl5KbTaPTy/vS6UJbS6pIFXShpC8TEunwjwURXITLDSZHNTlBlPRYsoQNjf9RQkGP/T/1y4+DEaFKwmA1+8sIBXdzaE6tGU3L+Yv22q4Y8bKihIjwut+8dXTT7GE6oY46qYkjaFV6pfYU31moiqyDnGuczPmw+AxQQJGEmLi+XWSbdiVi0o+mKuyb+dDoeXsgNZeFoVirKsjE2fjjvgYHqq+Cw+LDNwwYQAsZnraNbfJ+DOQ/Oko/nS0L1p+GzTQTOB6kcx9qD7E1FMnRis9RjMHaixlfgdRfg6LkF3FeLrno0htgpLxjqqW+H1Pbfx7QXFjE6JCaXLDzkGssyk5IMlEQxGaP6JED0pheDuFAUPOyrBYBFFEAFqt0DNe/DhSiGitMDhc0okIwgpfCSSk+CuBUXous7v11fwUbWoDxMUKE9uruGDynYGCp7TdWiyuUMCKfw6iLTcAFx7Ti6fmpWH1Wzgq5eMIzXWzJObD5CTZOWblxdhMaoYDcIScvMTH6HpYFAUArrOUx8c4O5FxQNaqI7G3MIUtIaZlLSWoKBEiJ7RcaOZlpEc2k+yJDEhZQKX5l162DyFGfBeeStfSPwK1587mna7B6c3gCfgImtGO0a1lXptHa3qhl5nlY459aOImj+e1kUYYqsxxlWFsrY8rYvQ0Qi48vF1iIadmg7etgUY1YUEUteTnWRmVHIMY9Jij/m8Q5LYVDj0cWSl54lXiZT39ioIeEA1ieP/uVmkxOeeK1xn+RdHe/USSVSRwkciOUF+v64cXde5pDiDP71dGUoPd3kD/OSVPTR0HR67s3xmbsgaA6If1ISseCb2urVUFRKtJuIsRr6zaAL1nU5UReH3n5oZ4Ya6/5oppMSZCWg6cZa+/76PbqgItbZ49ivnh+rRwIm3WdB0jZLWEtKsabS7+4KP403x1DnqmJEp4ozyEvIoSCpAVY4cQPudiH5fCTi9ftrtXtrsSWSfn8cf9jxNqx1yWUKN00fAWYi3bQHjJqyjRd2AIbYKc9sdBGLvA0XHoJgoNF4bEo3BTLQgX7ywgFjLCv6wvgJT4TAP7FVUUbiwOCzlXQmLX9J6SwxofjG2YYeoDD338N5nEslIQmZ19UNmdUmORDCo+b3yFrYf7Iqw2vQnOcZEj9sXKhzYf6yqwMt3XkhyjFn0i7IaT9odE960NNyic6TjR0PXdXa27uTnH/6c8q7yw84XJxdz9+y7mZg6kfSYgbuUHy+6rvOH7Y/xcXUXH+04F4gUMkk57xBrUbh4fDZv1D+FghEdPwWG69m1Zw4xJjXkQgQiKi4DJ/zsQ5r2Klg5p1fkGITA+eSfkWMyp8CCHwsRlDkJksdEZ60SyRnieL+/h/mfRBLJyfPp//chFz30No9uEL2ggi4jh0e4fkqbeki0GjEZDhcs8ydkRFRLLm3qIT1edN4Ofrn/+o1SxqTFkhRrOqUYlICmD/gFf9eCIu5ZVHxCFYjr7fX8p/Q/A4qeNGsa5V3llLSUnLLoAVAUBUP3kpDouWdRMeW/uJI7LxsHQHfjZYxJSeCN+qe4ufgOXln2PlNiPkVN4EUKizbj8mmcX5jKPYuKuWdRccjiFbR0neizD2n2vCBEj2oUAc71Ow4f07JXjNM1kR1Wtw18A2cWSiTDGenqkkiOgEFVqOt08Uiva2vBpCyqWu0Rwcc298AFBoNjwi09bXZvSKDc/MRHbK5q5+YnPuLZr5x/Sus8WpG9E7F2OH1Oqrur8Qa8mFUzXq2varOKSru7nfOyzjuqa+tE2VzVBhAh3L57xUQsRgOPffJn9rnXcefMO0Pd2eemfBqrSWW77T9cOjeWp66LzFAKaDrnF6ZFp/hgtAjP1pq7Ap5aCk27IS4DHK2RY3c/JwLNpt0ozh3YJKw/SaOjs3aJJApI4SORHIFnv3J+SKD8fn0F1W0Oyo7g2gJRKDC8xcOM0UlcOD6d1Dgzm6siC/WFz/3ohoqou2N0Xae0oxRN1yjtLMWreTEoBgJ6INQcdHbWbLY2b2VOzpzTdt+5BWnMG5c+oLVqe3cK8JmQ6IGgyPsRq3amoenaYdeMOAaq9Fx0Bdhbwd4k3Fvzvwvr7oeug+L8gfeh+AqwJAgrUdNu6GmCrCmiLpBk8KFpEPAKa104iiKsfKoxssqn5KjIGJ9+yBgfSTgub4AbVm1mX4PtmGPDA5iD7qygu8XQ68rqb4mIWmuEftT21FLVVcUnLZ/w9z1/Dx1fVrCMq8ZdxY7mHTyx+wnmZM9hVtYsvj7z61FcrSRE/0rP0CeGRs0Sqe/TbhJWnk2/hfrtYkxsGsz7JmRM7LtOUSGlAFILRaq85Ozhc4PXDl4H+JzgdYLfJcROwC/cl8dCNYp/CwYLGK1gsopXo1UIWnNcZDHLYYis3CyRnAK/X1dOQNOZW5jKPQuL+fLT2444NlgoMOjeMhtUvAEt1OH7dLmiTjePlzyOqqjcNvk2arpr6HR38u/Sf4fOFyUXsbRwKdPSp3HRqIswG8ysLFnJednnRW3Nkn4MVOdHC/RZgDoPQEup+Ed6yXdh7Q/BVgfOdlj/AExcCtM+DUZzrxtMg5m3iM7vSaOlFeFMoAVEvSV3N7i7xKvfcxrm9YvN7xFFLQdCNYomtuY4YfEzx4MlXhwbQT9rKXwkkgHwaxor36mitjM31N5hIIIxPLlJVhp6W1B843LRMyqqHb6PA1VRWVmykkZHI/NHz+fpfU/j8ruwGCx4Ah6KU4qZnDaZJEsSQMjl1N/FJBlkhIuhlHzx5dZQItLbR8+C3dXieOcBKF0D9Z9A5kSoeltYhwJeaN4jXGOphRCfLXt+nQqaJgSOs0MITnfX4S6rs7YWvxBFHhv0hFWRVwxCAFkSRHHM4OswtfwNz6eSSE6S368rx69pnJefyvKZrohA5v5MzE7g4Run86vX9/NRdQd5KTHUdrrYXNXGf+64AOCECgeebVbMWIHNa+Of+/7J3ra9VHZVYlAMeAIelhUs46szvnpY9lZ4vI1kiBCXDvkXQsMnMPUGcWz3czD2IpHp1dMgtvRimLC07zpPDzTuBGOpEEpJeWAwDexeCyJ7gQn8HhE8bm8RYkcbOAli0KAHei1Q3ZHHzXFCAFmTxDZMxNDQfwKJ5DTiC2g8/m4Vy2e6BozrSY83o+vQ7vBS2tTDu2WtzC1IQ1UUzstPxaAqoRTqEy0ceLYIurhun3I75+ecz8Hug2ysF80wA3qAouQiPjPxM+Qn5kd3oZLThykG8s4XlZ3DxU94wcO2cnjt2zDtU1B4WZ+Vx++B1jJRKyghB/xu0QQVIsXPU1eJLLGBeoENd0Gk68J95WgTgudIrqahhtchtnDrkDmuTwgFxZA6iBv/DoAUPhJJL91OH+cVpLK8S1h6DP2s+6oiOp3Hmg38YUM59Z2uQR3DcySCLq4mRxMXj7qYGltNxPlJaZOYnDY5omK0ZBigqiJzKyZFCJ69L/XV/rnobtjxT5EJtvUJKH9TFDhMzOkTSjv/LQKgp94AlVNFALXXAQt+Av+8VoiegRgszVFPt6XK6+h1X7WBo72vUvZwJyiGbEFruCJcYxFiKGFQxwxJ4SMZ0QSrMX/+wnw+qe0kENC5pCiDt0tb6Amr0RPM0nq7tIWfLZ/C/746L4qrPjVWzFhBt6ebZ/Y/w+7W3dT21Eacz4jJwGwwR2l1kjNOYi5s/Vuf6NH8It5n6W+h4i3Y+wJ0HxIbQHc9XPANIXp2Pye6vgd7hH3wB9j8qIhZGTULxs4TIkfX4dLvD5xuHy1Ug1gLDJwFdzRh5nOLL3uPDVwdwroTGCFC55jofXFD3b2/SxRDpBCKSR5UpRKk8JGMaILVmA+0O1g6NYdul4/fvlV2mOj5y+dm815FK//88CDZSdZBack5FkEX12cnfjbk4trU0PdXelFyEXNz5vK3PX/DarTKeJ7hynsPi9T2S38oChm++2vY/T9xbuoNooP73heECNICcGgzNO0U59In9omerMniva4JUXTJd8UcPU3w7q9g48NCVJ33ZZhyPXQeFDFCBrN4VVTxBakaet+rgNJnKQi3GIRXXdF1QD/BV2DuV8HnEiLH54QDm0VsU3ctzPuWyGbrqBFrfumrIo18yYNi7GCP0Rls6IFegdjRd8xgFgLImgxp46K1MkAKH8kI58sXF3Cw3cELO+qxe/zsqu2mydZXxj9o6dlc1cbPl08lI94yqAOWj0bQxVXbU8tleZexs21nxPkZGTP43nnfI8mSxMqSlYAMZh52DGSBueoRkc7+yTNif+oNIr25+Epor4TWUmHt2PG0OG+wCMHTslfsK6oQP3teENcGhZDmBxQRMNsu2r6EWmZMu6nvfXCOoEstnPDxJ8Lu5waeM2+OEG3v/55QIYq4DBh7ATTtEmM2/LxP3A2XWJ3BQMArgr3trVL4SCTRINhhfU5BGldOzcHu8fPm3uaIMROzE/jekgl8VNXBXzZVkxxrHrQBy8fDihkraHG28Fz5c+xv34/NG/lLPT0mHUVRZNr6cCa8xk8QSwJc/ScRpOoQLURQVCh9TQiOzEkiHihIoF/NmdlfhK5DQmyAqBsUFD+61nccxPug6Am+Dx6HSKHSf8xABAVO8H7B60Nuub0irilcbLXs7bsGRDDyhp+LBq5B0ROXIVL8JcMSKXwkI47fryvn45p2PqruYPlMJ5cWZ7C7LjKNc2J2At9fMpHpo5O4fGIW8VbjkLX0BKnrqeOS0ZdQ31PP5sbNoePLCpaRGZvJql2rMKgGVsxYIS09w5UjBe+qqnDrBHzCyhMuSDKnHH3OrX/tncPYJ2AsCSIdPn0itJX2HZ92U1+M0LSbIoVOuPgJFz0DWYKCBAVO5pQ+C9TUG4TgAWjZJ7ZwsRXsYRYUP6ZYce2/PyOuCT8vGZZI4SMZcSjAR9UdTMxOYHVJA++WtdLtigxUnJSTyIy8ZFLjRJDvULb0APR4e6jursbld1HSWhI6blSM3D7ldialTSLWFCtdXCMdg0lYeJLHQHxmn0gJt5AAxKbDJfcK91fLPhGnEx4H4+ntaddWGjl/UNzEZ4mg1wPvi5YK6cUihX73c7DnRREjUnQF5M0VMTjB/3a6Js5pAfGaMRHyLxYZZYl54voDH4jYnXCCLjNTjBA1ManC7VW7JTIOBcT5rKlgjIHqd0X6tjkOTHFgTQRLkizoOMSRwkcyoghoOhcXp1PT7mB1SQMxJkOE6JmYncCknERe+qSegvS4COvOULL0BAOZV8xYgcvvYnfbbjRd4/ny53H6nQAYMODX/bxT+w6T0iZJF5ekD3McVKwbWPSASOGu3y5S2YOWlJSC3uDVJBHg3Flz5FYM9uY+S1F/gn2pKt4U2/Fi680o6i96oG/9Ppd4dXVA+dojz9W8R2wDoRjEc8amQkyaSPlPyIHEUeK9Kfb41yyJClL4SEYMuq6zp76bToePJVOy2VzVTmtP3y9mVYHvL5nIzLxkCtLjhrRra1vTNrY2byWgBZiVPQtvwMv25u1sadoCQIIpgV9d/Cs+afmEP+/8c0gkSUuPJIQWEBleNRv7jmVPh4wJffEzU2/oc0X1D0IOCqIIegOKk8dAXKYohuj3iIacri7RqDM01CBEkMEsrEIo4vKAVwgYc7ywwKhGUE3QUXX4vSyJ4AlzYxtjoGihmFtRoGaTEHH9sSZD5mToqBa1jSwJQgB6bGJNznaxUXH4tbFpfc1eU3tfrUlH/6wlZxUpfCQjAl3X2dtgo7XHQ0DT+eummgjRAyJ7a0tNB5dNzBzyrq05OXPY2ryVVbtWsaxnGXOy5/D03qdD5y8ZfQm58blcmncpMcYY6eKSHI5q6BM9wRo37/wSihbD3K/Bx3/uy+TqH4cTHqMTnr017Ubxuvs54cYKXtc/pie4H4zdmbz86LE/e14Qwic80FnXhOgJP+Z3CRE19QYRyOxsGzjmx90lMtEcrZH30npbOzjbhdXI0SaqGtsaxObu6hNF9WGNjeOzIGOSCJjOmCj2B3GBv+GOFD6SEUF5s52mbje6rvPPjw6y/VBnqKt6MGX9vPwU/vxeFTFmA3ctKBqSlp4gX572ZRrsDbxU+RJratawpmZN6NyV+VdyXdF1jEsSKaXSxSU5jGDae/7FwuoTngUWTIe/7EfCYpM9vbfbeJeI7QkXJ837Ds/wmnaT2AbK9goKjPC2GplTxGuw0vRAoidcJIUHOoO4b7BQY3Cu4PGg6AnOGczqgsNFDwgxGJsqtoHwOkSGW0e1qAnUUS2Ekb1ZbDXvinExqZA9DXJmQPZUYZmSnDWk8JEMeypbeqjtEHEtL+yo5/1KYdrWETE9371iAltqOvh/G6uZNy5tSLu4AAJagD1te7h8zOV4A94I0XPZ6MtYVriMiakTMYT115GWHkkEA6W9Q99+//YOSaPEa8APBzfD+XcKl1TLXvEFf9n/wZ7n+1xkC34ixocsQQNkb4W70NrK+ipNH030hATMz0TQdZAp14nX4FhdE4Kjv+Ba8GP4z82Hp8cfL+Y4ERyeOanvmNcp1t9SKnqldVQJa1HNe2JDES6xnBmQe66ocSMzys4oUvhIhi2/X1eOzeXjwvGiw/gbexpZu7cpdD4tzsy9iycwOTeRBZOyiLOIlPV549JOq4srPNC4P6t2rkLTNb4+8+un5V5On5O97Xtx+BwAHLQdjDgfa4olLzGPJIuMOZAchaP1rDpa6wmDERb//PBCiboOhZeK2J5NvxPZXJf9UAiogE+IGj3Qm7Wl975qoupzyb96RY9J9MMqWwvn3iZcRaY4mP0lQBcd6M/7irDKFF4qhM/oOTDmAjHXRXdD0mhRvHDCEnHvi+6Bed8U9wx44YM/Rlqogq68U8EcC7nniA36mr427RJbyEJULaxaliQxdtS5kDO9N75JcjqRwkcybOlx+3hy8wE6nF6SYky8sKMegIx4M612LxcVpTMhO4GcJNFDJjyu52iNR0+UYMVkiLSsrNq5ipUlK7lz5p2nNH9QWNk8Njo9nVyRfwUA/9j7D/a0i8wUBQUdnTU1axibNJavzfjaKd1TIjkq/S1GigImq7D0GK3ifGrhsed572GRMh+cKyiokkaJ/VHnDnydJXFgi9XCn4oYHi3QZ3UKv9fHfz78XnGZQvw42/syzk4Fo0UImpzpYt/VCU27oWEHNO4UcUk174rNYBKuxNHniWeVLrHTghQ+wwhd1/H4NTw+DU8gQEDTIzYQvalURcGgis1qNGA1q1iMhmPMPngJNhoNd03VdjiZNy6dzVXtrC7pS28tyoynosXO8pm5fHthMXmpkamnZ8K9dfuU27F5bawsWYnD6+DzUz/PM/ue4a97/sqdM+88ZTeTgsLKkpUUJxdT3iUqUnd5utjWLIIrLQYLnoCH4pRiyjvLebzkcRQU6d6SnDlO1mIUzkDtNYKvAzUbPZX7H+teMclw8b0iw6uj5vS2sohJEXFUBZcIV2FrKTRsh7rt4GgRZQPqtwvxmDFJ1B8aPefIcUaSYyKFzxDE4w/g8ARwePw4vH4cHj8ur4bHH4jo5XciGFQFq8lAvMVIUoyJpBgTCVYjqjr4Mw+CjUZBCJdD7U7Km3t4dVcDpU09oXEKhETPNy4bT0F63Blbk81ro83VRrurHYfPwZzsOXS4Onhq31M8s/8Z/LqfZQXLOC/7PGq6a0iLSSPBlIByApkefs1Pi7OFWVmzWFawjDU1ayhOLo6I6TGpJjwBD8sKlnHnzDtZU7OGlSUr2dK0RQofyeDmeOKMzua9VFV0tk/MBUe76GjvaDl9awDhKsyeKrZzbhNusPptULsVug70VaLe/hSkFQkRlDdHZIlJjhtF10/2q3J4YrPZSEpKoru7m8TE6JsVfQENm8uHze3vffXh8Z2d7BtVhUSribR4CxkJFuItg1cnP7qhgkfWlfP5eWO5aHwGr+5qYHVJQyhjK5jBZVQVVn/jQqbknp4Yl/7xO3/a8Sc6PZ1cMvoS1taspayjjAmpE1hSsIS1NWt5veZ1dHSMipEr8q9A0zWWFi4FhEhJtiSTZEki2ZJMnCluQCHU4+2hwd5Ai7OFQJjpfW3N2gjRE2RZwTI+PfHTzMyYiaIopz2uSCIZsbhtwkLjbD/z97K3QN1WUW26rZy+ctZAcn6vCJrbF2g+aFFEjNUZ4Hi/vwfvN9kIxe0L0O3y0eX00en0Ynf7j33RGULToMsp1lLVYifWbCA9wUJWgpWkWFPU1tWf368rR1Xg1vPH8tTmgzzz0SH8mo5BVQhoOnFmAw5vAKOq4Nd01u9rPm3CJzx+51MTPkWTs4lXql5hZ8tOyrvKQxaYis4KyruEVcqoGPHr/pCFJohP89HqaqXV1craGlFV9tMTP01AC6CjE9ADaJqGV/MOuJa0mLTDjhkVI9eMv4bJaZNDIkpaeiSS04Q1UQgOW6PI2DpSperTQXwmTFwmNldnnwhq2SesQV0HYPf/RAXpoDssJV/WCxoAKXyijNev0eX00uH00uHw4vScRvPtacbpDXCo3cmhdiexZgM5yTHkJFmxmqIbH/RRdTsf13SwfGZuSNxAX/FBhzfA8pm53HZBPu9XtPL79RUoinJa4nlWzFjBx40fs7JkJQe6D7CkYAml7aUh0VOQVECDvSEkeqamTcVsMLOjZQcA5V3lrK1Zy5KCJbxe/TpqbxprUBR191adXVuzNmQdCn8P4A14eaHiBTY3bI5Ym4qKX/eztWkr83LnnfKzSiSSI5CYI4RJe5Vo1XGma2LFpIhCkkWLRbxR3Xao2yKyxGz1Ijts70uiTtHoOZB3HqQVyx5jvQwrV1d+fj4HD0am7z744IP84Ac/OO45zrSrS9N0ulw+Ohwe2u1eeqJo0TldpMSZGZUcQ2aC5azHBNk9fn726l7+t63uiGMmZifwwDVTmDU2BaNBDbnF7llUfMrix6/5+fmHP+fFyheBPmtOqiWVDk/HMa7uY3r6dNKsabxT9w5AKFB5WcEyQAih/u8X5y+mqquKFypeoN4uMtaC9w1ef07GOXzS+slpCaKWSCTHgdsmBIin59hjTzdep8gOq9sCDTshEGaBsiTB6FkiQyxrqsgYiwrRd3UNO+HzpS99ia985SuhYwkJCcTFHX8Q65kUPrvrummze4ZsG4RjYTKq5CRZGZUcQ9wZjgfSdZ1DHU6qWu1oGvz2rbKIQOYg6fFmHv3sOcwem4rZ2PfXzqMbKk46bf0La7+Aqqj8ZdFf2N22my5P1xHja4KMjh9Nvb0evdcvnxmbSburPSJGJ5wpaVPo8fRwyH4IIEL0XJh7IQ32BhocDXjCfrGNihtFvaOeZQXLWFKwhA8bPuTZ0meZkz2HLU1bpPiRSM4WmibicDprorcGv0ekx9dtgfpPoLe2FyB6luXMgNGzIXfm/2/vzqOjqu/+gb/nzj6ZfZLJRlbIwr7JqucnogIW2yIt1uOK9dGnGBW3R1H7uCPV0/o8Rx4qVlFotQVb21rFqqgoKmhQCLIHJBCykZBlJuus9/fHNQMBAgFm5s7yfp0zR2fm5t7PJYF557tK+55FjfzBJ+G6ukwmEzIyMuQu45SaOxM39ACAzx8MdYVZDWpk/tAKpFaGt3m12xvAzjoX2rqkXdV7Z2/1DmTuVZphwp6Gdnz1fTOmDk7tc47zaemp76hHbWctrl17LRaMkdbDcR2/EeJxlFAigAAMKkNoULNf9GNC+gRMz52OA64DqGytxLpD6/p83c7mnX2e94YqlUKFL+u+DL2uV+nh0DlQYiuBRqnBGOcYzCqYhTR9GhZNXASbzoagGMSEjAnckoIoWgRB2pfL6JRaf3p3hY8mlfbYrK+gX9o+pGazNEusuxU4/JX0UCilWrPHS48kmCGWcC0+PT098Pl8yM3NxbXXXot77rkHKlX/+c7j8cDjOfZbs9vtRk5OTkRafD7d2wh/IGH+uAdEEIA0ow6ZVh3sBs15dYV1evyobevGsvX7AQA/HpUFAFi5sQpfHWgJje3pNXdcNrKteggKRVgWJOydwQUgNKC5yFIEKIB9bSfv0lxsLcad4+7E0i1LUdlWCbvWjicufCLUOtTbMtP7vDckFVuLsa9tX6h16FSyUrJwZeGVKHWUQi30bbK26WwY4RjRZ0sKIpJJwAcc2QG0N5z52GgQg9Iq0TXfSCHIdcIwAcsgIGu8tGCioygC44LY4hNWd911F8aNGwe73Y6NGzfioYceQn19PZ5//vl+v2bJkiV44oknolhlcgkGgSPuHhxx90ApKGA1qOFI0cJh1AyoOywYFNHY7kFNa1eohQdAaFHCIqcR3xxq7RN6elt+/r6lNizjeI6dV5rBdXXx1aF1c/a5Tg48vSrbKkOhBwBaPC2hgcwA+sz2OjEEAcdai040K28WZg+efcpr5pvzkWfOO6v1gIgogpRqaQuKtmqgcXfkBz6fiUIAHEOkx+hrpEDWu0hi0x4pCLlqgN1vA1oTkDkWyB4LZIyWtt9IADHf4rNo0SI8++yzpz1m9+7dKC0tPen1V199Ff/5n/+Jjo4OaLXaU34tW3zko1YJ0KuV0KoE6H74rwipK6vHH0CPT3oET/HvRO86PQoF+izaWJphwoOzSrH5YAt+/+n3AHDO4ad3LM+KmStCr/3m69/gjT1vwK61o8PXcdLUcrvOjpaeY4OL9So9uv3duLb0WoiiCF/QhzlFc+ANePGb8t+gsvVY6AH6rsXTew5AmqEVhPQHcfzxoT9LQY2hjqGw67iaK1HM6nEDdVsBX5fclZyatwOoqwBqtwD1FX3rVCiBtJJj+46Zs89xqjxbfM7ovvvuw/z58097TGHhqfd8mTRpEvx+Pw4ePIiSkpJTHqPVavsNRRRZPn8QPv/Z//YjimJo7a4TQ88Ds0owOseKS0qd0KmVeH5dJTZ+f/Scgo+gEFDeUI5bPrgFK2auQEtPCyZnTca/q/59yhlbDp0Dj099HJ9Uf4J/7P8HBIWAbn83JmZMxEOTTl5Cf3rOdEwbNA0/L/453F43Xt/1eqgL7PiWoN7/7w0/vcGoN/xYtVYMdQyFVsmfY6KYpjMDeRf+0PVVL3c1J9MYgfyLpEfQLw3Qrt0ihTV37bGVoyvekKbKZ46RBkenD4+rzVRjPvikpaUhLS3tnL62oqICgiDA6XSGuSqSiz8QxB+/OoSN30srpfauyCwogAdmlWDUICvsKRoAfTcdPRcrZq7ArLdmobyhHDe/fzP+Y+R/YOmWpSeFnt4NQJt7mvHydy/j9R+9jncPvAtf0AdBIWB8+vhTnr9s7LHNSTORiUxjJhaMXoBrSq/B8orlGJU2Ct6gN7Qm0GDrYAgKAWur1qLKVYViWzFsOhv0Kv053R8RyUCpksJCmz02ur76I6gA5zDpMfZ6oOOIFIDqKoAjO4HOJmD/OukhqKUB0pljpXszZcb0wokx39U1UJs2bcLXX3+NSy65BCaTCZs2bcI999yDK664AqtWrRrweSI5nZ1dXeentcuLlz8/gMojHRAUwMhsC7bVuEKLFv7n/yvEQz8ael7XOHELit4d1E9ndsFs6FQ6vLXvLQBAtjEbtR21UAtq+IK+c55Gfvzu7beNug2BYAC+oA+rdq3C7yt+z+npRPGuxyUFiVjt+uqP3yOFn7qtUpdYZ1Pf91Oc0nT5rDGAczigPr41iF1dYaPVarF69Wo8/vjj8Hg8KCgowD333IN7771X7tIoDLZWt2LlxoPo9AagVQkYm2vFVwek1Zp/PCoLX1c146UNB5CiVZ3XYObjt6D41ehf4Vejf4Xm7mas3rv6pGOLrcUoshVhbdValI0pQ9mYMiyrWIbajtpQKDk+OJ1tSAmKwT7hRlAKUCvVWDB6ARRQcHo6UbzTWYC8qUDDdqlFJV6otNKsr+xx0ngDd50UgOq2SgOkOxuPaw1SAmmlUrdY5mjAkit39YkTfMaNG4evvvpK7jIozDz+AP76TQ0+rZR+o8hzGDAkzYiP9zSGQk9JhgmXDUuHSafus0v7uegNGb1h5aohV520xg5wbKr6YOtg5FvysaxiGSZmTAQATEifEDrPiec7m/Bzuk1E2dJDlCCUailAtB6SQkO8/UKjUEgbo1qypX3EfD1A405p8cS6CikEHdkpPSrekLbb2DMbuPRRwCTPmkEJE3wo8Rxo6sDKjQdR5+oBAMwcno6rxmRj7fb6UOgpSjcixy5NsTzfMT29jg8rv6/4PUSIUCqUJ62ynGfOQ44pJ3T81/Vfn7L7qfc5W2iIqF+2PCkUxPKsr4FQ644thiiK0iDuhu+kIHRkp7R44vY3gR89J1uJCTPGJ1w4xkd+zR0evLWlFuUHpUHEFr0av7ww/6Qd1QvTUlCYFpml1pdtXYbl3y0/6fXj19aZmDGxz1R3IqLzFvBLLSbuOrkrCb+AF2jcC6TYgQn/EfbTJ90YH4p/Pb4A3ttRj3W7jsAXEKEAMHWwAz8fPwgmXd/VifMchoiFHgB9toXoNSF9ApwGZ2g6eU17/xujEhGdE6VKGgtjSJWmjgfjfyPrEKUGyBwVscHNA8XgQ7Jravfgs8omfLH/KDo80l/y4nQjfnFBDvIcJ28wO8iuR1G6KWL1/O+3/4vtR7cj35SPg+0HQ6+7PC5sPrIZZWOkaejLKpZh+bblHG9DROFnyZa6vhq+k7qHKGwYfEgWgaCInXUurN/bhB21rtCuVE6TFvPGD8KYHOspt13ItOpQEsHQ8/uK32PFjhWYlT8LO47uCL2ugAKVbZV9Bi4DHLdDRBGkMQA5k6S9tZr3x9/A5xjF4ENR09rlxY5aF3bUubGrzo1u37HBwsOzzLikxImR2RYo+9nINN2sw7BMc0T3oWrsasTsgtno9nejpqMGRrUR3b5uBBCAoBBwQcYFoWPZ0kNEEadQAI7B0krJDd8Bnna5K4p7DD4UdkFRRGunFzVt3ahp7UZtazeqW7vQ8MPsrF5GrQpTBjswrTgN6ebTL3eeZtJieFZkQ09dRx2m5UzDnpY9oennpbZSfNP4DVSCCv6gP7Q7OxFRVOnMQO5UoLWKrT/nicGHzkgURXj9QXR6A+j0+tHp8aPD40enJ4AOjx8dPX60dXvR2ulDa5cXbd2+U04pVwAoSE3B8CwzRmZbkO9IgdBP687x7EYNRmZbBnTsuXJ73djfth/t3nb8adefAAC5plx80/gNflb0Mzw25TG89N1L57wYIRHReRMEqfXHmC7t98WxP+eEwSeJBUUR7m4fmju9aO7wornTA1e3D+5uP9p7fHD3SP/t9AbOem0cpaBAhlmHQTY9Btn0yLEZkO9IgVF3dj9ythQ1Rg+yRjT0+AI+7Dy6E4FgAH/e82e4vW4Y1UZUt1fjJ4U/wcOTHoZCoTivxQiJiMJGa5TG/rhqgKN7gYBP7oriCoNPEvAHg6hv60FtWzcaXD2od/Wg3tWNxnYP/GcRaJSCAgaNEilaFYwaFYxaFVK0Shi1KlgMatgNGthSNLAZNLDo1f2O1Rkoq0EKPed7ntNZtnUZmrqbMC1nGr6o/QI7ju6ASqHC6LTRaOpqgl1vh0apCR3PxQiJKCYoFIA1BzBlSLuotx0GwHXiBoLBJ8GIoogj7R5839iBg82dONTchcOtXfD1s3CioACsBg0cKRrYfwgtZr0KJp0aZp0KJq0aKVop7GhVQkTH2BzPalBjTI4VKmVkx9S0e9vx1r630NjViK/qpS1PfjLkJ/D4Pfiy7ktcnn/5SV/Dlh4iihlKNZA+HLDkSLu9d7fIXVHMY/CJc0FRRG1rN/Yeace+xg5UHmlHe8/JC17p1UoMsumRadEhw6JDlkWPDIsONoMmoi0q58IS4dDTuwP7vOJ5mJw1GU3dTfjw0IcAgDR9Gr5r/A77Xftx+5jbGXKIKD7ozEDuJKD9iNT95e2Uu6KYxeATh9q6vNhd344ddS7sqnefFHRUggIFqSkoSE1BnkMaW5Nm0kKIUmtNIOiHiCBUgubMB5/ArI98S0/vDuwfHfoIZWPK0NDVEHqvqbsJTd1NGOcchwWjF0SsBiKiiDClA0anNP6neR/g98hdUcxh8IkDQVFEdXMXttW0YVuNC9UtfTew06gEFDmNKE43odhpRH5qCtQR7iICgJ5AFzr9LnT6XPAGPfCLPgREP8Qf+pmVUEItaKFV6qERdDCqrUhR9b9/Sm9LT6Rrv3HYjfjo0EfY27oXT256Ekd7jkKAgCCOjduZkjUlojUQEUVM7/gfcxbQdghoqZL2ySIADD4xyx8IYk9DO7ZUt2JbjQuu7mOj9hUAch0GDM80Y1iWGYPTjFEJOqIoosPfBpf3KDr9bvjE0/9FCiCAQLALPUEpqDV5aqEVdLBo0mBVp0KjPLZ2jy1Fg9GDLBEf09Pl60JFUwXuGHsHni1/FjUd0n5bx4ceIqKEICgBeyFgzQPaqqU1gNgCxOATSzz+AHbUurGluhXf1bj6rGysVQkYnmXG6EFWjMy2wKxXn+ZM4eULetHqbUSr58gZw86ZeII9aOw5jMaewzCqLEjX5SLX5oj4Oj0A0OPvwbambfAGvHB5XHB73Scds2DUAgiCwCnrRJQ4BCVgL5ACkOuwFIB83XJXJRsGH5l5/UFsr3Xhm0Mt2Fbjgtd/rOXBoldjbI4VY3KsKMkwRaVV53hd/nYc7alFu78t1H0VTh1+F9TBPSjU56MnoIFBMIT9Gr28AS+2NW2DJ+BBj78Hr2x/5aTgIygE3D729tBzhh8iSiiCANjyAGsu0N4AtB4EetrkrirqGHxk4AsEsbPOjfKqFmyraYPnuLDjSNFgXJ4N43KtGJxmjNqA5ON1+Npw1FOHDr8rotdJM2qRZdWhqbsJR7uPIiMlAwWWgj7r5oRDW08bdrXsgjfghTfgxR+++wMOug8CACwaC1xeFwSFgKAYxC0f3IIVM1dwvR4iSlwKBWDOlB5dLVILUEcTkmUdIAafKPEHgthZ58Km71uwpboVXd5j3Vj2FA0m5NlwQb4d+Q5D1NbKOVG7rxWNPTXoDnRE9DoKANlWPVJN2tBrIkTUd9ajsasRueZcDDIOglJQntd1RFHEIfchHHIfgggR/qAfK3aswL62fQCAXGMuqjuqMa94Hh6d8ihu+eAWlDeUnxR+iIgSlsEuPXzd0iKIruqEXwlaIYpickS8AXK73bBYLHC5XDCb+5+BdDYaXD24cunnONpxbHyMRa/GhHwbJubbUZCaIlvYAYAOnwuNPdXoinDgAaSW1gJ7CkxnGKOkVWpRaCmE0+A8pz8bT8CD3c270eZpAwAEggGs2rUKWxu3QlAIyErJQk1HDX46+Kd4fOrjUAnS7wC94adsTBmDDxEln2AQ6GiQBkNHZC8wBVAyKwLnHfjnN1t8oiDdrIVRq0KPL4jxeTZMyLeh2GmK+GDeM+nyt6Ox53DEu7R6aVUC8lNToFefuSXHE/Bgd8tuVLdXI9uYDafBGQonvQsQ9gaT458v27oMLo8LF+dcDF/Qh/er3kcgGECrpxVbG7dCpVDhtlG3ocpVhTHOMVg0cVHovACwYuYKLN+2nF1cRJScBEGaBm/OAjzt0npA7tqEagVi8IkChUKBlTdPxP6mdkCUf5XknkAXGrur4fZHb2dfo1aFfIfhrKerd/o6Udlaif1t++E0OJGZkhlagBCQBh73Pl9fvR67WnZhdsFs+II+vLDlBexr2weHzoHmnmYICgHzR8zHUMdQHHIfgk1rg1FjPOmabOkhIgKgNQHOoUBqCdBxRApBXUflruq8MfhESX5qCg42d8Lfz55Z0eANetDUcxht3qMRmaV1KgoAmRYd0kza8+rOC4pBNHQ2oKGzAaX2UswumI1lFctwyH0IQTEIh86BXS27UGwtxqyCWXi/6v3QWJ7mnmZoBA2uH3Y9RqeNxvtV72Nt1VqUjSkL010SESUwQTg2GNrXI7UAuWoAX9eZvzYGMfgkgUDQjyZPLZo99VELPIDUtZVrNyBFG/4fs1kFUh/xuwfehQIKiBDh0DlQ2VaJuz+5GwEE+hw/OXMyxjrH9gk9bNkhIjpLah3gGCw9uloAd500NT4YP11hDD4JLCgG0OxpwFFPLQJi4MxfEEY2gxrZNj1UQuTWHppVMAsfHPwAflHaq6y5pxkKKE4KPUMsQ7ChdgM21m2EX/Qz9BARhUPvjDDnMKCzSWoJ6mwCYnyMJINPAhJFEW3eRjT21Jz3SstnS6sSkG3VR2Vl6fer3odf9EMJZSjsnNiiNbtgNmYVzMI96++BX/RDLagZeoiIwkkQpM1RTenSIOj2BqklqLtF7spOKbpLAVPEuX0t+L59G2q7D0Q19AgKIN2kRUm6KSqh553v38HaqrXIM+XBpDWd9tjegKQW1PAFfVi+bXnE6yMiSkpKtbRBau4koPASIK0E0IZnaZhwYYtPguj0u3GkuxpdgfaoX9ukUyHbqoduANPUz0UgGEBjVyNqO2pR21GLb498i1aPNCPtUPuh0HEGlQFd/mOD7YqtxVhbtRYAQt1by7ct51YURETRoNZJm6TaCwFPB9BeL7UGyYzBJ87JMTW9l1GjRIZFD6MufD9GnoAHtR21ONx+GDXtNahpr0FDZ0NoHM/x0vRpKLWXotPbCbfXjf2u/QAQGuxc2VYJAJiQMSEUcnr/y/BDRBRFWiOgLQJSi+SuhMEnXvmCXjT2HEabtymqM7UAQK9WItOiC0uXli/ow4G2A9jdshu7W3ajvuPUM8+0Si2yjFnINmYj15SLElsJ7Ho7AKkra0vVFgDHxvR8UfsF1uxdAwCYmDGxz7m4DxcRUfJi8IkzgaAfRz21OBrlqemA1KXlNGrPuN3EmfgCPmxr2oZvG79FZWslvIG+Y5HMGjNyTDnIMeVgkGkQso3ZsOvsEBSnHpJW2Sq17MwumI2rS65GoaUQ03KmIVWfimUVy1BeX35Syw5beoiIkhODT5yQa2q6oABsBg1STdoBbTVxOg2dDdhYtxFf13/dZyyOSWPCUPtQDLUPRZGtCBat5azOO8Q6BMMcw7Bw3EKkGdJCr7Nlh4iITsTgE+NEUUSrtxFNUZ6arlUJSDVqYTOoz3qbiRNVtlb2WUkZAKxaKyZnTsbotNHIMmb125pzJhpBg7vH343MlMxTrgzNlh0iIjoeg08Mc3mb0dhTDU+wJyrXExTSrvGpRm1YVls+4DqAtQfWhrqiFFBgROoITM2aimGOYeccdqRaBQwyDUKuKbfPJqNERESnw0+MGNThc+FITzW6Ax1RuZ5Rq4I9RQOLXgVlGFZarmmvwTsH3sGu5l0AAKVCialZU3F53uWw6Wznff50QzoKrYXQKrXnfS4iIkouDD4xpNvfgSM91ejwuyJ+LZ1KCVuKGjaDBhpVeNax7PJ14b2q97ChZgNEiBAUAiZlTMKs/FmhGVjnQyWoUGovRao+NQzVEhFRMmLwiQGeQDcaew7D5WuO6HXUSgVsBg1sBjX0mvB960VRxOaGzfjn9/9Eu1daQHGscyx+XPjjPoONz4dZY8YwxzDoVLqwnI+IiJITg4+MfEEvmnpq0OptjNjUdEEAbHoNrAYNjFrlKQcAn4+Gzgas2bsG+9ukxQOdBifmFc9Dqb00bNfIMeWgwFJwXmOCiIiIAAYfWQSCfjR5atEcobV4FABMejXsBjXMOjUEIbxhB5C2kVh/eD3WVq2FP+iHRtBgZv5MTM+dHrbBxoJCwFD70LC1GhERETH4RFFQDKCppw5HPXURWYtHr1bCkaKBxaCG+jynoJ9OXUcd3tj9BqrbqwEAQ+1DcU3JNWEZx9NLUAgYkToCdl34zklERMTgE0X73N+h298d1nOqBQVsKRrYUjTnvcDgmQSCAXxU/RH+XfVvBMQA9Co95hbNxaSMSWHtQlMqlBiZOhJWnTVs5yQiIgIYfKIqIPrCch4FALNeDVuKGmZtZLqyTtTQ2YDXd7+OQ25pN/QRqSNwTck1Z73K8pmoBBVGpY2CWWMO63mJiIgABp+4olUJcPzQuhPJrqzjBcUgNtRswL++/xd8QR/0Kj1+XvRzTMiYEPaB0mpBjdFpo2HUGMN6XiIiol4MPjGudzVlR4oWRl10v10t3S14fffroa0mSu2luLb02rAsQngiQSFgZNpIhh4iIoqouJkfvHjxYkydOhUGgwFWq/WUx1RXV2P27NkwGAxwOp34r//6L/j9/ugWGiZalYBsqx7DsszIc6RENfSIoohNdZuwpHwJ9rXtg0bQ4Bclv8Dto2+PWOgZkTqC3VtERBRxcdPi4/V6MW/ePEyZMgUrVqw46f1AIIDZs2cjIyMDGzduRH19PW688Uao1Wo888wzMlR89gQFYNZJe2VFu3Wnl9vjxl/2/AU7mncAAAothbh+6PURnVJeai/l7C0iIoqKuAk+TzzxBABg5cqVp3z/ww8/xK5du/DRRx8hPT0dY8aMwVNPPYUHH3wQjz/+ODQaTRSrPTsapQCHUQN7FMfunMrWxq1Ys3cNOn2dUClUmF04G9Nzp0d04cAiWxGcBmfEzk9ERHS8uAk+Z7Jp0yaMHDkS6enpoddmzpyJBQsWYOfOnRg7dqyM1Z2aWaeCw6iFWacK+0Dhs9HubcdfK/+KrY1bAQCDjINww7AbkGXMiuh1c825yDZmR/QaREREx0uY4NPQ0NAn9AAIPW9oaOj36zweDzweT+i52+2OTIE/UAqAPUWLVKMGWlVk190ZiIrGCqzZuwYdvg4ICgEz8mZgZv7MsK2+3J90QzoKLYURvQYREdGJZB3cvGjRIigUitM+9uzZE9EalixZAovFEnrk5ORE7Fo5NgOGZ1qQbdXLHno6fZ1YuXMlVuxYgQ5fBzJTMnHf+Pswu3B2xEOPRWtBib0kotcgIiI6FVlbfO677z7Mnz//tMcUFg6sVSAjIwPl5eV9Xjty5Ejovf489NBDuPfee0PP3W53xMKPLUUDf1DeWWaiKKKiqQJv7n0THb4OKKDA5XmXY1bBLKgFdcSvr1fpMcIxghuOEhGRLGQNPmlpaUhLC89soSlTpmDx4sVobGyE0ykNll23bh3MZjOGDRvW79dptVpotdqw1BDrXB4X3qx8E981fQcAyEzJxHVDr0OeOS8q11cJKoxMHQm1MvIBi4iI6FTiZoxPdXU1WlpaUF1djUAggIqKCgDAkCFDYDQaMWPGDAwbNgw33HADnnvuOTQ0NODXv/41ysrKkibY9EcURXzd8DX+vu/v6PZ3h8byzMifEZVWHuCHBQpTR8KgNkTlekRERKcSN8Hn0UcfxapVq0LPe2dprV+/HtOmTYNSqcS7776LBQsWYMqUKUhJScFNN92EJ598Uq6SY0JTVxPW7F2Dva17AQA5phxcW3otBpkGRbWOYltx2Pf1IiIiOlsKURRFuYuIJW63GxaLBS6XC2ZzeFcS/qL2i6iN8QkEA1h/eD3eq3oPvqAPakGNKwquwPSc6VAK0R1YnWfOQ4GlIKrXJCKi5DLQz++4afGhgat2V+Mve/6Cmo4aAFJryzUl10R09eX+OA1Ohh4iIooZDD4JpNvfjbUH1mJDzQaIEGFQGXBV0VWYlDFJlgUSLVoLSu2lUb8uERFRfxh8EoAoitjWtA1/q/wbXF4XAOCC9Aswt2guTBqTLDXpVDpOWyciopjD4BPnmrub8bfKv4U2FU3Vp+IXJb+QtaVFJagwKnUUp60TEVHMYfCJU/6gH59Uf4L3D74PX9AHpUKJy/Iuw4y8GdAo5duQldPWiYgoljH4xKF9rfvw5t430dAl7UE2xDoEvyj5BTJS+l+hOlqGOYZx2joREcUsBp844va68fb+t1HeIG3NYVQbcdWQqzAhY4Ksu7v3KrIVIVWfKncZRERE/WLwiQNBMYgvar/AuwfeRbe/GwooMDVrKn4y+Ccx06WUa8pFtjFb7jKIiIhOi8Enxh1yH8KavWtwuP0wAGnl5atLrka+OV/ewo6TkZKBQuvANpMlIiKSE4NPjOr0deKd79/BxrqNECFCr9LjysIrcVH2RTE1RTxNn4YSW4ncZRAREQ0Ig0+MCYpBfF3/Nd7+/m10+joBABMyJmDOkDkwa8K7hcb5suvsGOoYGhPji4iIiAaCwSeGHG4/jDf3vomD7oMAgMyUTFxdfDWG2IbIW9gpWLVWDHcMj6nWJyIiojNh8IkBXb4uvHvgXXxR+wVEiNAqtfhRwY9w8aCLo76h6ECYNCaMSB0Rk7URERGdDoOPjIJiEOUN5Xh7/9vo8HUAAMY5x2Fu0dyYXQvHpDFhVNooqAT+6BARUfzhp5dMatpr8Gblm6hyVQEAMgwZmFcyD8W2Ypkr659ZY8bItJFQC9yKgoiI4hODT5R1+bqwtmotPq/5HCJEaJSaULdWLLeiWLVWjEgdEdM1EhERnQk/xaIkKAaxqW4T/rHvH2j3tQMAxjrH4qohV8Gms8lc3enZdDaMcHBMDxERxT8Gnyho6GzAAxsewNbGrQCAdEM65hXPQ4k99te/cegcGJ7K2VtERJQYGHyiwKK1oLGrEVqlFrPyZ2FazrS46DLKTMlEsa2Y6/QQEVHCiP1P3wSgV+nx3P97DgfdB2NuEcL+5JvzkW/Jl7sMIiKisGLwiZJRaaPg9rrhD/rlLuW0FFCg2FaMTGOm3KUQERGFHYMPhQgKAcMcw5CqT5W7FCIioohg8CEAgFapxcjUkTBqjHKXQkREFDEMPgSL1oLhjuHQKDVyl0JERBRRDD5JLjMlE0W2Ik5XJyKipMDgk6QUUGCwdTAGmQbJXQoREVHUMPgkIY1Sg+GO4TG7ESoREVGkMPgkGavWimGOYRzPQ0RESYnBJ4nkmnNRYC7gSsxERJS0GHySgFpQo9ReCofeIXcpREREsmLwSXBWrRVDHUOhVWrlLoWIiEh2DD4JSgEF8i35yDXlsmuLiIjoBww+CUin0mGofShnbREREZ2AwSfBpBvSUWQrgkrgt5aIiOhE/HRMECpBhWJbMZwGp9ylEBERxSwGnwRg1VpRai+FTqWTuxQiIqKYxuATxwSFgAJLAQYZB3EAMxER0QAw+MQpo9qIYY5hMKgNcpdCREQUNxh84owCCuSac5FnzuOO6kRERGeJwSeOGFQGlDpKYdaY5S6FiIgoLjH4xIkcUw4KLAVs5SEiIjoPDD4xjosREhERhQ+DTwzLNmaj0FIIpaCUuxQiIqKEwOATg7RKLUrtpbDpbHKXQkRElFAYfGJMZkomBlsHc8sJIiKiCIibkbKLFy/G1KlTYTAYYLVaT3mMQqE46bF69eroFnqONEoNRqWNQom9hKGHiIgoQuLmE9br9WLevHmYMmUKVqxY0e9xr732GmbNmhV63l9IiiWZKZkotBZCLajlLoWIiCihxU3weeKJJwAAK1euPO1xVqsVGRkZUajo/GmUGpTYSuDQO+QuhYiIKCnETVfXQJWVlSE1NRUTJ07Eq6++ClEUT3u8x+OB2+3u84iGjJQMTMiYwNBDREQURXHT4jMQTz75JKZPnw6DwYAPP/wQt99+Ozo6OnDXXXf1+zVLliwJtSZFg0apQbGtGKn61Khdk4iIiCQK8UxNIhG0aNEiPPvss6c9Zvfu3SgtLQ09X7lyJe6++260tbWd8fyPPvooXnvtNRw+fLjfYzweDzweT+i52+1GTk4OXC4XzObwbg2xr3Uf8i35HMtDREQUZm63GxaL5Yyf37K2+Nx3332YP3/+aY8pLCw85/NPmjQJTz31FDweD7Ra7SmP0Wq1/b4XbkW2oqhch4iIiE5N1uCTlpaGtLS0iJ2/oqICNpstasGGiIiIYlvcjPGprq5GS0sLqqurEQgEUFFRAQAYMmQIjEYj3nnnHRw5cgSTJ0+GTqfDunXr8Mwzz+D++++Xt3AiIiKKGXETfB599FGsWrUq9Hzs2LEAgPXr12PatGlQq9VYtmwZ7rnnHoiiiCFDhuD555/HrbfeKlfJREREFGNkHdwciwY6OIqIiIhix0A/vxNuHR8iIiKi/jD4EBERUdJg8CEiIqKkweBDRERESYPBh4iIiJIGgw8RERElDQYfIiIiShoMPkRERJQ0GHyIiIgoaTD4EBERUdJg8CEiIqKkETeblEZL79Zlbrdb5kqIiIhooHo/t8+0BSmDzwna29sBADk5OTJXQkRERGervb0dFoul3/e5O/sJgsEg6urqYDKZoFAownZet9uNnJwcHD58OCF3fU/0+wMS/x4T/f6AxL9H3l/8S/R7jOT9iaKI9vZ2ZGVlQRD6H8nDFp8TCIKAQYMGRez8ZrM5IX+YeyX6/QGJf4+Jfn9A4t8j7y/+Jfo9Rur+TtfS04uDm4mIiChpMPgQERFR0mDwiRKtVovHHnsMWq1W7lIiItHvD0j8e0z0+wMS/x55f/Ev0e8xFu6Pg5uJiIgoabDFh4iIiJIGgw8RERElDQYfIiIiShoMPkRERJQ0GHxkUFlZiZ/+9KdITU2F2WzGRRddhPXr18tdVtitXbsWkyZNgl6vh81mw5w5c+QuKew8Hg/GjBkDhUKBiooKucsJi4MHD+KWW25BQUEB9Ho9Bg8ejMceewxer1fu0s7LsmXLkJ+fD51Oh0mTJqG8vFzuksJmyZIlmDBhAkwmE5xOJ+bMmYO9e/fKXVbE/OY3v4FCocDdd98tdylhU1tbi+uvvx4OhwN6vR4jR47EN998I3dZYRMIBPDf//3fff5deeqpp864r1YkMPjI4Morr4Tf78cnn3yCb7/9FqNHj8aVV16JhoYGuUsLm7feegs33HADbr75Zmzbtg1ffvklrr32WrnLCrsHHngAWVlZcpcRVnv27EEwGMRLL72EnTt34n/+53+wfPlyPPzww3KXds7WrFmDe++9F4899hi2bNmC0aNHY+bMmWhsbJS7tLD47LPPUFZWhq+++grr1q2Dz+fDjBkz0NnZKXdpYbd582a89NJLGDVqlNylhE1raysuvPBCqNVq/Pvf/8auXbvwu9/9DjabTe7SwubZZ5/Fiy++iP/7v//D7t278eyzz+K5557D0qVLo1+MSFHV1NQkAhA3bNgQes3tdosAxHXr1slYWfj4fD4xOztbfOWVV+QuJaLee+89sbS0VNy5c6cIQNy6davcJUXMc889JxYUFMhdxjmbOHGiWFZWFnoeCATErKwsccmSJTJWFTmNjY0iAPGzzz6Tu5Swam9vF4uKisR169aJF198sbhw4UK5SwqLBx98ULzooovkLiOiZs+eLf7yl7/s89rcuXPF6667Luq1sMUnyhwOB0pKSvDHP/4RnZ2d8Pv9eOmll+B0OjF+/Hi5ywuLLVu2oLa2FoIgYOzYscjMzMQVV1yBHTt2yF1a2Bw5cgS33nor/vSnP8FgMMhdTsS5XC7Y7Xa5yzgnXq8X3377LS677LLQa4Ig4LLLLsOmTZtkrCxyXC4XAMTt96w/ZWVlmD17dp/vZSL417/+hQsuuADz5s2D0+nE2LFj8fLLL8tdVlhNnToVH3/8MSorKwEA27ZtwxdffIErrrgi6rVwk9IoUygU+OijjzBnzhyYTCYIggCn04n3338/YZo1Dxw4AAB4/PHH8fzzzyM/Px+/+93vMG3aNFRWVsb9P8aiKGL+/Pn41a9+hQsuuAAHDx6Uu6SI2r9/P5YuXYrf/va3cpdyTo4ePYpAIID09PQ+r6enp2PPnj0yVRU5wWAQd999Ny688EKMGDFC7nLCZvXq1diyZQs2b94sdylhd+DAAbz44ou499578fDDD2Pz5s246667oNFocNNNN8ldXlgsWrQIbrcbpaWlUCqVCAQCWLx4Ma677rqo18IWnzBZtGgRFArFaR979uyBKIooKyuD0+nE559/jvLycsyZMwc//vGPUV9fL/dtnNZA7zEYDAIAHnnkEfzsZz/D+PHj8dprr0GhUOCvf/2rzHfRv4He39KlS9He3o6HHnpI7pLPykDv73i1tbWYNWsW5s2bh1tvvVWmyulslJWVYceOHVi9erXcpYTN4cOHsXDhQrzxxhvQ6XRylxN2wWAQ48aNwzPPPIOxY8fitttuw6233orly5fLXVrYvPnmm3jjjTfw5z//GVu2bMGqVavw29/+FqtWrYp6LdyyIkyamprQ3Nx82mMKCwvx+eefY8aMGWhtbYXZbA69V1RUhFtuuQWLFi2KdKnnbKD3+OWXX2L69On4/PPPcdFFF4XemzRpEi677DIsXrw40qWek4He39VXX4133nkHCoUi9HogEIBSqcR1110ny1/kgRjo/Wk0GgBAXV0dpk2bhsmTJ2PlypUQhPj8Pcnr9cJgMOBvf/tbn5mFN910E9ra2vD222/LV1yY3XHHHXj77bexYcMGFBQUyF1O2Pzzn//EVVddBaVSGXotEAhAoVBAEAR4PJ4+78WbvLw8XH755XjllVdCr7344ot4+umnUVtbK2Nl4ZOTk4NFixahrKws9NrTTz+N119/Peotr+zqCpO0tDSkpaWd8biuri4AOOlDRBCEUEtJrBroPY4fPx5arRZ79+4NBR+fz4eDBw8iLy8v0mWes4He3wsvvICnn3469Lyurg4zZ87EmjVrMGnSpEiWeF4Gen+A1NJzySWXhFrr4jX0AIBGo8H48ePx8ccfh4JPMBjExx9/jDvuuEPe4sJEFEXceeed+Mc//oFPP/00oUIPAFx66aXYvn17n9duvvlmlJaW4sEHH4zr0AMAF1544UnLD1RWVsb0v5dnq6ur66R/R5RKpTyfe1EfTp3kmpqaRIfDIc6dO1esqKgQ9+7dK95///2iWq0WKyoq5C4vbBYuXChmZ2eLH3zwgbhnzx7xlltuEZ1Op9jS0iJ3aWFXVVWVULO6ampqxCFDhoiXXnqpWFNTI9bX14ce8Wr16tWiVqsVV65cKe7atUu87bbbRKvVKjY0NMhdWlgsWLBAtFgs4qefftrn+9XV1SV3aRGTSLO6ysvLRZVKJS5evFjct2+f+MYbb4gGg0F8/fXX5S4tbG666SYxOztbfPfdd8Wqqirx73//u5iamio+8MADUa+FwUcGmzdvFmfMmCHa7XbRZDKJkydPFt977z25yworr9cr3nfffaLT6RRNJpN42WWXiTt27JC7rIhItODz2muviQBO+YhnS5cuFXNzc0WNRiNOnDhR/Oqrr+QuKWz6+3699tprcpcWMYkUfERRFN955x1xxIgRolarFUtLS8U//OEPcpcUVm63W1y4cKGYm5sr6nQ6sbCwUHzkkUdEj8cT9Vo4xoeIiIiSRvx23BMRERGdJQYfIiIiShoMPkRERJQ0GHyIiIgoaTD4EBERUdJg8CEiIqKkweBDRERESYPBh4iIiJIGgw8RJaxAIICpU6di7ty5fV53uVzIycnBI488IlNlRCQXrtxMRAmtsrISY8aMwcsvv4zrrrsOAHDjjTdi27Zt2Lx5c2g3eiJKDgw+RJTwXnjhBTz++OPYuXMnysvLMW/ePGzevBmjR4+WuzQiijIGHyJKeKIoYvr06VAqldi+fTvuvPNO/PrXv5a7LCKSAYMPESWFPXv2YOjQoRg5ciS2bNkClUold0lEJAMObiaipPDqq6/CYDCgqqoKNTU1cpdDRDJhiw8RJbyNGzfi4osvxocffoinn34aAPDRRx9BoVDIXBkRRRtbfIgooXV1dWH+/PlYsGABLrnkEqxYsQLl5eVYvny53KURkQzY4kNECW3hwoV47733sG3bNhgMBgDASy+9hPvvvx/bt29Hfn6+vAUSUVQx+BBRwvrss89w6aWX4tNPP8VFF13U572ZM2fC7/ezy4soyTD4EBERUdLgGB8iIiJKGgw+RERElDQYfIiIiChpMPgQERFR0mDwISIioqTB4ENERERJg8GHiIiIkgaDDxERESUNBh8iIiJKGgw+RERElDQYfIiIiChpMPgQERFR0vj/SHkInhgwEQIAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_model(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "fef06bbe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:34:06.202820Z",
     "iopub.status.busy": "2024-01-04T12:34:06.202471Z",
     "iopub.status.idle": "2024-01-04T12:34:06.213795Z",
     "shell.execute_reply": "2024-01-04T12:34:06.213189Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=0.9347317914540858>,\n",
       " <Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=0.9697908216130555>,\n",
       " <Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=0.7490545090665778>]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[k.kernels[0].lengthscales for k in m.kernel.kernels]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4dbc76b4",
   "metadata": {},
   "source": [
    "### 3. Separate independent kernel and separate independent inducing variables\n",
    "Here we allow different hyperparameters for the priors of each output. We now allow different inducing inputs for each output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a75e8316",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:34:06.216100Z",
     "iopub.status.busy": "2024-01-04T12:34:06.215833Z",
     "iopub.status.idle": "2024-01-04T12:34:06.280608Z",
     "shell.execute_reply": "2024-01-04T12:34:06.279829Z"
    }
   },
   "outputs": [],
   "source": [
    "# Create list of kernels for each output\n",
    "kern_list = [\n",
    "    gpf.kernels.SquaredExponential() + gpf.kernels.Linear() for _ in range(P)\n",
    "]\n",
    "# Create multi-output kernel from kernel list\n",
    "kernel = gpf.kernels.SeparateIndependent(kern_list)\n",
    "# initialization of inducing input locations, one set of locations per output\n",
    "Zs = [Zinit.copy() for _ in range(P)]\n",
    "# initialize as list inducing inducing variables\n",
    "iv_list = [gpf.inducing_variables.InducingPoints(Z) for Z in Zs]\n",
    "# create multi-output inducing variables from iv_list\n",
    "iv = gpf.inducing_variables.SeparateIndependentInducingVariables(iv_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d2115b7",
   "metadata": {},
   "source": [
    "**NOTE:** While the inducing points are independent, there needs to be the same number of inducing points per dimension."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "11c750cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:34:06.283309Z",
     "iopub.status.busy": "2024-01-04T12:34:06.283032Z",
     "iopub.status.idle": "2024-01-04T12:34:06.335384Z",
     "shell.execute_reply": "2024-01-04T12:34:06.334772Z"
    }
   },
   "outputs": [],
   "source": [
    "# create SVGP model as usual and optimize\n",
    "m = gpf.models.SVGP(\n",
    "    kernel, gpf.likelihoods.Gaussian(), inducing_variable=iv, num_latent_gps=P\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3e48e2e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:34:06.337984Z",
     "iopub.status.busy": "2024-01-04T12:34:06.337708Z",
     "iopub.status.idle": "2024-01-04T12:34:20.517484Z",
     "shell.execute_reply": "2024-01-04T12:34:20.516937Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " This problem is unconstrained.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RUNNING THE L-BFGS-B CODE\n",
      "\n",
      "           * * *\n",
      "\n",
      "Machine precision = 2.220D-16\n",
      " N =          460     M =           10\n",
      "\n",
      "At X0         0 variables are exactly at the bounds\n",
      "\n",
      "At iterate    0    f=  3.26251D+03    |proj g|=  1.79322D+03\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate   50    f=  1.91729D+02    |proj g|=  6.27078D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  100    f=  1.06639D+02    |proj g|=  2.16919D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  150    f=  5.16910D+01    |proj g|=  1.31100D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  200    f=  4.64915D+01    |proj g|=  1.33605D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  250    f=  4.40456D+01    |proj g|=  7.45115D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  300    f=  4.27671D+01    |proj g|=  6.17202D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  350    f=  4.10043D+01    |proj g|=  1.01530D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  400    f=  3.94569D+01    |proj g|=  3.72379D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  450    f=  3.85035D+01    |proj g|=  9.08371D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  500    f=  3.80926D+01    |proj g|=  7.92953D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  550    f=  3.78686D+01    |proj g|=  4.68565D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  600    f=  3.77565D+01    |proj g|=  2.71000D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  650    f=  3.76767D+01    |proj g|=  1.86134D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  700    f=  3.75731D+01    |proj g|=  5.38105D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  750    f=  3.74602D+01    |proj g|=  6.47335D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  800    f=  3.73417D+01    |proj g|=  2.11496D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  850    f=  3.72396D+01    |proj g|=  2.44189D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  900    f=  3.71748D+01    |proj g|=  9.73583D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  950    f=  3.71236D+01    |proj g|=  2.95280D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1000    f=  3.70781D+01    |proj g|=  2.42569D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1050    f=  3.70492D+01    |proj g|=  4.26418D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1100    f=  3.70184D+01    |proj g|=  1.81544D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1150    f=  3.70010D+01    |proj g|=  1.62179D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1200    f=  3.69888D+01    |proj g|=  1.88884D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1250    f=  3.69790D+01    |proj g|=  1.52459D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1300    f=  3.69720D+01    |proj g|=  9.65779D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1350    f=  3.69693D+01    |proj g|=  5.46488D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1400    f=  3.69664D+01    |proj g|=  7.38310D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1450    f=  3.69634D+01    |proj g|=  7.69651D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1500    f=  3.69604D+01    |proj g|=  5.03820D-01\n",
      "\n",
      "At iterate 1550    f=  3.69580D+01    |proj g|=  2.63421D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1600    f=  3.69559D+01    |proj g|=  1.82368D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1650    f=  3.69547D+01    |proj g|=  7.59342D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1700    f=  3.69537D+01    |proj g|=  1.90299D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1750    f=  3.69524D+01    |proj g|=  3.28160D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1800    f=  3.69514D+01    |proj g|=  4.32816D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1850    f=  3.69508D+01    |proj g|=  1.10082D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1900    f=  3.69501D+01    |proj g|=  2.72852D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1950    f=  3.69495D+01    |proj g|=  2.28010D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 2000    f=  3.69490D+01    |proj g|=  6.34403D-01\n",
      "\n",
      "           * * *\n",
      "\n",
      "Tit   = total number of iterations\n",
      "Tnf   = total number of function evaluations\n",
      "Tnint = total number of segments explored during Cauchy searches\n",
      "Skip  = number of BFGS updates skipped\n",
      "Nact  = number of active bounds at final generalized Cauchy point\n",
      "Projg = norm of the final projected gradient\n",
      "F     = final function value\n",
      "\n",
      "           * * *\n",
      "\n",
      "   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F\n",
      "  460   2000   2127      1     0     0   6.344D-01   3.695D+01\n",
      "  F =   36.949032541890453     \n",
      "\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT                 \n"
     ]
    }
   ],
   "source": [
    "optimize_model_with_scipy(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8b4dfcf6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:34:20.520581Z",
     "iopub.status.busy": "2024-01-04T12:34:20.520278Z",
     "iopub.status.idle": "2024-01-04T12:34:22.309197Z",
     "shell.execute_reply": "2024-01-04T12:34:22.308689Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_model(m)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52b49c9a",
   "metadata": {},
   "source": [
    "The following plot shows that we use different inducing *inputs* in each output dimension."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "bb971200",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:34:22.311776Z",
     "iopub.status.busy": "2024-01-04T12:34:22.311488Z",
     "iopub.status.idle": "2024-01-04T12:34:24.628435Z",
     "shell.execute_reply": "2024-01-04T12:34:24.627753Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in range(len(m.inducing_variable.inducing_variable_list)):\n",
    "    q_mu_unwhitened, q_var_unwhitened = m.predict_f(\n",
    "        m.inducing_variable.inducing_variable_list[i].Z\n",
    "    )\n",
    "    plt.plot(\n",
    "        m.inducing_variable.inducing_variable_list[i].Z.numpy(),\n",
    "        q_mu_unwhitened[:, i, None].numpy(),\n",
    "        \"o\",\n",
    "    )\n",
    "plt.gca().set_xticks(np.linspace(-6, 6, 20), minor=True)\n",
    "plt.gca().set_yticks(np.linspace(-9, 9, 20), minor=True)\n",
    "plt.grid(which=\"minor\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2327b036",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:34:24.631385Z",
     "iopub.status.busy": "2024-01-04T12:34:24.631115Z",
     "iopub.status.idle": "2024-01-04T12:34:24.635037Z",
     "shell.execute_reply": "2024-01-04T12:34:24.634429Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ListWrapper([<gpflow.inducing_variables.inducing_variables.InducingPoints object at 0x7fb22cfca890>, <gpflow.inducing_variables.inducing_variables.InducingPoints object at 0x7fb22d2af650>, <gpflow.inducing_variables.inducing_variables.InducingPoints object at 0x7fb22d56a290>])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.inducing_variable.inducing_variable_list"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8291a75c",
   "metadata": {},
   "source": [
    "## Model $f(x)$ by doing inference in the $g$ space\n",
    "### Mixed kernel and uncorrelated inducing variables\n",
    "\n",
    "Remember the general case: $f(x) = W g(x)$, where $g(x) \\in \\mathbb{R}^L$, $f(x) \\in \\mathbb{R}^P$ and $W \\in \\mathbb{R}^{P \\times L}$, where $L \\leq P$.\n",
    "We assume that the outputs of $g$ are uncorrelated, and by *mixing* them with $W$ they become correlated.\n",
    "With this setup we perform the optimal routine to calculate the conditional. Namely, calculate the conditional of the uncorrelated latent $g$ and afterwards project the mean and variance using the mixing matrix: $\\mu_f = W \\mu_g$ and $\\Sigma_f = W\\Sigma_g W^\\top$\n",
    "\n",
    "- $K_{uu} = L \\times M \\times M$\n",
    "- $K_{uf} = L \\times M \\times N$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2390877a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:34:24.637862Z",
     "iopub.status.busy": "2024-01-04T12:34:24.637618Z",
     "iopub.status.idle": "2024-01-04T12:34:24.681117Z",
     "shell.execute_reply": "2024-01-04T12:34:24.680191Z"
    }
   },
   "outputs": [],
   "source": [
    "# Create list of kernels for each output\n",
    "kern_list = [\n",
    "    gpf.kernels.SquaredExponential() + gpf.kernels.Linear() for _ in range(L)\n",
    "]\n",
    "# Create multi-output kernel from kernel list\n",
    "kernel = gpf.kernels.LinearCoregionalization(\n",
    "    kern_list, W=np.random.randn(P, L)\n",
    ")  # Notice that we initialise the mixing matrix W\n",
    "# initialisation of inducing input locations (M random points from the training inputs)\n",
    "Z = Zinit.copy()\n",
    "# create multi-output inducing variables from Z\n",
    "iv = gpf.inducing_variables.SharedIndependentInducingVariables(\n",
    "    gpf.inducing_variables.InducingPoints(Z)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7c01af78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:34:24.684388Z",
     "iopub.status.busy": "2024-01-04T12:34:24.684113Z",
     "iopub.status.idle": "2024-01-04T12:34:24.719761Z",
     "shell.execute_reply": "2024-01-04T12:34:24.719118Z"
    }
   },
   "outputs": [],
   "source": [
    "# initialize mean of variational posterior to be of shape MxL\n",
    "q_mu = np.zeros((M, L))\n",
    "# initialize \\sqrt(\u03a3) of variational posterior to be of shape LxMxM\n",
    "q_sqrt = np.repeat(np.eye(M)[None, ...], L, axis=0) * 1.0\n",
    "\n",
    "# create SVGP model as usual and optimize\n",
    "m = gpf.models.SVGP(\n",
    "    kernel,\n",
    "    gpf.likelihoods.Gaussian(),\n",
    "    inducing_variable=iv,\n",
    "    q_mu=q_mu,\n",
    "    q_sqrt=q_sqrt,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "31fafe0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:34:24.722835Z",
     "iopub.status.busy": "2024-01-04T12:34:24.722576Z",
     "iopub.status.idle": "2024-01-04T12:34:35.724012Z",
     "shell.execute_reply": "2024-01-04T12:34:35.723410Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " This problem is unconstrained.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RUNNING THE L-BFGS-B CODE\n",
      "\n",
      "           * * *\n",
      "\n",
      "Machine precision = 2.220D-16\n",
      " N =          298     M =           10\n",
      "\n",
      "At X0         0 variables are exactly at the bounds\n",
      "\n",
      "At iterate    0    f=  7.44521D+03    |proj g|=  6.62929D+03\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate   50    f=  3.17536D+02    |proj g|=  4.85678D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  100    f=  1.71814D+02    |proj g|=  1.35957D+02\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  150    f=  1.03408D+02    |proj g|=  1.54598D+02\n",
      "\n",
      "At iterate  200    f=  3.33945D+01    |proj g|=  3.82713D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  250    f=  2.13996D+01    |proj g|=  5.37833D+01\n",
      "\n",
      "At iterate  300    f=  1.71520D+01    |proj g|=  2.73838D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  350    f=  1.27657D+01    |proj g|=  3.25960D+01\n",
      "\n",
      "At iterate  400    f=  9.67997D+00    |proj g|=  2.69073D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  450    f=  7.61284D+00    |proj g|=  7.31885D+00\n",
      "\n",
      "At iterate  500    f=  6.06674D+00    |proj g|=  1.91774D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  550    f=  4.97226D+00    |proj g|=  1.47615D+01\n",
      "\n",
      "At iterate  600    f=  4.14799D+00    |proj g|=  6.00751D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  650    f=  3.48993D+00    |proj g|=  1.04231D+01\n",
      "\n",
      "At iterate  700    f=  3.04828D+00    |proj g|=  1.67168D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  750    f=  2.72907D+00    |proj g|=  7.23828D+00\n",
      "\n",
      "At iterate  800    f=  2.41559D+00    |proj g|=  1.15389D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  850    f=  1.83715D+00    |proj g|=  4.61493D+00\n",
      "\n",
      "At iterate  900    f=  1.54304D+00    |proj g|=  4.22855D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  950    f=  1.29959D+00    |proj g|=  1.24710D+00\n",
      "\n",
      "At iterate 1000    f=  1.18640D+00    |proj g|=  3.04028D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1050    f=  1.08129D+00    |proj g|=  6.13046D+00\n",
      "\n",
      "At iterate 1100    f=  1.00477D+00    |proj g|=  2.43149D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1150    f=  9.25643D-01    |proj g|=  6.75472D+00\n",
      "\n",
      "At iterate 1200    f=  8.69783D-01    |proj g|=  1.66657D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1250    f=  8.39237D-01    |proj g|=  6.91428D-01\n",
      "\n",
      "At iterate 1300    f=  8.10740D-01    |proj g|=  6.57386D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1350    f=  7.83474D-01    |proj g|=  7.78541D-01\n",
      "\n",
      "At iterate 1400    f=  7.58686D-01    |proj g|=  7.30850D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1450    f=  7.31603D-01    |proj g|=  1.15340D+00\n",
      "\n",
      "At iterate 1500    f=  7.11659D-01    |proj g|=  8.92315D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1550    f=  6.96505D-01    |proj g|=  1.35317D+00\n",
      "\n",
      "At iterate 1600    f=  6.82715D-01    |proj g|=  1.33298D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1650    f=  6.71177D-01    |proj g|=  3.28119D+00\n",
      "\n",
      "At iterate 1700    f=  6.59102D-01    |proj g|=  5.51186D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1750    f=  6.49904D-01    |proj g|=  6.18087D-01\n",
      "\n",
      "At iterate 1800    f=  6.41539D-01    |proj g|=  2.11187D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1850    f=  6.36751D-01    |proj g|=  9.81126D-01\n",
      "\n",
      "At iterate 1900    f=  6.31310D-01    |proj g|=  1.02064D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1950    f=  6.24591D-01    |proj g|=  5.50752D-01\n",
      "\n",
      "At iterate 2000    f=  6.20926D-01    |proj g|=  3.24211D-01\n",
      "\n",
      "           * * *\n",
      "\n",
      "Tit   = total number of iterations\n",
      "Tnf   = total number of function evaluations\n",
      "Tnint = total number of segments explored during Cauchy searches\n",
      "Skip  = number of BFGS updates skipped\n",
      "Nact  = number of active bounds at final generalized Cauchy point\n",
      "Projg = norm of the final projected gradient\n",
      "F     = final function value\n",
      "\n",
      "           * * *\n",
      "\n",
      "   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F\n",
      "  298   2000   2182      1     0     0   3.242D-01   6.209D-01\n",
      "  F =  0.62092649212238626     \n",
      "\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT                 \n"
     ]
    }
   ],
   "source": [
    "optimize_model_with_scipy(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a39791a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:34:35.726617Z",
     "iopub.status.busy": "2024-01-04T12:34:35.726356Z",
     "iopub.status.idle": "2024-01-04T12:34:36.979212Z",
     "shell.execute_reply": "2024-01-04T12:34:36.978449Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_model(m)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49963709",
   "metadata": {},
   "source": [
    "## Illustration of GPflow's multi-output capabilities\n",
    "This section shows the inheritance structure in GPflow's multi-output framework."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17550f9c",
   "metadata": {},
   "source": [
    "### Multi-output kernels (MOK) class diagram\n",
    "We include three multi-output kernels:\n",
    "- `SharedIndependent`: This kernel is included mainly as an illustration of specifying a conditional using the multiple dispatch framework. The same functionality is provided by using a normal kernel and passing in multiple approximate posteriors by stacking `q_mu` and `q_sqrt`.\n",
    "- `SeparateIndependent`: This kernel allows you to use different priors for each output GP.\n",
    "- `LinearCoregionalization`: This kernel describes the prior of the linear model of coregionalization. As shown previously, this implementation supports various inducing point approximations.\n",
    "![Multi-output kernels](./multioutput_kernels.svg)\n",
    "\n",
    "We include several base classes. Two are noteworthy:\n",
    "- `MultioutputKernel` is included to be the base class for all multi-output kernels.\n",
    "- `IndepedentLatent` is the base class for all multi-output kernels which are constructed from independent latent processes. Including this kernel allows the specification of a default approximation method which, while not the most efficient, does take advantage of _some_ structure. It can be applied to _any_ kernel constructed from independent latent processes.\n",
    "\n",
    "There is a similarity in the meaning of `SeparateIndependent` and `IndependentLatent`. Both kernels indicate that independent processes are used, and that $\\mathbf{K}_{\\bf uu}$ can therefore be represented as a `[L, M, M]` tensor. It could therefore be suggested that `SeparateIndependent` be the parent class of all \"independent latent\" kernels, instead of having a separate `IndependentLatent` class. We decided against this because:\n",
    "- this would increase the complexity in specifying `conditionals()` for the otherwise simple multi-output kernels `SeparateIndependent` and `SharedIndependent`.\n",
    "- we did not want to specify too much of an implementation in `IndependentLatent`, leaving implementation details to child classes. Using `SeparateIndependent` as the base class would force all child classes to be a `Combination` kernel."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c243d041",
   "metadata": {},
   "source": [
    "### Multi-output inducing variables class diagram\n",
    "![Multi-output features](./multioutput_features.svg)\n",
    "\n",
    "#### Inducing points\n",
    "The goal of this class is to provide inducing variables that can be used with _any_ kernel, even if the method ends up being slow.\n",
    "\n",
    "The multiouput framework extends `InducingPoints` to work with multi-output kernels. Just like for single-output kernels, we want `InducingPoints` to work for all `MultioutputKernel`s. We do this by defining `InducingPoints` to take _all_ outputs for specific inducing inputs as inducing variables.\n",
    "\n",
    "#### Fallback shared/separate independent inducing variables\n",
    "The goal of these classes is to provide a reasonably efficient implementation for kernels that give exploitable independence structure in the prior of inducing variables (that is, subclasses of `IndependentLatent`), while only needing to implement `Kuu()` and `Kuf()` methods.\n",
    "\n",
    "#### Shared/separate independent inducing variables\n",
    "The goal of these classes is to provide the most efficient code path for kernels that allow exploiting independence structure in the prior of inducing variables.\n",
    "\n",
    "For more specialized multi-output kernels (i.e. `{Shared|Separate}Independent` or `LinearCoregionalization`) we define `{Shared|Separate}IndependentInducingVariables`. These wrap (a list of) single-output inducing variables to define groups of a-priori independent inducing variables, which leads to a $\\mathbf{K}_{\\bf uu}$ that can be represented as a `[L, M, M]` tensor. We saw the use of these previously.\n",
    "\n",
    "`{Shared|Separate}IndependentInducingVariables` inherit from `Fallback{Shared|Separate}IndependentInducingVariables`, so the multiple dispatch will fall back on the slower but general implementation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "143cecab",
   "metadata": {},
   "source": [
    "### Implemented combinations\n",
    "Multiple dispatch is applied to both `Kuu()`, `Kuf()`, and `conditional()`. The return values of the covariances can therefore be tailored to a specific implementation of `conditional()`. The following table lists combinations which are currently available in GPflow. Thanks to the multiple dispatch code, implementing your own outside of GPflow should require only a small amount of code!\n",
    "\n",
    "|  Inducing variable class  |  Kernel  |  Kuu  |  Kuf  |  conditional  |  note  |\n",
    "|  -----------------------  |  ------  |  ---  |  ---  |  -----------  |  ----  |\n",
    "|  `InducingPoints`                                |  `MultioutputKernel`        |  `[M, P, M, P]`  |  `[M, P, N, P]`  |  `inducing_point_conditional()`, which calls `fully_correlated_conditional()`  |  Works for all kernels, but might be very inefficient. In this case `q_mu` and `q_sqrt` should have shapes of `[1, MP]` and `[1, MP, MP]`  |\n",
    "|  `SharedIndependentInducingVariables`            |  `SharedIndependent`        |  `[M, M]`        |  `[M, N]`        |  `shared_independent_conditional()`, which calls `base_conditional()`  |  The combination of these two classes is in a sense redundant, because we can achieve the same behavior by using the single output Kernel and InducingVariable classes. They are added for illustrative purposes. Thanks to the conditional dispatch, the most efficient code path is used.  |\n",
    "|  `SeparateIndependentInducingVariables`          |  `SharedIndependent`        |  `[P, M, M]`     |  `[P, M, N]`     |  `separate_independent_conditional()`, which calls `base_conditional()` P times  |  We loop P times over the `base_conditional()`  |\n",
    "|  `SeparateIndependentInducingVariable`           |  `SeparateIndependent`      |  `[P, M, M]`     |  `[P, M, N]`     |   `separate_independent_conditional()`, which calls `base_conditional()` P times  |  We loop P times over the `base_conditional()`  |\n",
    "|  `SharedIndependentInducingVariables`            |  `SeparateIndependent`      |  `[P, M, M]`     |  `[P, M, N]`     |  `separate_independent_conditional()`, which calls `base_conditional()` P times  |  We loop P times over the `base_conditional()`  |\n",
    "|  `FallbackSharedIndependentInducingVariables`    |  `IndependentLatent`        |  `[L, M, M]`     |  `[M, L, N, P]`  |  `fallback_independent_latent_conditional()`, which calls `independent_interdomain_conditional()`  |  Implementation which only requires custom `Kuu()` and `Kuf()`  |\n",
    "|  `FallbackSeparateIndependentInducingVariable`   |  `IndependentLatent`        |  `[L, M, M]`     |  `[M, L, N, P]`  |  `fallback_independent_latent_conditional()`, which calls `independent_interdomain_conditional()`  |  Implementation which only requires custom `Kuu()` and `Kuf()`  |\n",
    "|  `SharedIndependentInducingVariables`            |  `LinearCoregionalization`  |  `[L, M, M]`     |  `[L, M, N]`     |  `coregionalization_conditional()`, which calls `base_conditional()`  |  This is the most efficient implementation for linear coregionalization. The inducing outputs live in g-space. Here we use the output of the base conditional and project the mean and covariance with the mixing matrix W.  |\n",
    "|  `SeparateIndependentInducingVariables`          |  `LinearCoregionalization`  |  `[L, M, M]`      |  `[L, M, N]`      |  `base_conditional()`  |  This is the most efficient implementation for linear coregionalization. The inducing outputs live in g-space. Here we use the output of the base conditional and project the mean and covariance with the mixing matrix W.  |"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34ad1a17",
   "metadata": {},
   "source": [
    "## Debugging: introspect\n",
    "\n",
    "Given all these possibilities it can be hard to determine which conditional will be called for which set of kernel and inducing variable. The following method lets you proactively introspect which implementation will be executed. This can be useful when debugging new code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8e4d3cc5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-04T12:34:36.983096Z",
     "iopub.status.busy": "2024-01-04T12:34:36.982759Z",
     "iopub.status.idle": "2024-01-04T12:34:36.988671Z",
     "shell.execute_reply": "2024-01-04T12:34:36.987932Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<code object wrapped_function at 0x55fdf967c150, file \"/tmp/max_venv/lib/python3.11/site-packages/check_shapes/decorator.py\", line 120>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def inspect_conditional(inducing_variable_type, kernel_type):\n",
    "    \"\"\"\n",
    "    Helper function returning the exact implementation called\n",
    "    by the multiple dispatch `conditional` given the type of\n",
    "    kernel and inducing variable.\n",
    "\n",
    "    :param inducing_variable_type:\n",
    "        Type of the inducing variable\n",
    "    :param kernel_type:\n",
    "        Type of the kernel\n",
    "\n",
    "    :return: String\n",
    "        Contains the name, the file and the linenumber of the\n",
    "        implementation.\n",
    "    \"\"\"\n",
    "    import inspect\n",
    "\n",
    "    from gpflow.conditionals import conditional\n",
    "\n",
    "    implementation = conditional.dispatch(\n",
    "        object, inducing_variable_type, kernel_type, object\n",
    "    )\n",
    "    info = dict(inspect.getmembers(implementation))\n",
    "    return info[\"__code__\"]\n",
    "\n",
    "\n",
    "# Example:\n",
    "inspect_conditional(\n",
    "    gpf.inducing_variables.SharedIndependentInducingVariables,\n",
    "    gpf.kernels.SharedIndependent,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9d51988",
   "metadata": {},
   "source": [
    "## Further Reading:\n",
    "- [A simple demonstration of coregionalization](./coregionalisation.ipynb), which details other GPflow features for multi-output prediction without fully observed outputs."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "encoding": "# -*- coding: utf-8 -*-",
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}