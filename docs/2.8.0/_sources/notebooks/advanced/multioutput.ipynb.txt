{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d57a665",
   "metadata": {},
   "source": [
    "# Multi-output Gaussian processes in GPflow"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf58af6f",
   "metadata": {},
   "source": [
    "This notebook shows how to construct a multi-output GP model using GPflow, together with different interdomain inducing variables which lead to different approximation properties. GPflow provides a framework for specifying multioutput GP priors, and interdomain approximations which is\n",
    "- modular, by providing a consistent interface for the user of the resulting `SVGP` model,\n",
    "- extensible, by allowing new interdomain variables and kernels to be specified while reusing exising code where possible,\n",
    "- efficient, by allowing the most efficient custom code path to be specified where desired.\n",
    "\n",
    "Getting to grips with the maths and code can be a bit daunting, so to accompany the documentation there is an [in-depth review on arXiv](https://arxiv.org/abs/2003.01115), which provides a unified mathematical framework, together with a high-level description of software design choices in GPflow.\n",
    "\n",
    "This notebook shows the various design choices that can be made, to show the reader the flexibility of the framework. This is done in the hope that an example is provided that can be easily adapted to the special case that the reader wants to implement.\n",
    "\n",
    "A reader who just wants to use a multioutput kernel should simply choose the most efficient set of inducing variables.\n",
    "\n",
    "To cite this framework, please reference our [arXiv paper](https://arxiv.org/abs/2003.01115).\n",
    "```\n",
    "@article{GPflow2020multioutput,\n",
    "  author = {{van der Wilk}, Mark and Dutordoir, Vincent and John, ST and\n",
    "            Artemev, Artem and Adam, Vincent and Hensman, James},\n",
    "  title = {A Framework for Interdomain and Multioutput {G}aussian Processes},\n",
    "  year = {2020},\n",
    "  journal = {arXiv:2003.01115},\n",
    "  url = {https://arxiv.org/abs/2003.01115}\n",
    "}\n",
    "```\n",
    "\n",
    "\\begin{equation}\n",
    "\\newcommand{\\GP}{\\mathcal{GP}}\n",
    "\\newcommand{\\NN}{\\mathcal{N}}\n",
    "\\newcommand{\\LL}{\\mathcal{L}}\n",
    "\\newcommand{\\RR}{\\mathbb{R}}\n",
    "\\newcommand{\\EE}{\\mathbb{E}}\n",
    "\\newcommand{\\valpha}{\\boldsymbol\\alpha}\n",
    "\\newcommand{\\vf}{\\mathbf{f}}\n",
    "\\newcommand{\\vF}{\\mathbf{F}}\n",
    "\\newcommand{\\vg}{\\mathbf{g}}\n",
    "\\newcommand{\\vW}{\\mathbf{W}}\n",
    "\\newcommand{\\vI}{\\mathbf{I}}\n",
    "\\newcommand{\\vZ}{\\mathbf{Z}}\n",
    "\\newcommand{\\vu}{\\mathbf{u}}\n",
    "\\newcommand{\\vU}{\\mathbf{U}}\n",
    "\\newcommand{\\vX}{\\mathbf{X}}\n",
    "\\newcommand{\\vY}{\\mathbf{Y}}\n",
    "\\newcommand{\\identity}{\\mathbb{I}}\n",
    "\\end{equation}\n",
    "\n",
    "\n",
    "\n",
    "## Task\n",
    "We will consider a regression problem for functions $f: \\mathbb{R}^D \\rightarrow \\mathbb{R}^P$. We assume that the dataset is of the form $(X, f_1), \\dots, (X, f_P)$, that is, we observe all the outputs for a particular input location (for cases where there are **not** fully observed outputs for each input, see [A simple demonstration of coregionalization](./coregionalisation.ipynb)).\n",
    "\n",
    "Here we assume a model of the form:\n",
    "\\begin{equation}\n",
    "f(x) = W g(x),\n",
    "\\end{equation}\n",
    "where $g(x) \\in \\mathbb{R}^L$, $f(x) \\in \\mathbb{R}^P$ and $W \\in \\mathbb{R}^{P \\times L}$. We assume that the outputs of $g$ are uncorrelated, and that by *mixing* them with $W$ they become correlated. In this notebook, we show how to build this model using Sparse Variational Gaussian Process (SVGP) for $g$, which scales well with the numbers of data points and outputs.\n",
    "\n",
    "Here we have two options for $g$:\n",
    "1. The output dimensions of $g$ share the same kernel.\n",
    "2. Each output of $g$ has a separate kernel.\n",
    "\n",
    "\n",
    "In addition, we have two further suboptions for the inducing inputs of $g$:\n",
    "1. The instances of $g$ share the same inducing inputs.\n",
    "2. Each output of $g$ has its own set of inducing inputs.\n",
    "\n",
    "The notation is as follows:\n",
    "- $X \\in \\mathbb{R}^{N \\times D}$ denotes the input\n",
    "- $Y \\in \\RR^{N \\times P}$ denotes the output\n",
    "- $k_{1..L}$, $L$ are kernels on $\\RR^{N \\times D}$\n",
    "- $g_{1..L}$, $L$ are independent $\\GP$s  with $g_l \\sim \\GP(0,k_l)$\n",
    "- $f_{1..P}$, $P$ are correlated  $\\GP$s  with $\\vf = \\vW \\vg$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ff8bb56a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:03.560718Z",
     "iopub.status.busy": "2023-05-03T23:15:03.560526Z",
     "iopub.status.idle": "2023-05-03T23:15:08.437342Z",
     "shell.execute_reply": "2023-05-03T23:15:08.436749Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-05-03 23:15:04.331498: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2023-05-03 23:15:04.462766: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2023-05-03 23:15:04.462784: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n",
      "2023-05-03 23:15:04.503390: E tensorflow/stream_executor/cuda/cuda_blas.cc:2981] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-05-03 23:15:05.290499: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory\n",
      "2023-05-03 23:15:05.290590: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory\n",
      "2023-05-03 23:15:05.290601: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "import gpflow as gpf\n",
    "from gpflow.ci_utils import reduce_in_tests\n",
    "from gpflow.utilities import print_summary\n",
    "\n",
    "gpf.config.set_default_float(np.float64)\n",
    "gpf.config.set_default_summary_fmt(\"notebook\")\n",
    "np.random.seed(0)\n",
    "%matplotlib inline\n",
    "\n",
    "MAXITER = reduce_in_tests(2000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53a95b33",
   "metadata": {},
   "source": [
    "## Generate synthetic data\n",
    "We create a utility function to generate synthetic data. We assume that:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c336f1f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:08.441066Z",
     "iopub.status.busy": "2023-05-03T23:15:08.439992Z",
     "iopub.status.idle": "2023-05-03T23:15:08.443874Z",
     "shell.execute_reply": "2023-05-03T23:15:08.443400Z"
    }
   },
   "outputs": [],
   "source": [
    "N = 100  # number of points\n",
    "D = 1  # number of input dimensions\n",
    "M = 15  # number of inducing points\n",
    "L = 2  # number of latent GPs\n",
    "P = 3  # number of observations = output dimensions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "525265cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:08.446093Z",
     "iopub.status.busy": "2023-05-03T23:15:08.445797Z",
     "iopub.status.idle": "2023-05-03T23:15:08.449877Z",
     "shell.execute_reply": "2023-05-03T23:15:08.449405Z"
    }
   },
   "outputs": [],
   "source": [
    "def generate_data(N=100):\n",
    "    X = np.random.rand(N)[:, None] * 10 - 5  # Inputs = N x D\n",
    "    G = np.hstack((0.5 * np.sin(3 * X) + X, 3.0 * np.cos(X) - X))  # G = N x L\n",
    "    W = np.array([[0.5, -0.3, 1.5], [-0.4, 0.43, 0.0]])  # L x P\n",
    "    F = np.matmul(G, W)  # N x P\n",
    "    Y = F + np.random.randn(*F.shape) * [0.2, 0.2, 0.2]\n",
    "\n",
    "    return X, Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d8c7175b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:08.452114Z",
     "iopub.status.busy": "2023-05-03T23:15:08.451869Z",
     "iopub.status.idle": "2023-05-03T23:15:08.454950Z",
     "shell.execute_reply": "2023-05-03T23:15:08.454475Z"
    }
   },
   "outputs": [],
   "source": [
    "X, Y = data = generate_data(N)\n",
    "Zinit = np.linspace(-5, 5, M)[:, None]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3667c62",
   "metadata": {},
   "source": [
    "We create a utility function for plotting:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7363cb75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:08.457095Z",
     "iopub.status.busy": "2023-05-03T23:15:08.456853Z",
     "iopub.status.idle": "2023-05-03T23:15:08.461866Z",
     "shell.execute_reply": "2023-05-03T23:15:08.461399Z"
    }
   },
   "outputs": [],
   "source": [
    "def plot_model(m, lower=-8.0, upper=8.0):\n",
    "    pX = np.linspace(lower, upper, 100)[:, None]\n",
    "    pY, pYv = m.predict_y(pX)\n",
    "    if pY.ndim == 3:\n",
    "        pY = pY[:, 0, :]\n",
    "    plt.plot(X, Y, \"x\")\n",
    "    plt.gca().set_prop_cycle(None)\n",
    "    plt.plot(pX, pY)\n",
    "    for i in range(pY.shape[1]):\n",
    "        top = pY[:, i] + 2.0 * pYv[:, i] ** 0.5\n",
    "        bot = pY[:, i] - 2.0 * pYv[:, i] ** 0.5\n",
    "        plt.fill_between(pX[:, 0], top, bot, alpha=0.3)\n",
    "    plt.xlabel(\"X\")\n",
    "    plt.ylabel(\"f\")\n",
    "    plt.title(f\"ELBO: {m.elbo(data):.3}\")\n",
    "    plt.plot(Z, Z * 0.0, \"o\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e6f3aa3",
   "metadata": {},
   "source": [
    "## Model the outputs of $f(x)$ directly\n",
    "The three following examples show how to model the outputs of the model $f(x)$ directly. Mathematically, this case is equivalent to having:\n",
    "\\begin{equation}\n",
    "f(x) = I g(x),\n",
    "\\end{equation}\n",
    "i.e. $W = I$ and $P = L$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ee095a7",
   "metadata": {},
   "source": [
    "### 1. Shared independent multi-output kernel (MOK) and shared independent inducing variables\n",
    "Here the priors on all outputs are constrained to have the same kernel hyperparameters. We also share the inducing inputs between all outputs. The different GPs are independent both in the prior and the approximate posterior."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7ecf59ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:08.464071Z",
     "iopub.status.busy": "2023-05-03T23:15:08.463828Z",
     "iopub.status.idle": "2023-05-03T23:15:08.539481Z",
     "shell.execute_reply": "2023-05-03T23:15:08.538876Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-05-03 23:15:08.466066: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2023-05-03 23:15:08.466087: W tensorflow/stream_executor/cuda/cuda_driver.cc:263] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2023-05-03 23:15:08.466106: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (d64c43fc0b71): /proc/driver/nvidia/version does not exist\n",
      "2023-05-03 23:15:08.466371: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "# create multi-output kernel\n",
    "kernel = gpf.kernels.SharedIndependent(\n",
    "    gpf.kernels.SquaredExponential() + gpf.kernels.Linear(), output_dim=P\n",
    ")\n",
    "# initialization of inducing input locations (M random points from the training inputs)\n",
    "Z = Zinit.copy()\n",
    "# create multi-output inducing variables from Z\n",
    "iv = gpf.inducing_variables.SharedIndependentInducingVariables(\n",
    "    gpf.inducing_variables.InducingPoints(Z)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1c4c13f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:08.541964Z",
     "iopub.status.busy": "2023-05-03T23:15:08.541685Z",
     "iopub.status.idle": "2023-05-03T23:15:08.624605Z",
     "shell.execute_reply": "2023-05-03T23:15:08.624055Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                                      </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape      </th><th>dtype  </th><th>value           </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>SVGP.kernel.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>1.0             </td></tr>\n",
       "<tr><td>SVGP.kernel.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>1.0             </td></tr>\n",
       "<tr><td>SVGP.kernel.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>1.0             </td></tr>\n",
       "<tr><td>SVGP.likelihood.variance                  </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>1.0             </td></tr>\n",
       "<tr><td>SVGP.inducing_variable.inducing_variable.Z</td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>(15, 1)    </td><td>float64</td><td>[[-5....        </td></tr>\n",
       "<tr><td>SVGP.q_mu                                 </td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>(15, 3)    </td><td>float64</td><td>[[0., 0., 0.... </td></tr>\n",
       "<tr><td>SVGP.q_sqrt                               </td><td>Parameter</td><td>FillTriangular  </td><td>       </td><td>True       </td><td>(3, 15, 15)</td><td>float64</td><td>[[[1., 0., 0....</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create SVGP model as usual and optimize\n",
    "m = gpf.models.SVGP(\n",
    "    kernel, gpf.likelihoods.Gaussian(), inducing_variable=iv, num_latent_gps=P\n",
    ")\n",
    "print_summary(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6f2a48a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:08.627067Z",
     "iopub.status.busy": "2023-05-03T23:15:08.626798Z",
     "iopub.status.idle": "2023-05-03T23:15:16.788520Z",
     "shell.execute_reply": "2023-05-03T23:15:16.787911Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RUNNING THE L-BFGS-B CODE\n",
      "\n",
      "           * * *\n",
      "\n",
      "Machine precision = 2.220D-16\n",
      " N =          424     M =           10\n",
      "\n",
      "At X0         0 variables are exactly at the bounds\n",
      "\n",
      "At iterate    0    f=  3.26251D+03    |proj g|=  1.79322D+03\n",
      "\n",
      "At iterate   50    f=  1.60046D+02    |proj g|=  2.23880D+01\n",
      "\n",
      "At iterate  100    f=  6.24335D+01    |proj g|=  2.64482D+01\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " This problem is unconstrained.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  150    f=  5.47594D+01    |proj g|=  2.30324D+01\n",
      "\n",
      "At iterate  200    f=  5.09409D+01    |proj g|=  1.79887D+01\n",
      "\n",
      "At iterate  250    f=  4.85812D+01    |proj g|=  1.69594D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  300    f=  4.68431D+01    |proj g|=  1.00237D+01\n",
      "\n",
      "At iterate  350    f=  4.56696D+01    |proj g|=  6.56927D+00\n",
      "\n",
      "At iterate  400    f=  4.46591D+01    |proj g|=  7.61969D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  450    f=  4.37202D+01    |proj g|=  9.01165D+00\n",
      "\n",
      "At iterate  500    f=  4.30875D+01    |proj g|=  8.36795D+00\n",
      "\n",
      "At iterate  550    f=  4.27808D+01    |proj g|=  1.06301D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  600    f=  4.26544D+01    |proj g|=  2.51395D+00\n",
      "\n",
      "At iterate  650    f=  4.25500D+01    |proj g|=  2.33529D+00\n",
      "\n",
      "At iterate  700    f=  4.24944D+01    |proj g|=  2.56079D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  750    f=  4.24630D+01    |proj g|=  8.78334D-01\n",
      "\n",
      "At iterate  800    f=  4.24463D+01    |proj g|=  4.26999D-01\n",
      "\n",
      "At iterate  850    f=  4.24381D+01    |proj g|=  4.16215D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  900    f=  4.24335D+01    |proj g|=  4.11149D-01\n",
      "\n",
      "At iterate  950    f=  4.24295D+01    |proj g|=  8.49405D-01\n",
      "\n",
      "At iterate 1000    f=  4.24265D+01    |proj g|=  1.33535D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1050    f=  4.24249D+01    |proj g|=  1.05105D-01\n",
      "\n",
      "At iterate 1100    f=  4.24240D+01    |proj g|=  3.28053D-01\n",
      "\n",
      "At iterate 1150    f=  4.24235D+01    |proj g|=  1.67576D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1200    f=  4.24230D+01    |proj g|=  1.49874D-01\n",
      "\n",
      "At iterate 1250    f=  4.24225D+01    |proj g|=  5.82735D-02\n",
      "\n",
      "At iterate 1300    f=  4.24221D+01    |proj g|=  1.34652D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1350    f=  4.24218D+01    |proj g|=  2.27220D-01\n",
      "\n",
      "At iterate 1400    f=  4.24214D+01    |proj g|=  1.21356D-01\n",
      "\n",
      "At iterate 1450    f=  4.24211D+01    |proj g|=  2.22174D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1500    f=  4.24208D+01    |proj g|=  2.25751D-01\n",
      "\n",
      "At iterate 1550    f=  4.24205D+01    |proj g|=  1.64768D-01\n",
      "\n",
      "At iterate 1600    f=  4.24205D+01    |proj g|=  3.55818D-02\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1650    f=  4.24204D+01    |proj g|=  2.40386D-02\n",
      "\n",
      "At iterate 1700    f=  4.24204D+01    |proj g|=  1.07473D-01\n",
      "\n",
      "           * * *\n",
      "\n",
      "Tit   = total number of iterations\n",
      "Tnf   = total number of function evaluations\n",
      "Tnint = total number of segments explored during Cauchy searches\n",
      "Skip  = number of BFGS updates skipped\n",
      "Nact  = number of active bounds at final generalized Cauchy point\n",
      "Projg = norm of the final projected gradient\n",
      "F     = final function value\n",
      "\n",
      "           * * *\n",
      "\n",
      "   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F\n",
      "  424   1700   1813      1     0     0   1.075D-01   4.242D+01\n",
      "  F =   42.420424440816490     \n",
      "\n",
      "CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH             \n"
     ]
    }
   ],
   "source": [
    "def optimize_model_with_scipy(model):\n",
    "    optimizer = gpf.optimizers.Scipy()\n",
    "    optimizer.minimize(\n",
    "        model.training_loss_closure(data),\n",
    "        variables=model.trainable_variables,\n",
    "        method=\"l-bfgs-b\",\n",
    "        options={\"disp\": 50, \"maxiter\": MAXITER},\n",
    "    )\n",
    "\n",
    "\n",
    "optimize_model_with_scipy(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b8b56303",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:16.799749Z",
     "iopub.status.busy": "2023-05-03T23:15:16.799327Z",
     "iopub.status.idle": "2023-05-03T23:15:16.825630Z",
     "shell.execute_reply": "2023-05-03T23:15:16.824981Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                                      </th><th>class    </th><th>transform       </th><th>prior  </th><th>trainable  </th><th>shape      </th><th>dtype  </th><th>value                                   </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>SVGP.kernel.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>0.92725                                 </td></tr>\n",
       "<tr><td>SVGP.kernel.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>0.79819                                 </td></tr>\n",
       "<tr><td>SVGP.kernel.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus        </td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>1.2139                                  </td></tr>\n",
       "<tr><td>SVGP.likelihood.variance                  </td><td>Parameter</td><td>Softplus + Shift</td><td>       </td><td>True       </td><td>()         </td><td>float64</td><td>0.03966                                 </td></tr>\n",
       "<tr><td>SVGP.inducing_variable.inducing_variable.Z</td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>(15, 1)    </td><td>float64</td><td>[[-4.83959...                           </td></tr>\n",
       "<tr><td>SVGP.q_mu                                 </td><td>Parameter</td><td>Identity        </td><td>       </td><td>True       </td><td>(15, 3)    </td><td>float64</td><td>[[-0.90097, 0.69851, -1.4739...         </td></tr>\n",
       "<tr><td>SVGP.q_sqrt                               </td><td>Parameter</td><td>FillTriangular  </td><td>       </td><td>True       </td><td>(3, 15, 15)</td><td>float64</td><td>[[[1.7120e-02, 0.0000e+00, 0.0000e+00...</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print_summary(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c6a376ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:16.828087Z",
     "iopub.status.busy": "2023-05-03T23:15:16.827820Z",
     "iopub.status.idle": "2023-05-03T23:15:17.413646Z",
     "shell.execute_reply": "2023-05-03T23:15:17.412855Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot predictions and observations\n",
    "plot_model(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "59e5d578",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:17.418527Z",
     "iopub.status.busy": "2023-05-03T23:15:17.417893Z",
     "iopub.status.idle": "2023-05-03T23:15:17.428681Z",
     "shell.execute_reply": "2023-05-03T23:15:17.428188Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                                            </th><th>class    </th><th>transform  </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>SharedIndependent.kernel.kernels[0].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.92725</td></tr>\n",
       "<tr><td>SharedIndependent.kernel.kernels[0].lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.79819</td></tr>\n",
       "<tr><td>SharedIndependent.kernel.kernels[1].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">1.2139 </td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=0.7981918482945918>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print_summary(m.kernel)\n",
    "m.kernel.kernel.kernels[0].lengthscales"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5632fa8e",
   "metadata": {},
   "source": [
    "### 2. Separate independent MOK and shared independent inducing variables\n",
    "Here we allow different hyperparameters for the priors of each output. We still share the inducing inputs between all outputs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2a197e8b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:17.431035Z",
     "iopub.status.busy": "2023-05-03T23:15:17.430780Z",
     "iopub.status.idle": "2023-05-03T23:15:17.464811Z",
     "shell.execute_reply": "2023-05-03T23:15:17.464334Z"
    }
   },
   "outputs": [],
   "source": [
    "# Create list of kernels for each output\n",
    "kern_list = [\n",
    "    gpf.kernels.SquaredExponential() + gpf.kernels.Linear() for _ in range(P)\n",
    "]\n",
    "# Create multi-output kernel from kernel list\n",
    "kernel = gpf.kernels.SeparateIndependent(kern_list)\n",
    "# initialization of inducing input locations (M random points from the training inputs)\n",
    "Z = Zinit.copy()\n",
    "# create multi-output inducing variables from Z\n",
    "iv = gpf.inducing_variables.SharedIndependentInducingVariables(\n",
    "    gpf.inducing_variables.InducingPoints(Z)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "071d990d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:17.467147Z",
     "iopub.status.busy": "2023-05-03T23:15:17.466903Z",
     "iopub.status.idle": "2023-05-03T23:15:17.488227Z",
     "shell.execute_reply": "2023-05-03T23:15:17.487201Z"
    }
   },
   "outputs": [],
   "source": [
    "# create SVGP model as usual and optimize\n",
    "m = gpf.models.SVGP(\n",
    "    kernel, gpf.likelihoods.Gaussian(), inducing_variable=iv, num_latent_gps=P\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "15051839",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:17.491289Z",
     "iopub.status.busy": "2023-05-03T23:15:17.491009Z",
     "iopub.status.idle": "2023-05-03T23:15:29.269757Z",
     "shell.execute_reply": "2023-05-03T23:15:29.269064Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /tmp/max_venv/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py:629: calling map_fn_v2 (from tensorflow.python.ops.map_fn) with dtype is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use fn_output_signature instead\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RUNNING THE L-BFGS-B CODE\n",
      "\n",
      "           * * *\n",
      "\n",
      "Machine precision = 2.220D-16\n",
      " N =          430     M =           10\n",
      "\n",
      "At X0         0 variables are exactly at the bounds\n",
      "\n",
      "At iterate    0    f=  3.26251D+03    |proj g|=  1.79322D+03\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " This problem is unconstrained.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate   50    f=  1.94337D+02    |proj g|=  7.19142D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  100    f=  1.66814D+02    |proj g|=  3.26283D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  150    f=  6.00999D+01    |proj g|=  2.15028D+01\n",
      "\n",
      "At iterate  200    f=  4.97328D+01    |proj g|=  1.95679D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  250    f=  4.64796D+01    |proj g|=  8.71966D+00\n",
      "\n",
      "At iterate  300    f=  4.44078D+01    |proj g|=  5.29028D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  350    f=  4.30525D+01    |proj g|=  9.00944D+00\n",
      "\n",
      "At iterate  400    f=  4.15516D+01    |proj g|=  1.03807D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  450    f=  4.04783D+01    |proj g|=  9.62300D+00\n",
      "\n",
      "At iterate  500    f=  3.97566D+01    |proj g|=  6.23925D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  550    f=  3.89135D+01    |proj g|=  2.19500D+01\n",
      "\n",
      "At iterate  600    f=  3.82752D+01    |proj g|=  9.02205D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  650    f=  3.79721D+01    |proj g|=  3.18852D+00\n",
      "\n",
      "At iterate  700    f=  3.77513D+01    |proj g|=  2.32701D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  750    f=  3.75961D+01    |proj g|=  8.92977D+00\n",
      "\n",
      "At iterate  800    f=  3.74777D+01    |proj g|=  2.63936D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  850    f=  3.73929D+01    |proj g|=  2.87805D+00\n",
      "\n",
      "At iterate  900    f=  3.73332D+01    |proj g|=  1.00035D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  950    f=  3.72974D+01    |proj g|=  1.60231D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1000    f=  3.72751D+01    |proj g|=  1.69327D+00\n",
      "\n",
      "At iterate 1050    f=  3.72575D+01    |proj g|=  5.20291D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1100    f=  3.72450D+01    |proj g|=  1.99396D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1150    f=  3.72328D+01    |proj g|=  1.45785D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1200    f=  3.72250D+01    |proj g|=  5.66249D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1250    f=  3.72197D+01    |proj g|=  2.88656D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1300    f=  3.72131D+01    |proj g|=  3.59536D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1350    f=  3.72047D+01    |proj g|=  8.53286D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1400    f=  3.71976D+01    |proj g|=  1.43617D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1450    f=  3.71928D+01    |proj g|=  2.20744D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1500    f=  3.71874D+01    |proj g|=  1.19581D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1550    f=  3.71839D+01    |proj g|=  4.57358D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1600    f=  3.71815D+01    |proj g|=  2.80283D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1650    f=  3.71800D+01    |proj g|=  1.86547D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1700    f=  3.71792D+01    |proj g|=  1.92775D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1750    f=  3.71787D+01    |proj g|=  1.79399D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1800    f=  3.71785D+01    |proj g|=  2.37693D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1850    f=  3.71783D+01    |proj g|=  1.12377D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1900    f=  3.71782D+01    |proj g|=  1.58807D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1950    f=  3.71781D+01    |proj g|=  9.27521D-02\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 2000    f=  3.71780D+01    |proj g|=  1.01838D-01\n",
      "\n",
      "           * * *\n",
      "\n",
      "Tit   = total number of iterations\n",
      "Tnf   = total number of function evaluations\n",
      "Tnint = total number of segments explored during Cauchy searches\n",
      "Skip  = number of BFGS updates skipped\n",
      "Nact  = number of active bounds at final generalized Cauchy point\n",
      "Projg = norm of the final projected gradient\n",
      "F     = final function value\n",
      "\n",
      "           * * *\n",
      "\n",
      "   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F\n",
      "  430   2000   2140      1     0     0   1.018D-01   3.718D+01\n",
      "  F =   37.178028020708659     \n",
      "\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT                 \n"
     ]
    }
   ],
   "source": [
    "optimize_model_with_scipy(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d898fb6b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:29.272810Z",
     "iopub.status.busy": "2023-05-03T23:15:29.272517Z",
     "iopub.status.idle": "2023-05-03T23:15:29.287105Z",
     "shell.execute_reply": "2023-05-03T23:15:29.286538Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>name                                                  </th><th>class    </th><th>transform  </th><th>prior  </th><th>trainable  </th><th>shape  </th><th>dtype  </th><th style=\"text-align: right;\">  value</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td>SeparateIndependent.kernels[0].kernels[0].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.86408</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[0].kernels[0].lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.93467</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[0].kernels[1].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.86262</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[1].kernels[0].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.75081</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[1].kernels[0].lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.96981</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[1].kernels[1].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.53054</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[2].kernels[0].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">1.11149</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[2].kernels[0].lengthscales</td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">0.74912</td></tr>\n",
       "<tr><td>SeparateIndependent.kernels[2].kernels[1].variance    </td><td>Parameter</td><td>Softplus   </td><td>       </td><td>True       </td><td>()     </td><td>float64</td><td style=\"text-align: right;\">2.21307</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print_summary(m.kernel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a2b48754",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:29.294943Z",
     "iopub.status.busy": "2023-05-03T23:15:29.289442Z",
     "iopub.status.idle": "2023-05-03T23:15:34.836625Z",
     "shell.execute_reply": "2023-05-03T23:15:34.836049Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_model(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "db53a842",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:34.839377Z",
     "iopub.status.busy": "2023-05-03T23:15:34.839058Z",
     "iopub.status.idle": "2023-05-03T23:15:34.846962Z",
     "shell.execute_reply": "2023-05-03T23:15:34.846375Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=0.9346736406655387>,\n",
       " <Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=0.9698064672110547>,\n",
       " <Parameter: name=softplus, dtype=float64, shape=[], fn=\"softplus\", numpy=0.7491181736855458>]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[k.kernels[0].lengthscales for k in m.kernel.kernels]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "191b5cfc",
   "metadata": {},
   "source": [
    "### 3. Separate independent kernel and separate independent inducing variables\n",
    "Here we allow different hyperparameters for the priors of each output. We now allow different inducing inputs for each output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "39ebd146",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:34.850281Z",
     "iopub.status.busy": "2023-05-03T23:15:34.849947Z",
     "iopub.status.idle": "2023-05-03T23:15:34.896398Z",
     "shell.execute_reply": "2023-05-03T23:15:34.895461Z"
    }
   },
   "outputs": [],
   "source": [
    "# Create list of kernels for each output\n",
    "kern_list = [\n",
    "    gpf.kernels.SquaredExponential() + gpf.kernels.Linear() for _ in range(P)\n",
    "]\n",
    "# Create multi-output kernel from kernel list\n",
    "kernel = gpf.kernels.SeparateIndependent(kern_list)\n",
    "# initialization of inducing input locations, one set of locations per output\n",
    "Zs = [Zinit.copy() for _ in range(P)]\n",
    "# initialize as list inducing inducing variables\n",
    "iv_list = [gpf.inducing_variables.InducingPoints(Z) for Z in Zs]\n",
    "# create multi-output inducing variables from iv_list\n",
    "iv = gpf.inducing_variables.SeparateIndependentInducingVariables(iv_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06f8094d",
   "metadata": {},
   "source": [
    "**NOTE:** While the inducing points are independent, there needs to be the same number of inducing points per dimension."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4360eece",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:34.900578Z",
     "iopub.status.busy": "2023-05-03T23:15:34.900111Z",
     "iopub.status.idle": "2023-05-03T23:15:34.933795Z",
     "shell.execute_reply": "2023-05-03T23:15:34.933171Z"
    }
   },
   "outputs": [],
   "source": [
    "# create SVGP model as usual and optimize\n",
    "m = gpf.models.SVGP(\n",
    "    kernel, gpf.likelihoods.Gaussian(), inducing_variable=iv, num_latent_gps=P\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "72a3fe84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:34.936650Z",
     "iopub.status.busy": "2023-05-03T23:15:34.936344Z",
     "iopub.status.idle": "2023-05-03T23:15:48.080281Z",
     "shell.execute_reply": "2023-05-03T23:15:48.079390Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RUNNING THE L-BFGS-B CODE\n",
      "\n",
      "           * * *\n",
      "\n",
      "Machine precision = 2.220D-16\n",
      " N =          460     M =           10\n",
      "\n",
      "At X0         0 variables are exactly at the bounds\n",
      "\n",
      "At iterate    0    f=  3.26251D+03    |proj g|=  1.79322D+03\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " This problem is unconstrained.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate   50    f=  1.91729D+02    |proj g|=  6.27078D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  100    f=  1.05481D+02    |proj g|=  4.93334D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  150    f=  5.20108D+01    |proj g|=  2.94272D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  200    f=  4.67145D+01    |proj g|=  2.18349D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  250    f=  4.42325D+01    |proj g|=  2.92998D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  300    f=  4.28052D+01    |proj g|=  6.52055D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  350    f=  4.12258D+01    |proj g|=  7.51169D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  400    f=  3.96203D+01    |proj g|=  9.03021D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  450    f=  3.86267D+01    |proj g|=  6.21595D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  500    f=  3.81482D+01    |proj g|=  4.72608D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  550    f=  3.79072D+01    |proj g|=  3.26377D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  600    f=  3.77769D+01    |proj g|=  3.26844D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  650    f=  3.76880D+01    |proj g|=  2.81014D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  700    f=  3.75912D+01    |proj g|=  2.54230D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  750    f=  3.74843D+01    |proj g|=  1.60409D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  800    f=  3.73878D+01    |proj g|=  3.66023D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  850    f=  3.72751D+01    |proj g|=  1.80375D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  900    f=  3.72000D+01    |proj g|=  5.29436D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  950    f=  3.71556D+01    |proj g|=  1.57365D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1000    f=  3.71109D+01    |proj g|=  1.92874D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1050    f=  3.70677D+01    |proj g|=  4.03134D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1100    f=  3.70264D+01    |proj g|=  1.65964D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1150    f=  3.70021D+01    |proj g|=  1.94705D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1200    f=  3.69893D+01    |proj g|=  7.90922D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1250    f=  3.69794D+01    |proj g|=  6.15579D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1300    f=  3.69724D+01    |proj g|=  8.61087D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1350    f=  3.69680D+01    |proj g|=  8.38448D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1400    f=  3.69652D+01    |proj g|=  5.08162D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1450    f=  3.69621D+01    |proj g|=  4.89696D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1500    f=  3.69592D+01    |proj g|=  7.00189D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1550    f=  3.69560D+01    |proj g|=  5.52089D-01\n",
      "\n",
      "At iterate 1600    f=  3.69537D+01    |proj g|=  1.50911D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1650    f=  3.69521D+01    |proj g|=  8.23773D-01\n",
      "\n",
      "At iterate 1700    f=  3.69512D+01    |proj g|=  1.88230D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1750    f=  3.69506D+01    |proj g|=  2.76983D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1800    f=  3.69502D+01    |proj g|=  7.08849D-01\n",
      "\n",
      "At iterate 1850    f=  3.69499D+01    |proj g|=  5.98787D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1900    f=  3.69495D+01    |proj g|=  2.53047D-01\n",
      "\n",
      "At iterate 1950    f=  3.69491D+01    |proj g|=  2.12177D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 2000    f=  3.69488D+01    |proj g|=  1.45673D-01\n",
      "\n",
      "           * * *\n",
      "\n",
      "Tit   = total number of iterations\n",
      "Tnf   = total number of function evaluations\n",
      "Tnint = total number of segments explored during Cauchy searches\n",
      "Skip  = number of BFGS updates skipped\n",
      "Nact  = number of active bounds at final generalized Cauchy point\n",
      "Projg = norm of the final projected gradient\n",
      "F     = final function value\n",
      "\n",
      "           * * *\n",
      "\n",
      "   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F\n",
      "  460   2000   2141      1     0     0   1.457D-01   3.695D+01\n",
      "  F =   36.948765982874498     \n",
      "\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT                 \n"
     ]
    }
   ],
   "source": [
    "optimize_model_with_scipy(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "aad9ff8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:48.083103Z",
     "iopub.status.busy": "2023-05-03T23:15:48.082808Z",
     "iopub.status.idle": "2023-05-03T23:15:49.835077Z",
     "shell.execute_reply": "2023-05-03T23:15:49.834481Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_model(m)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87850070",
   "metadata": {},
   "source": [
    "The following plot shows that we use different inducing *inputs* in each output dimension."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "89c57249",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:49.837930Z",
     "iopub.status.busy": "2023-05-03T23:15:49.837445Z",
     "iopub.status.idle": "2023-05-03T23:15:52.095365Z",
     "shell.execute_reply": "2023-05-03T23:15:52.094404Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in range(len(m.inducing_variable.inducing_variable_list)):\n",
    "    q_mu_unwhitened, q_var_unwhitened = m.predict_f(\n",
    "        m.inducing_variable.inducing_variable_list[i].Z\n",
    "    )\n",
    "    plt.plot(\n",
    "        m.inducing_variable.inducing_variable_list[i].Z.numpy(),\n",
    "        q_mu_unwhitened[:, i, None].numpy(),\n",
    "        \"o\",\n",
    "    )\n",
    "plt.gca().set_xticks(np.linspace(-6, 6, 20), minor=True)\n",
    "plt.gca().set_yticks(np.linspace(-9, 9, 20), minor=True)\n",
    "plt.grid(which=\"minor\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "7ba358b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:52.099049Z",
     "iopub.status.busy": "2023-05-03T23:15:52.098753Z",
     "iopub.status.idle": "2023-05-03T23:15:52.102854Z",
     "shell.execute_reply": "2023-05-03T23:15:52.102329Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ListWrapper([<gpflow.inducing_variables.inducing_variables.InducingPoints object at 0x7f44683f6050>, <gpflow.inducing_variables.inducing_variables.InducingPoints object at 0x7f44683f7ac0>, <gpflow.inducing_variables.inducing_variables.InducingPoints object at 0x7f44683f6e90>])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.inducing_variable.inducing_variable_list"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31e8ea8b",
   "metadata": {},
   "source": [
    "## Model $f(x)$ by doing inference in the $g$ space\n",
    "### Mixed kernel and uncorrelated inducing variables\n",
    "\n",
    "Remember the general case: $f(x) = W g(x)$, where $g(x) \\in \\mathbb{R}^L$, $f(x) \\in \\mathbb{R}^P$ and $W \\in \\mathbb{R}^{P \\times L}$, where $L \\leq P$.\n",
    "We assume that the outputs of $g$ are uncorrelated, and by *mixing* them with $W$ they become correlated.\n",
    "With this setup we perform the optimal routine to calculate the conditional. Namely, calculate the conditional of the uncorrelated latent $g$ and afterwards project the mean and variance using the mixing matrix: $\\mu_f = W \\mu_g$ and $\\Sigma_f = W\\Sigma_g W^\\top$\n",
    "\n",
    "- $K_{uu} = L \\times M \\times M$\n",
    "- $K_{uf} = L \\times M \\times N$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "080d257f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:52.105182Z",
     "iopub.status.busy": "2023-05-03T23:15:52.104935Z",
     "iopub.status.idle": "2023-05-03T23:15:52.138765Z",
     "shell.execute_reply": "2023-05-03T23:15:52.137913Z"
    }
   },
   "outputs": [],
   "source": [
    "# Create list of kernels for each output\n",
    "kern_list = [\n",
    "    gpf.kernels.SquaredExponential() + gpf.kernels.Linear() for _ in range(L)\n",
    "]\n",
    "# Create multi-output kernel from kernel list\n",
    "kernel = gpf.kernels.LinearCoregionalization(\n",
    "    kern_list, W=np.random.randn(P, L)\n",
    ")  # Notice that we initialise the mixing matrix W\n",
    "# initialisation of inducing input locations (M random points from the training inputs)\n",
    "Z = Zinit.copy()\n",
    "# create multi-output inducing variables from Z\n",
    "iv = gpf.inducing_variables.SharedIndependentInducingVariables(\n",
    "    gpf.inducing_variables.InducingPoints(Z)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "37ad2a58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:52.142515Z",
     "iopub.status.busy": "2023-05-03T23:15:52.142001Z",
     "iopub.status.idle": "2023-05-03T23:15:52.167318Z",
     "shell.execute_reply": "2023-05-03T23:15:52.166740Z"
    }
   },
   "outputs": [],
   "source": [
    "# initialize mean of variational posterior to be of shape MxL\n",
    "q_mu = np.zeros((M, L))\n",
    "# initialize \\sqrt(\u03a3) of variational posterior to be of shape LxMxM\n",
    "q_sqrt = np.repeat(np.eye(M)[None, ...], L, axis=0) * 1.0\n",
    "\n",
    "# create SVGP model as usual and optimize\n",
    "m = gpf.models.SVGP(\n",
    "    kernel,\n",
    "    gpf.likelihoods.Gaussian(),\n",
    "    inducing_variable=iv,\n",
    "    q_mu=q_mu,\n",
    "    q_sqrt=q_sqrt,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8e98f8b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:15:52.170018Z",
     "iopub.status.busy": "2023-05-03T23:15:52.169744Z",
     "iopub.status.idle": "2023-05-03T23:16:00.714120Z",
     "shell.execute_reply": "2023-05-03T23:16:00.713501Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " This problem is unconstrained.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RUNNING THE L-BFGS-B CODE\n",
      "\n",
      "           * * *\n",
      "\n",
      "Machine precision = 2.220D-16\n",
      " N =          298     M =           10\n",
      "\n",
      "At X0         0 variables are exactly at the bounds\n",
      "\n",
      "At iterate    0    f=  7.44521D+03    |proj g|=  6.62929D+03\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate   50    f=  3.17536D+02    |proj g|=  4.85678D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  100    f=  1.84264D+02    |proj g|=  1.74463D+02\n",
      "\n",
      "At iterate  150    f=  1.18739D+02    |proj g|=  1.20540D+02\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  200    f=  4.03397D+01    |proj g|=  7.37977D+01\n",
      "\n",
      "At iterate  250    f=  2.35736D+01    |proj g|=  3.19784D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  300    f=  1.85507D+01    |proj g|=  1.90258D+01\n",
      "\n",
      "At iterate  350    f=  1.38568D+01    |proj g|=  2.18620D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  400    f=  1.06028D+01    |proj g|=  3.83948D+01\n",
      "\n",
      "At iterate  450    f=  8.44384D+00    |proj g|=  1.64975D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  500    f=  6.90463D+00    |proj g|=  7.77259D+00\n",
      "\n",
      "At iterate  550    f=  5.55241D+00    |proj g|=  1.50941D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  600    f=  4.41403D+00    |proj g|=  1.54117D+01\n",
      "\n",
      "At iterate  650    f=  3.67700D+00    |proj g|=  1.88611D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  700    f=  3.19464D+00    |proj g|=  3.68109D+00\n",
      "\n",
      "At iterate  750    f=  2.86225D+00    |proj g|=  1.10662D+01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  800    f=  2.55773D+00    |proj g|=  3.86343D+00\n",
      "\n",
      "At iterate  850    f=  2.02080D+00    |proj g|=  6.48201D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate  900    f=  1.64970D+00    |proj g|=  2.93980D+00\n",
      "\n",
      "At iterate  950    f=  1.47558D+00    |proj g|=  8.81754D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1000    f=  1.34171D+00    |proj g|=  1.41515D+00\n",
      "\n",
      "At iterate 1050    f=  1.26776D+00    |proj g|=  1.10931D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1100    f=  1.21259D+00    |proj g|=  2.60048D+00\n",
      "\n",
      "At iterate 1150    f=  1.13337D+00    |proj g|=  8.38712D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1200    f=  1.02389D+00    |proj g|=  1.74448D+00\n",
      "\n",
      "At iterate 1250    f=  9.45899D-01    |proj g|=  5.74669D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1300    f=  8.89688D-01    |proj g|=  2.71870D+00\n",
      "\n",
      "At iterate 1350    f=  8.30694D-01    |proj g|=  2.65540D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1400    f=  7.87407D-01    |proj g|=  2.00173D+00\n",
      "\n",
      "At iterate 1450    f=  7.49752D-01    |proj g|=  1.18554D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1500    f=  7.27385D-01    |proj g|=  1.23276D+00\n",
      "\n",
      "At iterate 1550    f=  7.09314D-01    |proj g|=  1.69974D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1600    f=  6.97240D-01    |proj g|=  5.40155D-01\n",
      "\n",
      "At iterate 1650    f=  6.87100D-01    |proj g|=  1.30062D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1700    f=  6.77038D-01    |proj g|=  7.07311D-01\n",
      "\n",
      "At iterate 1750    f=  6.67227D-01    |proj g|=  1.13528D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1800    f=  6.59190D-01    |proj g|=  9.66881D-01\n",
      "\n",
      "At iterate 1850    f=  6.50920D-01    |proj g|=  3.86379D+00\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 1900    f=  6.43698D-01    |proj g|=  3.26855D-01\n",
      "\n",
      "At iterate 1950    f=  6.37257D-01    |proj g|=  2.48417D-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate 2000    f=  6.32587D-01    |proj g|=  7.10780D-01\n",
      "\n",
      "           * * *\n",
      "\n",
      "Tit   = total number of iterations\n",
      "Tnf   = total number of function evaluations\n",
      "Tnint = total number of segments explored during Cauchy searches\n",
      "Skip  = number of BFGS updates skipped\n",
      "Nact  = number of active bounds at final generalized Cauchy point\n",
      "Projg = norm of the final projected gradient\n",
      "F     = final function value\n",
      "\n",
      "           * * *\n",
      "\n",
      "   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F\n",
      "  298   2000   2193      1     0     0   7.108D-01   6.326D-01\n",
      "  F =  0.63258728580373713     \n",
      "\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT                 \n"
     ]
    }
   ],
   "source": [
    "optimize_model_with_scipy(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "6fd2c155",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:16:00.716838Z",
     "iopub.status.busy": "2023-05-03T23:16:00.716409Z",
     "iopub.status.idle": "2023-05-03T23:16:01.789136Z",
     "shell.execute_reply": "2023-05-03T23:16:01.788552Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_model(m)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b4c3ef6",
   "metadata": {},
   "source": [
    "## Illustration of GPflow's multi-output capabilities\n",
    "This section shows the inheritance structure in GPflow's multi-output framework."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22762c3f",
   "metadata": {},
   "source": [
    "### Multi-output kernels (MOK) class diagram\n",
    "We include three multi-output kernels:\n",
    "- `SharedIndependent`: This kernel is included mainly as an illustration of specifying a conditional using the multiple dispatch framework. The same functionality is provided by using a normal kernel and passing in multiple approximate posteriors by stacking `q_mu` and `q_sqrt`.\n",
    "- `SeparateIndependent`: This kernel allows you to use different priors for each output GP.\n",
    "- `LinearCoregionalization`: This kernel describes the prior of the linear model of coregionalization. As shown previously, this implementation supports various inducing point approximations.\n",
    "![Multi-output kernels](./multioutput_kernels.svg)\n",
    "\n",
    "We include several base classes. Two are noteworthy:\n",
    "- `MultioutputKernel` is included to be the base class for all multi-output kernels.\n",
    "- `IndepedentLatent` is the base class for all multi-output kernels which are constructed from independent latent processes. Including this kernel allows the specification of a default approximation method which, while not the most efficient, does take advantage of _some_ structure. It can be applied to _any_ kernel constructed from independent latent processes.\n",
    "\n",
    "There is a similarity in the meaning of `SeparateIndependent` and `IndependentLatent`. Both kernels indicate that independent processes are used, and that $\\mathbf{K}_{\\bf uu}$ can therefore be represented as a `[L, M, M]` tensor. It could therefore be suggested that `SeparateIndependent` be the parent class of all \"independent latent\" kernels, instead of having a separate `IndependentLatent` class. We decided against this because:\n",
    "- this would increase the complexity in specifying `conditionals()` for the otherwise simple multi-output kernels `SeparateIndependent` and `SharedIndependent`.\n",
    "- we did not want to specify too much of an implementation in `IndependentLatent`, leaving implementation details to child classes. Using `SeparateIndependent` as the base class would force all child classes to be a `Combination` kernel."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3121690a",
   "metadata": {},
   "source": [
    "### Multi-output inducing variables class diagram\n",
    "![Multi-output features](./multioutput_features.svg)\n",
    "\n",
    "#### Inducing points\n",
    "The goal of this class is to provide inducing variables that can be used with _any_ kernel, even if the method ends up being slow.\n",
    "\n",
    "The multiouput framework extends `InducingPoints` to work with multi-output kernels. Just like for single-output kernels, we want `InducingPoints` to work for all `MultioutputKernel`s. We do this by defining `InducingPoints` to take _all_ outputs for specific inducing inputs as inducing variables.\n",
    "\n",
    "#### Fallback shared/separate independent inducing variables\n",
    "The goal of these classes is to provide a reasonably efficient implementation for kernels that give exploitable independence structure in the prior of inducing variables (that is, subclasses of `IndependentLatent`), while only needing to implement `Kuu()` and `Kuf()` methods.\n",
    "\n",
    "#### Shared/separate independent inducing variables\n",
    "The goal of these classes is to provide the most efficient code path for kernels that allow exploiting independence structure in the prior of inducing variables.\n",
    "\n",
    "For more specialized multi-output kernels (i.e. `{Shared|Separate}Independent` or `LinearCoregionalization`) we define `{Shared|Separate}IndependentInducingVariables`. These wrap (a list of) single-output inducing variables to define groups of a-priori independent inducing variables, which leads to a $\\mathbf{K}_{\\bf uu}$ that can be represented as a `[L, M, M]` tensor. We saw the use of these previously.\n",
    "\n",
    "`{Shared|Separate}IndependentInducingVariables` inherit from `Fallback{Shared|Separate}IndependentInducingVariables`, so the multiple dispatch will fall back on the slower but general implementation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43a5f00a",
   "metadata": {},
   "source": [
    "### Implemented combinations\n",
    "Multiple dispatch is applied to both `Kuu()`, `Kuf()`, and `conditional()`. The return values of the covariances can therefore be tailored to a specific implementation of `conditional()`. The following table lists combinations which are currently available in GPflow. Thanks to the multiple dispatch code, implementing your own outside of GPflow should require only a small amount of code!\n",
    "\n",
    "|  Inducing variable class  |  Kernel  |  Kuu  |  Kuf  |  conditional  |  note  |\n",
    "|  -----------------------  |  ------  |  ---  |  ---  |  -----------  |  ----  |\n",
    "|  `InducingPoints`                                |  `MultioutputKernel`        |  `[M, P, M, P]`  |  `[M, P, N, P]`  |  `inducing_point_conditional()`, which calls `fully_correlated_conditional()`  |  Works for all kernels, but might be very inefficient. In this case `q_mu` and `q_sqrt` should have shapes of `[1, MP]` and `[1, MP, MP]`  |\n",
    "|  `SharedIndependentInducingVariables`            |  `SharedIndependent`        |  `[M, M]`        |  `[M, N]`        |  `shared_independent_conditional()`, which calls `base_conditional()`  |  The combination of these two classes is in a sense redundant, because we can achieve the same behavior by using the single output Kernel and InducingVariable classes. They are added for illustrative purposes. Thanks to the conditional dispatch, the most efficient code path is used.  |\n",
    "|  `SeparateIndependentInducingVariables`          |  `SharedIndependent`        |  `[P, M, M]`     |  `[P, M, N]`     |  `separate_independent_conditional()`, which calls `base_conditional()` P times  |  We loop P times over the `base_conditional()`  |\n",
    "|  `SeparateIndependentInducingVariable`           |  `SeparateIndependent`      |  `[P, M, M]`     |  `[P, M, N]`     |   `separate_independent_conditional()`, which calls `base_conditional()` P times  |  We loop P times over the `base_conditional()`  |\n",
    "|  `SharedIndependentInducingVariables`            |  `SeparateIndependent`      |  `[P, M, M]`     |  `[P, M, N]`     |  `separate_independent_conditional()`, which calls `base_conditional()` P times  |  We loop P times over the `base_conditional()`  |\n",
    "|  `FallbackSharedIndependentInducingVariables`    |  `IndependentLatent`        |  `[L, M, M]`     |  `[M, L, N, P]`  |  `fallback_independent_latent_conditional()`, which calls `independent_interdomain_conditional()`  |  Implementation which only requires custom `Kuu()` and `Kuf()`  |\n",
    "|  `FallbackSeparateIndependentInducingVariable`   |  `IndependentLatent`        |  `[L, M, M]`     |  `[M, L, N, P]`  |  `fallback_independent_latent_conditional()`, which calls `independent_interdomain_conditional()`  |  Implementation which only requires custom `Kuu()` and `Kuf()`  |\n",
    "|  `SharedIndependentInducingVariables`            |  `LinearCoregionalization`  |  `[L, M, M]`     |  `[L, M, N]`     |  `coregionalization_conditional()`, which calls `base_conditional()`  |  This is the most efficient implementation for linear coregionalization. The inducing outputs live in g-space. Here we use the output of the base conditional and project the mean and covariance with the mixing matrix W.  |\n",
    "|  `SeparateIndependentInducingVariables`          |  `LinearCoregionalization`  |  `[L, M, M]`      |  `[L, M, N]`      |  `base_conditional()`  |  This is the most efficient implementation for linear coregionalization. The inducing outputs live in g-space. Here we use the output of the base conditional and project the mean and covariance with the mixing matrix W.  |"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a4ebc39",
   "metadata": {},
   "source": [
    "## Debugging: introspect\n",
    "\n",
    "Given all these possibilities it can be hard to determine which conditional will be called for which set of kernel and inducing variable. The following method lets you proactively introspect which implementation will be executed. This can be useful when debugging new code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f61fe6e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-03T23:16:01.793801Z",
     "iopub.status.busy": "2023-05-03T23:16:01.793024Z",
     "iopub.status.idle": "2023-05-03T23:16:01.801184Z",
     "shell.execute_reply": "2023-05-03T23:16:01.800677Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<code object wrapped_function at 0x7f44742296e0, file \"/tmp/max_venv/lib/python3.10/site-packages/check_shapes/decorator.py\", line 118>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def inspect_conditional(inducing_variable_type, kernel_type):\n",
    "    \"\"\"\n",
    "    Helper function returning the exact implementation called\n",
    "    by the multiple dispatch `conditional` given the type of\n",
    "    kernel and inducing variable.\n",
    "\n",
    "    :param inducing_variable_type:\n",
    "        Type of the inducing variable\n",
    "    :param kernel_type:\n",
    "        Type of the kernel\n",
    "\n",
    "    :return: String\n",
    "        Contains the name, the file and the linenumber of the\n",
    "        implementation.\n",
    "    \"\"\"\n",
    "    import inspect\n",
    "\n",
    "    from gpflow.conditionals import conditional\n",
    "\n",
    "    implementation = conditional.dispatch(\n",
    "        object, inducing_variable_type, kernel_type, object\n",
    "    )\n",
    "    info = dict(inspect.getmembers(implementation))\n",
    "    return info[\"__code__\"]\n",
    "\n",
    "\n",
    "# Example:\n",
    "inspect_conditional(\n",
    "    gpf.inducing_variables.SharedIndependentInducingVariables,\n",
    "    gpf.kernels.SharedIndependent,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb24cfbf",
   "metadata": {},
   "source": [
    "## Further Reading:\n",
    "- [A simple demonstration of coregionalization](./coregionalisation.ipynb), which details other GPflow features for multi-output prediction without fully observed outputs."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "encoding": "# -*- coding: utf-8 -*-",
   "formats": "ipynb,.pct.py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}